
TraceGenerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000214c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080023e8  080023e8  000123e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002430  08002430  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002430  08002430  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002430  08002430  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002430  08002430  00012430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002434  08002434  00012434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  08002438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  24000078  080024b0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240000ac  080024b0  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e268  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a3a  00000000  00000000  0002e30e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006f0  00000000  00000000  0002fd48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000648  00000000  00000000  00030438  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000340da  00000000  00000000  00030a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006642  00000000  00000000  00064b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0014d360  00000000  00000000  0006b19c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b84fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b94  00000000  00000000  001b8578  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000078 	.word	0x24000078
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080023cc 	.word	0x080023cc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400007c 	.word	0x2400007c
 80002d4:	080023cc 	.word	0x080023cc

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	ed2d 8b02 	vpush	{d8}
 80002de:	f5ad 6dfb 	sub.w	sp, sp, #2008	; 0x7d8
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e4:	f000 fa7c 	bl	80007e0 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint16_t trace[1000];
  for(int x = 0; x < 1000; x++) {
 80002e8:	2300      	movs	r3, #0
 80002ea:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
 80002ee:	e047      	b.n	8000380 <main+0xa8>
	  trace[x] = (int) 4000 * (exp(-(x - 100) * (x - 100) / 50 ) + exp(-(x - 700) * (x - 700) / 20000  ) );
 80002f0:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 80002f4:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80002f8:	f8d7 27d4 	ldr.w	r2, [r7, #2004]	; 0x7d4
 80002fc:	3a64      	subs	r2, #100	; 0x64
 80002fe:	fb02 f303 	mul.w	r3, r2, r3
 8000302:	4a33      	ldr	r2, [pc, #204]	; (80003d0 <main+0xf8>)
 8000304:	fb82 1203 	smull	r1, r2, r2, r3
 8000308:	1112      	asrs	r2, r2, #4
 800030a:	17db      	asrs	r3, r3, #31
 800030c:	1ad3      	subs	r3, r2, r3
 800030e:	ee07 3a90 	vmov	s15, r3
 8000312:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000316:	eeb0 0b47 	vmov.f64	d0, d7
 800031a:	f001 fed1 	bl	80020c0 <exp>
 800031e:	eeb0 8b40 	vmov.f64	d8, d0
 8000322:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8000326:	f5c3 732f 	rsb	r3, r3, #700	; 0x2bc
 800032a:	f8d7 27d4 	ldr.w	r2, [r7, #2004]	; 0x7d4
 800032e:	f5a2 722f 	sub.w	r2, r2, #700	; 0x2bc
 8000332:	fb02 f303 	mul.w	r3, r2, r3
 8000336:	4a27      	ldr	r2, [pc, #156]	; (80003d4 <main+0xfc>)
 8000338:	fb82 1203 	smull	r1, r2, r2, r3
 800033c:	1352      	asrs	r2, r2, #13
 800033e:	17db      	asrs	r3, r3, #31
 8000340:	1ad3      	subs	r3, r2, r3
 8000342:	ee07 3a90 	vmov	s15, r3
 8000346:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800034a:	eeb0 0b47 	vmov.f64	d0, d7
 800034e:	f001 feb7 	bl	80020c0 <exp>
 8000352:	eeb0 7b40 	vmov.f64	d7, d0
 8000356:	ee38 7b07 	vadd.f64	d7, d8, d7
 800035a:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 80003c8 <main+0xf0>
 800035e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000362:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000366:	ee17 3a90 	vmov	r3, s15
 800036a:	b299      	uxth	r1, r3
 800036c:	463b      	mov	r3, r7
 800036e:	f8d7 27d4 	ldr.w	r2, [r7, #2004]	; 0x7d4
 8000372:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(int x = 0; x < 1000; x++) {
 8000376:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 800037a:	3301      	adds	r3, #1
 800037c:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
 8000380:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8000384:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000388:	dbb2      	blt.n	80002f0 <main+0x18>
  }
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800038a:	f000 f827 	bl	80003dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800038e:	f000 f8c1 	bl	8000514 <MX_GPIO_Init>
  MX_DAC1_Init();
 8000392:	f000 f88d 	bl	80004b0 <MX_DAC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(int i = 0; i < 1000; i++)
 8000396:	2300      	movs	r3, #0
 8000398:	f8c7 37d0 	str.w	r3, [r7, #2000]	; 0x7d0
 800039c:	e00e      	b.n	80003bc <main+0xe4>
		  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, trace[i]);
 800039e:	463b      	mov	r3, r7
 80003a0:	f8d7 27d0 	ldr.w	r2, [r7, #2000]	; 0x7d0
 80003a4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80003a8:	2200      	movs	r2, #0
 80003aa:	2100      	movs	r1, #0
 80003ac:	480a      	ldr	r0, [pc, #40]	; (80003d8 <main+0x100>)
 80003ae:	f000 fbdc 	bl	8000b6a <HAL_DAC_SetValue>
	  for(int i = 0; i < 1000; i++)
 80003b2:	f8d7 37d0 	ldr.w	r3, [r7, #2000]	; 0x7d0
 80003b6:	3301      	adds	r3, #1
 80003b8:	f8c7 37d0 	str.w	r3, [r7, #2000]	; 0x7d0
 80003bc:	f8d7 37d0 	ldr.w	r3, [r7, #2000]	; 0x7d0
 80003c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80003c4:	dbeb      	blt.n	800039e <main+0xc6>
 80003c6:	e7e6      	b.n	8000396 <main+0xbe>
 80003c8:	00000000 	.word	0x00000000
 80003cc:	40af4000 	.word	0x40af4000
 80003d0:	51eb851f 	.word	0x51eb851f
 80003d4:	68db8bad 	.word	0x68db8bad
 80003d8:	24000094 	.word	0x24000094

080003dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b09c      	sub	sp, #112	; 0x70
 80003e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003e6:	224c      	movs	r2, #76	; 0x4c
 80003e8:	2100      	movs	r1, #0
 80003ea:	4618      	mov	r0, r3
 80003ec:	f001 fe5e 	bl	80020ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f0:	1d3b      	adds	r3, r7, #4
 80003f2:	2220      	movs	r2, #32
 80003f4:	2100      	movs	r1, #0
 80003f6:	4618      	mov	r0, r3
 80003f8:	f001 fe58 	bl	80020ac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003fc:	2002      	movs	r0, #2
 80003fe:	f000 feb9 	bl	8001174 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000402:	2300      	movs	r3, #0
 8000404:	603b      	str	r3, [r7, #0]
 8000406:	4b28      	ldr	r3, [pc, #160]	; (80004a8 <SystemClock_Config+0xcc>)
 8000408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800040a:	4a27      	ldr	r2, [pc, #156]	; (80004a8 <SystemClock_Config+0xcc>)
 800040c:	f023 0301 	bic.w	r3, r3, #1
 8000410:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000412:	4b25      	ldr	r3, [pc, #148]	; (80004a8 <SystemClock_Config+0xcc>)
 8000414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000416:	f003 0301 	and.w	r3, r3, #1
 800041a:	603b      	str	r3, [r7, #0]
 800041c:	4b23      	ldr	r3, [pc, #140]	; (80004ac <SystemClock_Config+0xd0>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000424:	4a21      	ldr	r2, [pc, #132]	; (80004ac <SystemClock_Config+0xd0>)
 8000426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b1f      	ldr	r3, [pc, #124]	; (80004ac <SystemClock_Config+0xd0>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000434:	603b      	str	r3, [r7, #0]
 8000436:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000438:	bf00      	nop
 800043a:	4b1c      	ldr	r3, [pc, #112]	; (80004ac <SystemClock_Config+0xd0>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000446:	d1f8      	bne.n	800043a <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000448:	2302      	movs	r3, #2
 800044a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800044c:	2301      	movs	r3, #1
 800044e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000450:	2340      	movs	r3, #64	; 0x40
 8000452:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000454:	2300      	movs	r3, #0
 8000456:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800045c:	4618      	mov	r0, r3
 800045e:	f000 fec3 	bl	80011e8 <HAL_RCC_OscConfig>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000468:	f000 f86e 	bl	8000548 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800046c:	233f      	movs	r3, #63	; 0x3f
 800046e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000470:	2300      	movs	r3, #0
 8000472:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000474:	2300      	movs	r3, #0
 8000476:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000478:	2300      	movs	r3, #0
 800047a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800047c:	2300      	movs	r3, #0
 800047e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000480:	2300      	movs	r3, #0
 8000482:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000484:	2300      	movs	r3, #0
 8000486:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000488:	2300      	movs	r3, #0
 800048a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	2100      	movs	r1, #0
 8000490:	4618      	mov	r0, r3
 8000492:	f001 fab9 	bl	8001a08 <HAL_RCC_ClockConfig>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800049c:	f000 f854 	bl	8000548 <Error_Handler>
  }
}
 80004a0:	bf00      	nop
 80004a2:	3770      	adds	r7, #112	; 0x70
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	58000400 	.word	0x58000400
 80004ac:	58024800 	.word	0x58024800

080004b0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b08a      	sub	sp, #40	; 0x28
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80004b6:	1d3b      	adds	r3, r7, #4
 80004b8:	2224      	movs	r2, #36	; 0x24
 80004ba:	2100      	movs	r1, #0
 80004bc:	4618      	mov	r0, r3
 80004be:	f001 fdf5 	bl	80020ac <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80004c2:	4b12      	ldr	r3, [pc, #72]	; (800050c <MX_DAC1_Init+0x5c>)
 80004c4:	4a12      	ldr	r2, [pc, #72]	; (8000510 <MX_DAC1_Init+0x60>)
 80004c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80004c8:	4810      	ldr	r0, [pc, #64]	; (800050c <MX_DAC1_Init+0x5c>)
 80004ca:	f000 fb2c 	bl	8000b26 <HAL_DAC_Init>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80004d4:	f000 f838 	bl	8000548 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80004d8:	2300      	movs	r3, #0
 80004da:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80004dc:	2300      	movs	r3, #0
 80004de:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80004e0:	2300      	movs	r3, #0
 80004e2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80004e4:	2301      	movs	r3, #1
 80004e6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80004e8:	2300      	movs	r3, #0
 80004ea:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	2200      	movs	r2, #0
 80004f0:	4619      	mov	r1, r3
 80004f2:	4806      	ldr	r0, [pc, #24]	; (800050c <MX_DAC1_Init+0x5c>)
 80004f4:	f000 fb5e 	bl	8000bb4 <HAL_DAC_ConfigChannel>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80004fe:	f000 f823 	bl	8000548 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000502:	bf00      	nop
 8000504:	3728      	adds	r7, #40	; 0x28
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	24000094 	.word	0x24000094
 8000510:	40007400 	.word	0x40007400

08000514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051a:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <MX_GPIO_Init+0x30>)
 800051c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000520:	4a08      	ldr	r2, [pc, #32]	; (8000544 <MX_GPIO_Init+0x30>)
 8000522:	f043 0301 	orr.w	r3, r3, #1
 8000526:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800052a:	4b06      	ldr	r3, [pc, #24]	; (8000544 <MX_GPIO_Init+0x30>)
 800052c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000530:	f003 0301 	and.w	r3, r3, #1
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	687b      	ldr	r3, [r7, #4]

}
 8000538:	bf00      	nop
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	58024400 	.word	0x58024400

08000548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
	...

08000558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800055e:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <HAL_MspInit+0x30>)
 8000560:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000564:	4a08      	ldr	r2, [pc, #32]	; (8000588 <HAL_MspInit+0x30>)
 8000566:	f043 0302 	orr.w	r3, r3, #2
 800056a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800056e:	4b06      	ldr	r3, [pc, #24]	; (8000588 <HAL_MspInit+0x30>)
 8000570:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000574:	f003 0302 	and.w	r3, r3, #2
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	58024400 	.word	0x58024400

0800058c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08a      	sub	sp, #40	; 0x28
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a18      	ldr	r2, [pc, #96]	; (800060c <HAL_DAC_MspInit+0x80>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d129      	bne.n	8000602 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80005ae:	4b18      	ldr	r3, [pc, #96]	; (8000610 <HAL_DAC_MspInit+0x84>)
 80005b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80005b4:	4a16      	ldr	r2, [pc, #88]	; (8000610 <HAL_DAC_MspInit+0x84>)
 80005b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80005ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80005be:	4b14      	ldr	r3, [pc, #80]	; (8000610 <HAL_DAC_MspInit+0x84>)
 80005c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80005c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005cc:	4b10      	ldr	r3, [pc, #64]	; (8000610 <HAL_DAC_MspInit+0x84>)
 80005ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005d2:	4a0f      	ldr	r2, [pc, #60]	; (8000610 <HAL_DAC_MspInit+0x84>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <HAL_DAC_MspInit+0x84>)
 80005de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005ea:	2310      	movs	r3, #16
 80005ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ee:	2303      	movs	r3, #3
 80005f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	4619      	mov	r1, r3
 80005fc:	4805      	ldr	r0, [pc, #20]	; (8000614 <HAL_DAC_MspInit+0x88>)
 80005fe:	f000 fc09 	bl	8000e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000602:	bf00      	nop
 8000604:	3728      	adds	r7, #40	; 0x28
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40007400 	.word	0x40007400
 8000610:	58024400 	.word	0x58024400
 8000614:	58020000 	.word	0x58020000

08000618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr

08000626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800062a:	e7fe      	b.n	800062a <HardFault_Handler+0x4>

0800062c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000630:	e7fe      	b.n	8000630 <MemManage_Handler+0x4>

08000632 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000632:	b480      	push	{r7}
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000636:	e7fe      	b.n	8000636 <BusFault_Handler+0x4>

08000638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800063c:	e7fe      	b.n	800063c <UsageFault_Handler+0x4>

0800063e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr

0800065a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800066c:	f000 f92a 	bl	80008c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}

08000674 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000678:	4b39      	ldr	r3, [pc, #228]	; (8000760 <SystemInit+0xec>)
 800067a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800067e:	4a38      	ldr	r2, [pc, #224]	; (8000760 <SystemInit+0xec>)
 8000680:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000684:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000688:	4b36      	ldr	r3, [pc, #216]	; (8000764 <SystemInit+0xf0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f003 030f 	and.w	r3, r3, #15
 8000690:	2b06      	cmp	r3, #6
 8000692:	d807      	bhi.n	80006a4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000694:	4b33      	ldr	r3, [pc, #204]	; (8000764 <SystemInit+0xf0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f023 030f 	bic.w	r3, r3, #15
 800069c:	4a31      	ldr	r2, [pc, #196]	; (8000764 <SystemInit+0xf0>)
 800069e:	f043 0307 	orr.w	r3, r3, #7
 80006a2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006a4:	4b30      	ldr	r3, [pc, #192]	; (8000768 <SystemInit+0xf4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a2f      	ldr	r2, [pc, #188]	; (8000768 <SystemInit+0xf4>)
 80006aa:	f043 0301 	orr.w	r3, r3, #1
 80006ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006b0:	4b2d      	ldr	r3, [pc, #180]	; (8000768 <SystemInit+0xf4>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006b6:	4b2c      	ldr	r3, [pc, #176]	; (8000768 <SystemInit+0xf4>)
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	492b      	ldr	r1, [pc, #172]	; (8000768 <SystemInit+0xf4>)
 80006bc:	4b2b      	ldr	r3, [pc, #172]	; (800076c <SystemInit+0xf8>)
 80006be:	4013      	ands	r3, r2
 80006c0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006c2:	4b28      	ldr	r3, [pc, #160]	; (8000764 <SystemInit+0xf0>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f003 030f 	and.w	r3, r3, #15
 80006ca:	2b07      	cmp	r3, #7
 80006cc:	d907      	bls.n	80006de <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ce:	4b25      	ldr	r3, [pc, #148]	; (8000764 <SystemInit+0xf0>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f023 030f 	bic.w	r3, r3, #15
 80006d6:	4a23      	ldr	r2, [pc, #140]	; (8000764 <SystemInit+0xf0>)
 80006d8:	f043 0307 	orr.w	r3, r3, #7
 80006dc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006de:	4b22      	ldr	r3, [pc, #136]	; (8000768 <SystemInit+0xf4>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006e4:	4b20      	ldr	r3, [pc, #128]	; (8000768 <SystemInit+0xf4>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006ea:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <SystemInit+0xf4>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006f0:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <SystemInit+0xf4>)
 80006f2:	4a1f      	ldr	r2, [pc, #124]	; (8000770 <SystemInit+0xfc>)
 80006f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006f6:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <SystemInit+0xf4>)
 80006f8:	4a1e      	ldr	r2, [pc, #120]	; (8000774 <SystemInit+0x100>)
 80006fa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80006fc:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <SystemInit+0xf4>)
 80006fe:	4a1e      	ldr	r2, [pc, #120]	; (8000778 <SystemInit+0x104>)
 8000700:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000702:	4b19      	ldr	r3, [pc, #100]	; (8000768 <SystemInit+0xf4>)
 8000704:	2200      	movs	r2, #0
 8000706:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000708:	4b17      	ldr	r3, [pc, #92]	; (8000768 <SystemInit+0xf4>)
 800070a:	4a1b      	ldr	r2, [pc, #108]	; (8000778 <SystemInit+0x104>)
 800070c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800070e:	4b16      	ldr	r3, [pc, #88]	; (8000768 <SystemInit+0xf4>)
 8000710:	2200      	movs	r2, #0
 8000712:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <SystemInit+0xf4>)
 8000716:	4a18      	ldr	r2, [pc, #96]	; (8000778 <SystemInit+0x104>)
 8000718:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <SystemInit+0xf4>)
 800071c:	2200      	movs	r2, #0
 800071e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <SystemInit+0xf4>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a10      	ldr	r2, [pc, #64]	; (8000768 <SystemInit+0xf4>)
 8000726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800072a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800072c:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <SystemInit+0xf4>)
 800072e:	2200      	movs	r2, #0
 8000730:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000732:	4b12      	ldr	r3, [pc, #72]	; (800077c <SystemInit+0x108>)
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	4b12      	ldr	r3, [pc, #72]	; (8000780 <SystemInit+0x10c>)
 8000738:	4013      	ands	r3, r2
 800073a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800073e:	d202      	bcs.n	8000746 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <SystemInit+0x110>)
 8000742:	2201      	movs	r2, #1
 8000744:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <SystemInit+0x114>)
 8000748:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800074c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800074e:	4b04      	ldr	r3, [pc, #16]	; (8000760 <SystemInit+0xec>)
 8000750:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000754:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	e000ed00 	.word	0xe000ed00
 8000764:	52002000 	.word	0x52002000
 8000768:	58024400 	.word	0x58024400
 800076c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000770:	02020200 	.word	0x02020200
 8000774:	01ff0000 	.word	0x01ff0000
 8000778:	01010280 	.word	0x01010280
 800077c:	5c001000 	.word	0x5c001000
 8000780:	ffff0000 	.word	0xffff0000
 8000784:	51008108 	.word	0x51008108
 8000788:	52004000 	.word	0x52004000

0800078c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800078c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007c4 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000790:	f7ff ff70 	bl	8000674 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000794:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000796:	e003      	b.n	80007a0 <LoopCopyDataInit>

08000798 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000798:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800079a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800079c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800079e:	3104      	adds	r1, #4

080007a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80007a0:	480a      	ldr	r0, [pc, #40]	; (80007cc <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80007a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80007a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80007a8:	d3f6      	bcc.n	8000798 <CopyDataInit>
  ldr  r2, =_sbss
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80007ac:	e002      	b.n	80007b4 <LoopFillZerobss>

080007ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80007ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80007b0:	f842 3b04 	str.w	r3, [r2], #4

080007b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80007b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80007b8:	d3f9      	bcc.n	80007ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ba:	f001 fc53 	bl	8002064 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007be:	f7ff fd8b 	bl	80002d8 <main>
  bx  lr    
 80007c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007c4:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80007c8:	08002438 	.word	0x08002438
  ldr  r0, =_sdata
 80007cc:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80007d0:	24000078 	.word	0x24000078
  ldr  r2, =_sbss
 80007d4:	24000078 	.word	0x24000078
  ldr  r3, = _ebss
 80007d8:	240000ac 	.word	0x240000ac

080007dc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007dc:	e7fe      	b.n	80007dc <ADC3_IRQHandler>
	...

080007e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e6:	2003      	movs	r0, #3
 80007e8:	f000 f96c 	bl	8000ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80007ec:	f001 fac2 	bl	8001d74 <HAL_RCC_GetSysClockFreq>
 80007f0:	4601      	mov	r1, r0
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <HAL_Init+0x68>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	0a1b      	lsrs	r3, r3, #8
 80007f8:	f003 030f 	and.w	r3, r3, #15
 80007fc:	4a13      	ldr	r2, [pc, #76]	; (800084c <HAL_Init+0x6c>)
 80007fe:	5cd3      	ldrb	r3, [r2, r3]
 8000800:	f003 031f 	and.w	r3, r3, #31
 8000804:	fa21 f303 	lsr.w	r3, r1, r3
 8000808:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <HAL_Init+0x68>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	f003 030f 	and.w	r3, r3, #15
 8000812:	4a0e      	ldr	r2, [pc, #56]	; (800084c <HAL_Init+0x6c>)
 8000814:	5cd3      	ldrb	r3, [r2, r3]
 8000816:	f003 031f 	and.w	r3, r3, #31
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	fa22 f303 	lsr.w	r3, r2, r3
 8000820:	4a0b      	ldr	r2, [pc, #44]	; (8000850 <HAL_Init+0x70>)
 8000822:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000824:	4a0b      	ldr	r2, [pc, #44]	; (8000854 <HAL_Init+0x74>)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800082a:	2000      	movs	r0, #0
 800082c:	f000 f814 	bl	8000858 <HAL_InitTick>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000836:	2301      	movs	r3, #1
 8000838:	e002      	b.n	8000840 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800083a:	f7ff fe8d 	bl	8000558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800083e:	2300      	movs	r3, #0
}
 8000840:	4618      	mov	r0, r3
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	58024400 	.word	0x58024400
 800084c:	080023e8 	.word	0x080023e8
 8000850:	24000004 	.word	0x24000004
 8000854:	24000000 	.word	0x24000000

08000858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000860:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <HAL_InitTick+0x60>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d101      	bne.n	800086c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000868:	2301      	movs	r3, #1
 800086a:	e021      	b.n	80008b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800086c:	4b13      	ldr	r3, [pc, #76]	; (80008bc <HAL_InitTick+0x64>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <HAL_InitTick+0x60>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4619      	mov	r1, r3
 8000876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087a:	fbb3 f3f1 	udiv	r3, r3, r1
 800087e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000882:	4618      	mov	r0, r3
 8000884:	f000 f943 	bl	8000b0e <HAL_SYSTICK_Config>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800088e:	2301      	movs	r3, #1
 8000890:	e00e      	b.n	80008b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2b0f      	cmp	r3, #15
 8000896:	d80a      	bhi.n	80008ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000898:	2200      	movs	r2, #0
 800089a:	6879      	ldr	r1, [r7, #4]
 800089c:	f04f 30ff 	mov.w	r0, #4294967295
 80008a0:	f000 f91b 	bl	8000ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008a4:	4a06      	ldr	r2, [pc, #24]	; (80008c0 <HAL_InitTick+0x68>)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008aa:	2300      	movs	r3, #0
 80008ac:	e000      	b.n	80008b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	2400000c 	.word	0x2400000c
 80008bc:	24000000 	.word	0x24000000
 80008c0:	24000008 	.word	0x24000008

080008c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_IncTick+0x20>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	461a      	mov	r2, r3
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_IncTick+0x24>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4413      	add	r3, r2
 80008d4:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <HAL_IncTick+0x24>)
 80008d6:	6013      	str	r3, [r2, #0]
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	2400000c 	.word	0x2400000c
 80008e8:	240000a8 	.word	0x240000a8

080008ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return uwTick;
 80008f0:	4b03      	ldr	r3, [pc, #12]	; (8000900 <HAL_GetTick+0x14>)
 80008f2:	681b      	ldr	r3, [r3, #0]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	240000a8 	.word	0x240000a8

08000904 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800090c:	f7ff ffee 	bl	80008ec <HAL_GetTick>
 8000910:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800091c:	d005      	beq.n	800092a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <HAL_Delay+0x40>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	461a      	mov	r2, r3
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	4413      	add	r3, r2
 8000928:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800092a:	bf00      	nop
 800092c:	f7ff ffde 	bl	80008ec <HAL_GetTick>
 8000930:	4602      	mov	r2, r0
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	429a      	cmp	r2, r3
 800093a:	d8f7      	bhi.n	800092c <HAL_Delay+0x28>
  {
  }
}
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	2400000c 	.word	0x2400000c

08000948 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <HAL_GetREVID+0x14>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	0c1b      	lsrs	r3, r3, #16
}
 8000952:	4618      	mov	r0, r3
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	5c001000 	.word	0x5c001000

08000960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000970:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <__NVIC_SetPriorityGrouping+0x40>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800097c:	4013      	ands	r3, r2
 800097e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <__NVIC_SetPriorityGrouping+0x44>)
 800098a:	4313      	orrs	r3, r2
 800098c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800098e:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <__NVIC_SetPriorityGrouping+0x40>)
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	60d3      	str	r3, [r2, #12]
}
 8000994:	bf00      	nop
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	e000ed00 	.word	0xe000ed00
 80009a4:	05fa0000 	.word	0x05fa0000

080009a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009ac:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <__NVIC_GetPriorityGrouping+0x18>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	0a1b      	lsrs	r3, r3, #8
 80009b2:	f003 0307 	and.w	r3, r3, #7
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	6039      	str	r1, [r7, #0]
 80009ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80009d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	db0a      	blt.n	80009ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	490c      	ldr	r1, [pc, #48]	; (8000a10 <__NVIC_SetPriority+0x4c>)
 80009de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009e2:	0112      	lsls	r2, r2, #4
 80009e4:	b2d2      	uxtb	r2, r2
 80009e6:	440b      	add	r3, r1
 80009e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009ec:	e00a      	b.n	8000a04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	4908      	ldr	r1, [pc, #32]	; (8000a14 <__NVIC_SetPriority+0x50>)
 80009f4:	88fb      	ldrh	r3, [r7, #6]
 80009f6:	f003 030f 	and.w	r3, r3, #15
 80009fa:	3b04      	subs	r3, #4
 80009fc:	0112      	lsls	r2, r2, #4
 80009fe:	b2d2      	uxtb	r2, r2
 8000a00:	440b      	add	r3, r1
 8000a02:	761a      	strb	r2, [r3, #24]
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000e100 	.word	0xe000e100
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b089      	sub	sp, #36	; 0x24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a2c:	69fb      	ldr	r3, [r7, #28]
 8000a2e:	f1c3 0307 	rsb	r3, r3, #7
 8000a32:	2b04      	cmp	r3, #4
 8000a34:	bf28      	it	cs
 8000a36:	2304      	movcs	r3, #4
 8000a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	2b06      	cmp	r3, #6
 8000a40:	d902      	bls.n	8000a48 <NVIC_EncodePriority+0x30>
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	3b03      	subs	r3, #3
 8000a46:	e000      	b.n	8000a4a <NVIC_EncodePriority+0x32>
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	43da      	mvns	r2, r3
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	401a      	ands	r2, r3
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a60:	f04f 31ff 	mov.w	r1, #4294967295
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6a:	43d9      	mvns	r1, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	4313      	orrs	r3, r2
         );
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3724      	adds	r7, #36	; 0x24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
	...

08000a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a90:	d301      	bcc.n	8000a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a92:	2301      	movs	r3, #1
 8000a94:	e00f      	b.n	8000ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a96:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <SysTick_Config+0x40>)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a9e:	210f      	movs	r1, #15
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	f7ff ff8e 	bl	80009c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <SysTick_Config+0x40>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aae:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <SysTick_Config+0x40>)
 8000ab0:	2207      	movs	r2, #7
 8000ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	e000e010 	.word	0xe000e010

08000ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff ff47 	bl	8000960 <__NVIC_SetPriorityGrouping>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b086      	sub	sp, #24
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
 8000ae6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ae8:	f7ff ff5e 	bl	80009a8 <__NVIC_GetPriorityGrouping>
 8000aec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	68b9      	ldr	r1, [r7, #8]
 8000af2:	6978      	ldr	r0, [r7, #20]
 8000af4:	f7ff ff90 	bl	8000a18 <NVIC_EncodePriority>
 8000af8:	4602      	mov	r2, r0
 8000afa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000afe:	4611      	mov	r1, r2
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff5f 	bl	80009c4 <__NVIC_SetPriority>
}
 8000b06:	bf00      	nop
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff ffb2 	bl	8000a80 <SysTick_Config>
 8000b1c:	4603      	mov	r3, r0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d101      	bne.n	8000b38 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
 8000b36:	e014      	b.n	8000b62 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	791b      	ldrb	r3, [r3, #4]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d105      	bne.n	8000b4e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2200      	movs	r2, #0
 8000b46:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff fd1f 	bl	800058c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2202      	movs	r2, #2
 8000b52:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b087      	sub	sp, #28
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	60f8      	str	r0, [r7, #12]
 8000b72:	60b9      	str	r1, [r7, #8]
 8000b74:	607a      	str	r2, [r7, #4]
 8000b76:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d105      	bne.n	8000b94 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000b88:	697a      	ldr	r2, [r7, #20]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	3308      	adds	r3, #8
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	e004      	b.n	8000b9e <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000b94:	697a      	ldr	r2, [r7, #20]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	3314      	adds	r3, #20
 8000b9c:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000ba6:	2300      	movs	r3, #0
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	371c      	adds	r7, #28
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b088      	sub	sp, #32
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	795b      	ldrb	r3, [r3, #5]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d101      	bne.n	8000bcc <HAL_DAC_ConfigChannel+0x18>
 8000bc8:	2302      	movs	r3, #2
 8000bca:	e11d      	b.n	8000e08 <HAL_DAC_ConfigChannel+0x254>
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	2201      	movs	r2, #1
 8000bd0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b04      	cmp	r3, #4
 8000bde:	d174      	bne.n	8000cca <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000be0:	f7ff fe84 	bl	80008ec <HAL_GetTick>
 8000be4:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d134      	bne.n	8000c56 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000bec:	e011      	b.n	8000c12 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000bee:	f7ff fe7d 	bl	80008ec <HAL_GetTick>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d90a      	bls.n	8000c12 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	691b      	ldr	r3, [r3, #16]
 8000c00:	f043 0208 	orr.w	r2, r3, #8
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	e0fa      	b.n	8000e08 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c18:	4b7d      	ldr	r3, [pc, #500]	; (8000e10 <HAL_DAC_ConfigChannel+0x25c>)
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d1e6      	bne.n	8000bee <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8000c20:	2001      	movs	r0, #1
 8000c22:	f7ff fe6f 	bl	8000904 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	6992      	ldr	r2, [r2, #24]
 8000c2e:	641a      	str	r2, [r3, #64]	; 0x40
 8000c30:	e01e      	b.n	8000c70 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000c32:	f7ff fe5b 	bl	80008ec <HAL_GetTick>
 8000c36:	4602      	mov	r2, r0
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	1ad3      	subs	r3, r2, r3
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d90a      	bls.n	8000c56 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	691b      	ldr	r3, [r3, #16]
 8000c44:	f043 0208 	orr.w	r2, r3, #8
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	2203      	movs	r2, #3
 8000c50:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000c52:	2303      	movs	r3, #3
 8000c54:	e0d8      	b.n	8000e08 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	dbe8      	blt.n	8000c32 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8000c60:	2001      	movs	r0, #1
 8000c62:	f7ff fe4f 	bl	8000904 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	6992      	ldr	r2, [r2, #24]
 8000c6e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f003 0310 	and.w	r3, r3, #16
 8000c7c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000c80:	fa01 f303 	lsl.w	r3, r1, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	ea02 0103 	and.w	r1, r2, r3
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	69da      	ldr	r2, [r3, #28]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f003 0310 	and.w	r3, r3, #16
 8000c94:	409a      	lsls	r2, r3
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f003 0310 	and.w	r3, r3, #16
 8000caa:	21ff      	movs	r1, #255	; 0xff
 8000cac:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	ea02 0103 	and.w	r1, r2, r3
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	6a1a      	ldr	r2, [r3, #32]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	f003 0310 	and.w	r3, r3, #16
 8000cc0:	409a      	lsls	r2, r3
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	691b      	ldr	r3, [r3, #16]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d11d      	bne.n	8000d0e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cd8:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f003 0310 	and.w	r3, r3, #16
 8000ce0:	221f      	movs	r2, #31
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	697a      	ldr	r2, [r7, #20]
 8000cea:	4013      	ands	r3, r2
 8000cec:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f003 0310 	and.w	r3, r3, #16
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	697a      	ldr	r2, [r7, #20]
 8000d0c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d14:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f003 0310 	and.w	r3, r3, #16
 8000d1c:	2207      	movs	r2, #7
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	697a      	ldr	r2, [r7, #20]
 8000d26:	4013      	ands	r3, r2
 8000d28:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d102      	bne.n	8000d38 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
 8000d36:	e00f      	b.n	8000d58 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d102      	bne.n	8000d46 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8000d40:	2301      	movs	r3, #1
 8000d42:	61fb      	str	r3, [r7, #28]
 8000d44:	e008      	b.n	8000d58 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d102      	bne.n	8000d54 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	61fb      	str	r3, [r7, #28]
 8000d52:	e001      	b.n	8000d58 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	69fa      	ldr	r2, [r7, #28]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f003 0310 	and.w	r3, r3, #16
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	697a      	ldr	r2, [r7, #20]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	697a      	ldr	r2, [r7, #20]
 8000d80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	6819      	ldr	r1, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f003 0310 	and.w	r3, r3, #16
 8000d8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43da      	mvns	r2, r3
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	400a      	ands	r2, r1
 8000d9e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0310 	and.w	r3, r3, #16
 8000dae:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	697a      	ldr	r2, [r7, #20]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f003 0310 	and.w	r3, r3, #16
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	697a      	ldr	r2, [r7, #20]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	697a      	ldr	r2, [r7, #20]
 8000ddc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	6819      	ldr	r1, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f003 0310 	and.w	r3, r3, #16
 8000dea:	22c0      	movs	r2, #192	; 0xc0
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43da      	mvns	r2, r3
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	400a      	ands	r2, r1
 8000df8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2200      	movs	r2, #0
 8000e04:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3720      	adds	r7, #32
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20008000 	.word	0x20008000

08000e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	; 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000e22:	4b89      	ldr	r3, [pc, #548]	; (8001048 <HAL_GPIO_Init+0x234>)
 8000e24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000e26:	e194      	b.n	8001152 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	fa01 f303 	lsl.w	r3, r1, r3
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f000 8186 	beq.w	800114c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d00b      	beq.n	8000e60 <HAL_GPIO_Init+0x4c>
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d007      	beq.n	8000e60 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e54:	2b11      	cmp	r3, #17
 8000e56:	d003      	beq.n	8000e60 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	2b12      	cmp	r3, #18
 8000e5e:	d130      	bne.n	8000ec2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	68da      	ldr	r2, [r3, #12]
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e96:	2201      	movs	r2, #1
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	091b      	lsrs	r3, r3, #4
 8000eac:	f003 0201 	and.w	r2, r3, #1
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	2203      	movs	r2, #3
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	689a      	ldr	r2, [r3, #8]
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_Init+0xee>
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	2b12      	cmp	r3, #18
 8000f00:	d123      	bne.n	8000f4a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	08da      	lsrs	r2, r3, #3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3208      	adds	r2, #8
 8000f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	220f      	movs	r2, #15
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4013      	ands	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	691a      	ldr	r2, [r3, #16]
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	f003 0307 	and.w	r3, r3, #7
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	08da      	lsrs	r2, r3, #3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3208      	adds	r2, #8
 8000f44:	69b9      	ldr	r1, [r7, #24]
 8000f46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 0203 	and.w	r2, r3, #3
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 80e0 	beq.w	800114c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8c:	4b2f      	ldr	r3, [pc, #188]	; (800104c <HAL_GPIO_Init+0x238>)
 8000f8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f92:	4a2e      	ldr	r2, [pc, #184]	; (800104c <HAL_GPIO_Init+0x238>)
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f9c:	4b2b      	ldr	r3, [pc, #172]	; (800104c <HAL_GPIO_Init+0x238>)
 8000f9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000faa:	4a29      	ldr	r2, [pc, #164]	; (8001050 <HAL_GPIO_Init+0x23c>)
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	089b      	lsrs	r3, r3, #2
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	220f      	movs	r2, #15
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a20      	ldr	r2, [pc, #128]	; (8001054 <HAL_GPIO_Init+0x240>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d052      	beq.n	800107c <HAL_GPIO_Init+0x268>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a1f      	ldr	r2, [pc, #124]	; (8001058 <HAL_GPIO_Init+0x244>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d031      	beq.n	8001042 <HAL_GPIO_Init+0x22e>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a1e      	ldr	r2, [pc, #120]	; (800105c <HAL_GPIO_Init+0x248>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d02b      	beq.n	800103e <HAL_GPIO_Init+0x22a>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a1d      	ldr	r2, [pc, #116]	; (8001060 <HAL_GPIO_Init+0x24c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d025      	beq.n	800103a <HAL_GPIO_Init+0x226>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a1c      	ldr	r2, [pc, #112]	; (8001064 <HAL_GPIO_Init+0x250>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d01f      	beq.n	8001036 <HAL_GPIO_Init+0x222>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a1b      	ldr	r2, [pc, #108]	; (8001068 <HAL_GPIO_Init+0x254>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d019      	beq.n	8001032 <HAL_GPIO_Init+0x21e>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a1a      	ldr	r2, [pc, #104]	; (800106c <HAL_GPIO_Init+0x258>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d013      	beq.n	800102e <HAL_GPIO_Init+0x21a>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a19      	ldr	r2, [pc, #100]	; (8001070 <HAL_GPIO_Init+0x25c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d00d      	beq.n	800102a <HAL_GPIO_Init+0x216>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a18      	ldr	r2, [pc, #96]	; (8001074 <HAL_GPIO_Init+0x260>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d007      	beq.n	8001026 <HAL_GPIO_Init+0x212>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a17      	ldr	r2, [pc, #92]	; (8001078 <HAL_GPIO_Init+0x264>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d101      	bne.n	8001022 <HAL_GPIO_Init+0x20e>
 800101e:	2309      	movs	r3, #9
 8001020:	e02d      	b.n	800107e <HAL_GPIO_Init+0x26a>
 8001022:	230a      	movs	r3, #10
 8001024:	e02b      	b.n	800107e <HAL_GPIO_Init+0x26a>
 8001026:	2308      	movs	r3, #8
 8001028:	e029      	b.n	800107e <HAL_GPIO_Init+0x26a>
 800102a:	2307      	movs	r3, #7
 800102c:	e027      	b.n	800107e <HAL_GPIO_Init+0x26a>
 800102e:	2306      	movs	r3, #6
 8001030:	e025      	b.n	800107e <HAL_GPIO_Init+0x26a>
 8001032:	2305      	movs	r3, #5
 8001034:	e023      	b.n	800107e <HAL_GPIO_Init+0x26a>
 8001036:	2304      	movs	r3, #4
 8001038:	e021      	b.n	800107e <HAL_GPIO_Init+0x26a>
 800103a:	2303      	movs	r3, #3
 800103c:	e01f      	b.n	800107e <HAL_GPIO_Init+0x26a>
 800103e:	2302      	movs	r3, #2
 8001040:	e01d      	b.n	800107e <HAL_GPIO_Init+0x26a>
 8001042:	2301      	movs	r3, #1
 8001044:	e01b      	b.n	800107e <HAL_GPIO_Init+0x26a>
 8001046:	bf00      	nop
 8001048:	58000080 	.word	0x58000080
 800104c:	58024400 	.word	0x58024400
 8001050:	58000400 	.word	0x58000400
 8001054:	58020000 	.word	0x58020000
 8001058:	58020400 	.word	0x58020400
 800105c:	58020800 	.word	0x58020800
 8001060:	58020c00 	.word	0x58020c00
 8001064:	58021000 	.word	0x58021000
 8001068:	58021400 	.word	0x58021400
 800106c:	58021800 	.word	0x58021800
 8001070:	58021c00 	.word	0x58021c00
 8001074:	58022000 	.word	0x58022000
 8001078:	58022400 	.word	0x58022400
 800107c:	2300      	movs	r3, #0
 800107e:	69fa      	ldr	r2, [r7, #28]
 8001080:	f002 0203 	and.w	r2, r2, #3
 8001084:	0092      	lsls	r2, r2, #2
 8001086:	4093      	lsls	r3, r2
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800108e:	4938      	ldr	r1, [pc, #224]	; (8001170 <HAL_GPIO_Init+0x35c>)
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	089b      	lsrs	r3, r3, #2
 8001094:	3302      	adds	r3, #2
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001116:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800111e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001144:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	3301      	adds	r3, #1
 8001150:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	fa22 f303 	lsr.w	r3, r2, r3
 800115c:	2b00      	cmp	r3, #0
 800115e:	f47f ae63 	bne.w	8000e28 <HAL_GPIO_Init+0x14>
  }
}
 8001162:	bf00      	nop
 8001164:	3724      	adds	r7, #36	; 0x24
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	58000400 	.word	0x58000400

08001174 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <HAL_PWREx_ConfigSupply+0x70>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	2b04      	cmp	r3, #4
 8001186:	d00a      	beq.n	800119e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <HAL_PWREx_ConfigSupply+0x70>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	f003 0307 	and.w	r3, r3, #7
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	429a      	cmp	r2, r3
 8001194:	d001      	beq.n	800119a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e01f      	b.n	80011da <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800119a:	2300      	movs	r3, #0
 800119c:	e01d      	b.n	80011da <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <HAL_PWREx_ConfigSupply+0x70>)
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	f023 0207 	bic.w	r2, r3, #7
 80011a6:	490f      	ldr	r1, [pc, #60]	; (80011e4 <HAL_PWREx_ConfigSupply+0x70>)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80011ae:	f7ff fb9d 	bl	80008ec <HAL_GetTick>
 80011b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80011b4:	e009      	b.n	80011ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80011b6:	f7ff fb99 	bl	80008ec <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011c4:	d901      	bls.n	80011ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e007      	b.n	80011da <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_PWREx_ConfigSupply+0x70>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011d6:	d1ee      	bne.n	80011b6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	58024800 	.word	0x58024800

080011e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08c      	sub	sp, #48	; 0x30
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e3ff      	b.n	80019fa <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	2b00      	cmp	r3, #0
 8001204:	f000 8087 	beq.w	8001316 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001208:	4b99      	ldr	r3, [pc, #612]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001210:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001212:	4b97      	ldr	r3, [pc, #604]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 8001214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800121a:	2b10      	cmp	r3, #16
 800121c:	d007      	beq.n	800122e <HAL_RCC_OscConfig+0x46>
 800121e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001220:	2b18      	cmp	r3, #24
 8001222:	d110      	bne.n	8001246 <HAL_RCC_OscConfig+0x5e>
 8001224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d10b      	bne.n	8001246 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800122e:	4b90      	ldr	r3, [pc, #576]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d06c      	beq.n	8001314 <HAL_RCC_OscConfig+0x12c>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d168      	bne.n	8001314 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e3d9      	b.n	80019fa <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800124e:	d106      	bne.n	800125e <HAL_RCC_OscConfig+0x76>
 8001250:	4b87      	ldr	r3, [pc, #540]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a86      	ldr	r2, [pc, #536]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 8001256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	e02e      	b.n	80012bc <HAL_RCC_OscConfig+0xd4>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10c      	bne.n	8001280 <HAL_RCC_OscConfig+0x98>
 8001266:	4b82      	ldr	r3, [pc, #520]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a81      	ldr	r2, [pc, #516]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 800126c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	4b7f      	ldr	r3, [pc, #508]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a7e      	ldr	r2, [pc, #504]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 8001278:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	e01d      	b.n	80012bc <HAL_RCC_OscConfig+0xd4>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001288:	d10c      	bne.n	80012a4 <HAL_RCC_OscConfig+0xbc>
 800128a:	4b79      	ldr	r3, [pc, #484]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a78      	ldr	r2, [pc, #480]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 8001290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	4b76      	ldr	r3, [pc, #472]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a75      	ldr	r2, [pc, #468]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 800129c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e00b      	b.n	80012bc <HAL_RCC_OscConfig+0xd4>
 80012a4:	4b72      	ldr	r3, [pc, #456]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a71      	ldr	r2, [pc, #452]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 80012aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	4b6f      	ldr	r3, [pc, #444]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a6e      	ldr	r2, [pc, #440]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 80012b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d013      	beq.n	80012ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c4:	f7ff fb12 	bl	80008ec <HAL_GetTick>
 80012c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012cc:	f7ff fb0e 	bl	80008ec <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b64      	cmp	r3, #100	; 0x64
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e38d      	b.n	80019fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012de:	4b64      	ldr	r3, [pc, #400]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0f0      	beq.n	80012cc <HAL_RCC_OscConfig+0xe4>
 80012ea:	e014      	b.n	8001316 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ec:	f7ff fafe 	bl	80008ec <HAL_GetTick>
 80012f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f4:	f7ff fafa 	bl	80008ec <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b64      	cmp	r3, #100	; 0x64
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e379      	b.n	80019fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001306:	4b5a      	ldr	r3, [pc, #360]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1f0      	bne.n	80012f4 <HAL_RCC_OscConfig+0x10c>
 8001312:	e000      	b.n	8001316 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	f000 80ae 	beq.w	8001480 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001324:	4b52      	ldr	r3, [pc, #328]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800132c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800132e:	4b50      	ldr	r3, [pc, #320]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 8001330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001332:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001334:	6a3b      	ldr	r3, [r7, #32]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d007      	beq.n	800134a <HAL_RCC_OscConfig+0x162>
 800133a:	6a3b      	ldr	r3, [r7, #32]
 800133c:	2b18      	cmp	r3, #24
 800133e:	d13a      	bne.n	80013b6 <HAL_RCC_OscConfig+0x1ce>
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d135      	bne.n	80013b6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800134a:	4b49      	ldr	r3, [pc, #292]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0304 	and.w	r3, r3, #4
 8001352:	2b00      	cmp	r3, #0
 8001354:	d005      	beq.n	8001362 <HAL_RCC_OscConfig+0x17a>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e34b      	b.n	80019fa <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001362:	f7ff faf1 	bl	8000948 <HAL_GetREVID>
 8001366:	4602      	mov	r2, r0
 8001368:	f241 0303 	movw	r3, #4099	; 0x1003
 800136c:	429a      	cmp	r2, r3
 800136e:	d817      	bhi.n	80013a0 <HAL_RCC_OscConfig+0x1b8>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	2b40      	cmp	r3, #64	; 0x40
 8001376:	d108      	bne.n	800138a <HAL_RCC_OscConfig+0x1a2>
 8001378:	4b3d      	ldr	r3, [pc, #244]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001380:	4a3b      	ldr	r2, [pc, #236]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 8001382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001386:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001388:	e07a      	b.n	8001480 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138a:	4b39      	ldr	r3, [pc, #228]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	031b      	lsls	r3, r3, #12
 8001398:	4935      	ldr	r1, [pc, #212]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 800139a:	4313      	orrs	r3, r2
 800139c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800139e:	e06f      	b.n	8001480 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a0:	4b33      	ldr	r3, [pc, #204]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	061b      	lsls	r3, r3, #24
 80013ae:	4930      	ldr	r1, [pc, #192]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013b4:	e064      	b.n	8001480 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d045      	beq.n	800144a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80013be:	4b2c      	ldr	r3, [pc, #176]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f023 0219 	bic.w	r2, r3, #25
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	4929      	ldr	r1, [pc, #164]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d0:	f7ff fa8c 	bl	80008ec <HAL_GetTick>
 80013d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d8:	f7ff fa88 	bl	80008ec <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e307      	b.n	80019fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013ea:	4b21      	ldr	r3, [pc, #132]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0304 	and.w	r3, r3, #4
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f0      	beq.n	80013d8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f6:	f7ff faa7 	bl	8000948 <HAL_GetREVID>
 80013fa:	4602      	mov	r2, r0
 80013fc:	f241 0303 	movw	r3, #4099	; 0x1003
 8001400:	429a      	cmp	r2, r3
 8001402:	d817      	bhi.n	8001434 <HAL_RCC_OscConfig+0x24c>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	2b40      	cmp	r3, #64	; 0x40
 800140a:	d108      	bne.n	800141e <HAL_RCC_OscConfig+0x236>
 800140c:	4b18      	ldr	r3, [pc, #96]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001414:	4a16      	ldr	r2, [pc, #88]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 8001416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800141a:	6053      	str	r3, [r2, #4]
 800141c:	e030      	b.n	8001480 <HAL_RCC_OscConfig+0x298>
 800141e:	4b14      	ldr	r3, [pc, #80]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	031b      	lsls	r3, r3, #12
 800142c:	4910      	ldr	r1, [pc, #64]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 800142e:	4313      	orrs	r3, r2
 8001430:	604b      	str	r3, [r1, #4]
 8001432:	e025      	b.n	8001480 <HAL_RCC_OscConfig+0x298>
 8001434:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	061b      	lsls	r3, r3, #24
 8001442:	490b      	ldr	r1, [pc, #44]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 8001444:	4313      	orrs	r3, r2
 8001446:	604b      	str	r3, [r1, #4]
 8001448:	e01a      	b.n	8001480 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a08      	ldr	r2, [pc, #32]	; (8001470 <HAL_RCC_OscConfig+0x288>)
 8001450:	f023 0301 	bic.w	r3, r3, #1
 8001454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001456:	f7ff fa49 	bl	80008ec <HAL_GetTick>
 800145a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800145c:	e00a      	b.n	8001474 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800145e:	f7ff fa45 	bl	80008ec <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d903      	bls.n	8001474 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e2c4      	b.n	80019fa <HAL_RCC_OscConfig+0x812>
 8001470:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001474:	4ba4      	ldr	r3, [pc, #656]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1ee      	bne.n	800145e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0310 	and.w	r3, r3, #16
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 80a9 	beq.w	80015e0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800148e:	4b9e      	ldr	r3, [pc, #632]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001496:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001498:	4b9b      	ldr	r3, [pc, #620]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 800149a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	2b08      	cmp	r3, #8
 80014a2:	d007      	beq.n	80014b4 <HAL_RCC_OscConfig+0x2cc>
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	2b18      	cmp	r3, #24
 80014a8:	d13a      	bne.n	8001520 <HAL_RCC_OscConfig+0x338>
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d135      	bne.n	8001520 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014b4:	4b94      	ldr	r3, [pc, #592]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d005      	beq.n	80014cc <HAL_RCC_OscConfig+0x2e4>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69db      	ldr	r3, [r3, #28]
 80014c4:	2b80      	cmp	r3, #128	; 0x80
 80014c6:	d001      	beq.n	80014cc <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e296      	b.n	80019fa <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014cc:	f7ff fa3c 	bl	8000948 <HAL_GetREVID>
 80014d0:	4602      	mov	r2, r0
 80014d2:	f241 0303 	movw	r3, #4099	; 0x1003
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d817      	bhi.n	800150a <HAL_RCC_OscConfig+0x322>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	2b20      	cmp	r3, #32
 80014e0:	d108      	bne.n	80014f4 <HAL_RCC_OscConfig+0x30c>
 80014e2:	4b89      	ldr	r3, [pc, #548]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80014ea:	4a87      	ldr	r2, [pc, #540]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 80014ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80014f0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014f2:	e075      	b.n	80015e0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014f4:	4b84      	ldr	r3, [pc, #528]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a1b      	ldr	r3, [r3, #32]
 8001500:	069b      	lsls	r3, r3, #26
 8001502:	4981      	ldr	r1, [pc, #516]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 8001504:	4313      	orrs	r3, r2
 8001506:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001508:	e06a      	b.n	80015e0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800150a:	4b7f      	ldr	r3, [pc, #508]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	061b      	lsls	r3, r3, #24
 8001518:	497b      	ldr	r1, [pc, #492]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 800151a:	4313      	orrs	r3, r2
 800151c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800151e:	e05f      	b.n	80015e0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d042      	beq.n	80015ae <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001528:	4b77      	ldr	r3, [pc, #476]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a76      	ldr	r2, [pc, #472]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 800152e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001534:	f7ff f9da 	bl	80008ec <HAL_GetTick>
 8001538:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800153c:	f7ff f9d6 	bl	80008ec <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e255      	b.n	80019fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800154e:	4b6e      	ldr	r3, [pc, #440]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f0      	beq.n	800153c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800155a:	f7ff f9f5 	bl	8000948 <HAL_GetREVID>
 800155e:	4602      	mov	r2, r0
 8001560:	f241 0303 	movw	r3, #4099	; 0x1003
 8001564:	429a      	cmp	r2, r3
 8001566:	d817      	bhi.n	8001598 <HAL_RCC_OscConfig+0x3b0>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	2b20      	cmp	r3, #32
 800156e:	d108      	bne.n	8001582 <HAL_RCC_OscConfig+0x39a>
 8001570:	4b65      	ldr	r3, [pc, #404]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001578:	4a63      	ldr	r2, [pc, #396]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 800157a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800157e:	6053      	str	r3, [r2, #4]
 8001580:	e02e      	b.n	80015e0 <HAL_RCC_OscConfig+0x3f8>
 8001582:	4b61      	ldr	r3, [pc, #388]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a1b      	ldr	r3, [r3, #32]
 800158e:	069b      	lsls	r3, r3, #26
 8001590:	495d      	ldr	r1, [pc, #372]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 8001592:	4313      	orrs	r3, r2
 8001594:	604b      	str	r3, [r1, #4]
 8001596:	e023      	b.n	80015e0 <HAL_RCC_OscConfig+0x3f8>
 8001598:	4b5b      	ldr	r3, [pc, #364]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	061b      	lsls	r3, r3, #24
 80015a6:	4958      	ldr	r1, [pc, #352]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 80015a8:	4313      	orrs	r3, r2
 80015aa:	60cb      	str	r3, [r1, #12]
 80015ac:	e018      	b.n	80015e0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80015ae:	4b56      	ldr	r3, [pc, #344]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a55      	ldr	r2, [pc, #340]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 80015b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ba:	f7ff f997 	bl	80008ec <HAL_GetTick>
 80015be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80015c2:	f7ff f993 	bl	80008ec <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e212      	b.n	80019fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015d4:	4b4c      	ldr	r3, [pc, #304]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1f0      	bne.n	80015c2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0308 	and.w	r3, r3, #8
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d036      	beq.n	800165a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d019      	beq.n	8001628 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015f4:	4b44      	ldr	r3, [pc, #272]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 80015f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015f8:	4a43      	ldr	r2, [pc, #268]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001600:	f7ff f974 	bl	80008ec <HAL_GetTick>
 8001604:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001608:	f7ff f970 	bl	80008ec <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e1ef      	b.n	80019fa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800161a:	4b3b      	ldr	r3, [pc, #236]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 800161c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0f0      	beq.n	8001608 <HAL_RCC_OscConfig+0x420>
 8001626:	e018      	b.n	800165a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001628:	4b37      	ldr	r3, [pc, #220]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 800162a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800162c:	4a36      	ldr	r2, [pc, #216]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 800162e:	f023 0301 	bic.w	r3, r3, #1
 8001632:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001634:	f7ff f95a 	bl	80008ec <HAL_GetTick>
 8001638:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800163c:	f7ff f956 	bl	80008ec <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e1d5      	b.n	80019fa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800164e:	4b2e      	ldr	r3, [pc, #184]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 8001650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f0      	bne.n	800163c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0320 	and.w	r3, r3, #32
 8001662:	2b00      	cmp	r3, #0
 8001664:	d036      	beq.n	80016d4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d019      	beq.n	80016a2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800166e:	4b26      	ldr	r3, [pc, #152]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a25      	ldr	r2, [pc, #148]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 8001674:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001678:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800167a:	f7ff f937 	bl	80008ec <HAL_GetTick>
 800167e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001682:	f7ff f933 	bl	80008ec <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e1b2      	b.n	80019fa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001694:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0f0      	beq.n	8001682 <HAL_RCC_OscConfig+0x49a>
 80016a0:	e018      	b.n	80016d4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016a2:	4b19      	ldr	r3, [pc, #100]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a18      	ldr	r2, [pc, #96]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 80016a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80016ae:	f7ff f91d 	bl	80008ec <HAL_GetTick>
 80016b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80016b6:	f7ff f919 	bl	80008ec <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e198      	b.n	80019fa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016c8:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <HAL_RCC_OscConfig+0x520>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f0      	bne.n	80016b6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f000 8085 	beq.w	80017ec <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <HAL_RCC_OscConfig+0x524>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a09      	ldr	r2, [pc, #36]	; (800170c <HAL_RCC_OscConfig+0x524>)
 80016e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80016ee:	f7ff f8fd 	bl	80008ec <HAL_GetTick>
 80016f2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016f4:	e00c      	b.n	8001710 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80016f6:	f7ff f8f9 	bl	80008ec <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b64      	cmp	r3, #100	; 0x64
 8001702:	d905      	bls.n	8001710 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e178      	b.n	80019fa <HAL_RCC_OscConfig+0x812>
 8001708:	58024400 	.word	0x58024400
 800170c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001710:	4b96      	ldr	r3, [pc, #600]	; (800196c <HAL_RCC_OscConfig+0x784>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0ec      	beq.n	80016f6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d106      	bne.n	8001732 <HAL_RCC_OscConfig+0x54a>
 8001724:	4b92      	ldr	r3, [pc, #584]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 8001726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001728:	4a91      	ldr	r2, [pc, #580]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	6713      	str	r3, [r2, #112]	; 0x70
 8001730:	e02d      	b.n	800178e <HAL_RCC_OscConfig+0x5a6>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10c      	bne.n	8001754 <HAL_RCC_OscConfig+0x56c>
 800173a:	4b8d      	ldr	r3, [pc, #564]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 800173c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173e:	4a8c      	ldr	r2, [pc, #560]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 8001740:	f023 0301 	bic.w	r3, r3, #1
 8001744:	6713      	str	r3, [r2, #112]	; 0x70
 8001746:	4b8a      	ldr	r3, [pc, #552]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 8001748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174a:	4a89      	ldr	r2, [pc, #548]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 800174c:	f023 0304 	bic.w	r3, r3, #4
 8001750:	6713      	str	r3, [r2, #112]	; 0x70
 8001752:	e01c      	b.n	800178e <HAL_RCC_OscConfig+0x5a6>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b05      	cmp	r3, #5
 800175a:	d10c      	bne.n	8001776 <HAL_RCC_OscConfig+0x58e>
 800175c:	4b84      	ldr	r3, [pc, #528]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 800175e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001760:	4a83      	ldr	r2, [pc, #524]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 8001762:	f043 0304 	orr.w	r3, r3, #4
 8001766:	6713      	str	r3, [r2, #112]	; 0x70
 8001768:	4b81      	ldr	r3, [pc, #516]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 800176a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176c:	4a80      	ldr	r2, [pc, #512]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	6713      	str	r3, [r2, #112]	; 0x70
 8001774:	e00b      	b.n	800178e <HAL_RCC_OscConfig+0x5a6>
 8001776:	4b7e      	ldr	r3, [pc, #504]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 8001778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177a:	4a7d      	ldr	r2, [pc, #500]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 800177c:	f023 0301 	bic.w	r3, r3, #1
 8001780:	6713      	str	r3, [r2, #112]	; 0x70
 8001782:	4b7b      	ldr	r3, [pc, #492]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 8001784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001786:	4a7a      	ldr	r2, [pc, #488]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 8001788:	f023 0304 	bic.w	r3, r3, #4
 800178c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d015      	beq.n	80017c2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001796:	f7ff f8a9 	bl	80008ec <HAL_GetTick>
 800179a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800179c:	e00a      	b.n	80017b4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800179e:	f7ff f8a5 	bl	80008ec <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e122      	b.n	80019fa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017b4:	4b6e      	ldr	r3, [pc, #440]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 80017b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0ee      	beq.n	800179e <HAL_RCC_OscConfig+0x5b6>
 80017c0:	e014      	b.n	80017ec <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c2:	f7ff f893 	bl	80008ec <HAL_GetTick>
 80017c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017c8:	e00a      	b.n	80017e0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ca:	f7ff f88f 	bl	80008ec <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d8:	4293      	cmp	r3, r2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e10c      	b.n	80019fa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017e0:	4b63      	ldr	r3, [pc, #396]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 80017e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1ee      	bne.n	80017ca <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f000 8101 	beq.w	80019f8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80017f6:	4b5e      	ldr	r3, [pc, #376]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017fe:	2b18      	cmp	r3, #24
 8001800:	f000 80bc 	beq.w	800197c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001808:	2b02      	cmp	r3, #2
 800180a:	f040 8095 	bne.w	8001938 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800180e:	4b58      	ldr	r3, [pc, #352]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a57      	ldr	r2, [pc, #348]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 8001814:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181a:	f7ff f867 	bl	80008ec <HAL_GetTick>
 800181e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001822:	f7ff f863 	bl	80008ec <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e0e2      	b.n	80019fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001834:	4b4e      	ldr	r3, [pc, #312]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1f0      	bne.n	8001822 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001840:	4b4b      	ldr	r3, [pc, #300]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 8001842:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001844:	4b4b      	ldr	r3, [pc, #300]	; (8001974 <HAL_RCC_OscConfig+0x78c>)
 8001846:	4013      	ands	r3, r2
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001850:	0112      	lsls	r2, r2, #4
 8001852:	430a      	orrs	r2, r1
 8001854:	4946      	ldr	r1, [pc, #280]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 8001856:	4313      	orrs	r3, r2
 8001858:	628b      	str	r3, [r1, #40]	; 0x28
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	3b01      	subs	r3, #1
 8001860:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001868:	3b01      	subs	r3, #1
 800186a:	025b      	lsls	r3, r3, #9
 800186c:	b29b      	uxth	r3, r3
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001874:	3b01      	subs	r3, #1
 8001876:	041b      	lsls	r3, r3, #16
 8001878:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800187c:	431a      	orrs	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001882:	3b01      	subs	r3, #1
 8001884:	061b      	lsls	r3, r3, #24
 8001886:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800188a:	4939      	ldr	r1, [pc, #228]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 800188c:	4313      	orrs	r3, r2
 800188e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001890:	4b37      	ldr	r3, [pc, #220]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 8001892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001894:	4a36      	ldr	r2, [pc, #216]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 8001896:	f023 0301 	bic.w	r3, r3, #1
 800189a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800189c:	4b34      	ldr	r3, [pc, #208]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 800189e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018a0:	4b35      	ldr	r3, [pc, #212]	; (8001978 <HAL_RCC_OscConfig+0x790>)
 80018a2:	4013      	ands	r3, r2
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018a8:	00d2      	lsls	r2, r2, #3
 80018aa:	4931      	ldr	r1, [pc, #196]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80018b0:	4b2f      	ldr	r3, [pc, #188]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 80018b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b4:	f023 020c 	bic.w	r2, r3, #12
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	492c      	ldr	r1, [pc, #176]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80018c2:	4b2b      	ldr	r3, [pc, #172]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 80018c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c6:	f023 0202 	bic.w	r2, r3, #2
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	4928      	ldr	r1, [pc, #160]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80018d4:	4b26      	ldr	r3, [pc, #152]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 80018d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d8:	4a25      	ldr	r2, [pc, #148]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 80018da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80018e0:	4b23      	ldr	r3, [pc, #140]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 80018e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e4:	4a22      	ldr	r2, [pc, #136]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 80018e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80018ec:	4b20      	ldr	r3, [pc, #128]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 80018ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f0:	4a1f      	ldr	r2, [pc, #124]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 80018f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80018f8:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 80018fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fc:	4a1c      	ldr	r2, [pc, #112]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001904:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a19      	ldr	r2, [pc, #100]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 800190a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800190e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001910:	f7fe ffec 	bl	80008ec <HAL_GetTick>
 8001914:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001918:	f7fe ffe8 	bl	80008ec <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e067      	b.n	80019fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800192a:	4b11      	ldr	r3, [pc, #68]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0x730>
 8001936:	e05f      	b.n	80019f8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001938:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0c      	ldr	r2, [pc, #48]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 800193e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7fe ffd2 	bl	80008ec <HAL_GetTick>
 8001948:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800194c:	f7fe ffce 	bl	80008ec <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e04d      	b.n	80019fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800195e:	4b04      	ldr	r3, [pc, #16]	; (8001970 <HAL_RCC_OscConfig+0x788>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x764>
 800196a:	e045      	b.n	80019f8 <HAL_RCC_OscConfig+0x810>
 800196c:	58024800 	.word	0x58024800
 8001970:	58024400 	.word	0x58024400
 8001974:	fffffc0c 	.word	0xfffffc0c
 8001978:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800197c:	4b21      	ldr	r3, [pc, #132]	; (8001a04 <HAL_RCC_OscConfig+0x81c>)
 800197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001980:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001982:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <HAL_RCC_OscConfig+0x81c>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	2b01      	cmp	r3, #1
 800198e:	d031      	beq.n	80019f4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	f003 0203 	and.w	r2, r3, #3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800199a:	429a      	cmp	r2, r3
 800199c:	d12a      	bne.n	80019f4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	091b      	lsrs	r3, r3, #4
 80019a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d122      	bne.n	80019f4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d11a      	bne.n	80019f4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	0a5b      	lsrs	r3, r3, #9
 80019c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ca:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d111      	bne.n	80019f4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	0c1b      	lsrs	r3, r3, #16
 80019d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019dc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019de:	429a      	cmp	r2, r3
 80019e0:	d108      	bne.n	80019f4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	0e1b      	lsrs	r3, r3, #24
 80019e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ee:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e000      	b.n	80019fa <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3730      	adds	r7, #48	; 0x30
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	58024400 	.word	0x58024400

08001a08 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e19c      	b.n	8001d56 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b8a      	ldr	r3, [pc, #552]	; (8001c48 <HAL_RCC_ClockConfig+0x240>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 030f 	and.w	r3, r3, #15
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d910      	bls.n	8001a4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	4b87      	ldr	r3, [pc, #540]	; (8001c48 <HAL_RCC_ClockConfig+0x240>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 020f 	bic.w	r2, r3, #15
 8001a32:	4985      	ldr	r1, [pc, #532]	; (8001c48 <HAL_RCC_ClockConfig+0x240>)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3a:	4b83      	ldr	r3, [pc, #524]	; (8001c48 <HAL_RCC_ClockConfig+0x240>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e184      	b.n	8001d56 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d010      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	4b7b      	ldr	r3, [pc, #492]	; (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d908      	bls.n	8001a7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a68:	4b78      	ldr	r3, [pc, #480]	; (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	4975      	ldr	r1, [pc, #468]	; (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d010      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695a      	ldr	r2, [r3, #20]
 8001a8a:	4b70      	ldr	r3, [pc, #448]	; (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d908      	bls.n	8001aa8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a96:	4b6d      	ldr	r3, [pc, #436]	; (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	496a      	ldr	r1, [pc, #424]	; (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0310 	and.w	r3, r3, #16
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d010      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699a      	ldr	r2, [r3, #24]
 8001ab8:	4b64      	ldr	r3, [pc, #400]	; (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001aba:	69db      	ldr	r3, [r3, #28]
 8001abc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d908      	bls.n	8001ad6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ac4:	4b61      	ldr	r3, [pc, #388]	; (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	495e      	ldr	r1, [pc, #376]	; (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0320 	and.w	r3, r3, #32
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d010      	beq.n	8001b04 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69da      	ldr	r2, [r3, #28]
 8001ae6:	4b59      	ldr	r3, [pc, #356]	; (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d908      	bls.n	8001b04 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001af2:	4b56      	ldr	r3, [pc, #344]	; (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	4953      	ldr	r1, [pc, #332]	; (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d010      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	4b4d      	ldr	r3, [pc, #308]	; (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f003 030f 	and.w	r3, r3, #15
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d908      	bls.n	8001b32 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b20:	4b4a      	ldr	r3, [pc, #296]	; (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f023 020f 	bic.w	r2, r3, #15
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	4947      	ldr	r1, [pc, #284]	; (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d055      	beq.n	8001bea <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001b3e:	4b43      	ldr	r3, [pc, #268]	; (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	4940      	ldr	r1, [pc, #256]	; (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d107      	bne.n	8001b68 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b58:	4b3c      	ldr	r3, [pc, #240]	; (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d121      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e0f6      	b.n	8001d56 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	d107      	bne.n	8001b80 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b70:	4b36      	ldr	r3, [pc, #216]	; (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d115      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e0ea      	b.n	8001d56 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d107      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b88:	4b30      	ldr	r3, [pc, #192]	; (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d109      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e0de      	b.n	8001d56 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b98:	4b2c      	ldr	r3, [pc, #176]	; (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0d6      	b.n	8001d56 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ba8:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	f023 0207 	bic.w	r2, r3, #7
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	4925      	ldr	r1, [pc, #148]	; (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bba:	f7fe fe97 	bl	80008ec <HAL_GetTick>
 8001bbe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc0:	e00a      	b.n	8001bd8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc2:	f7fe fe93 	bl	80008ec <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e0be      	b.n	8001d56 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd8:	4b1c      	ldr	r3, [pc, #112]	; (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d1eb      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d010      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d208      	bcs.n	8001c18 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c06:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	f023 020f 	bic.w	r2, r3, #15
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	490e      	ldr	r1, [pc, #56]	; (8001c4c <HAL_RCC_ClockConfig+0x244>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_RCC_ClockConfig+0x240>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 030f 	and.w	r3, r3, #15
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d214      	bcs.n	8001c50 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c26:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <HAL_RCC_ClockConfig+0x240>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f023 020f 	bic.w	r2, r3, #15
 8001c2e:	4906      	ldr	r1, [pc, #24]	; (8001c48 <HAL_RCC_ClockConfig+0x240>)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c36:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <HAL_RCC_ClockConfig+0x240>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d005      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e086      	b.n	8001d56 <HAL_RCC_ClockConfig+0x34e>
 8001c48:	52002000 	.word	0x52002000
 8001c4c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d010      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691a      	ldr	r2, [r3, #16]
 8001c60:	4b3f      	ldr	r3, [pc, #252]	; (8001d60 <HAL_RCC_ClockConfig+0x358>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d208      	bcs.n	8001c7e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c6c:	4b3c      	ldr	r3, [pc, #240]	; (8001d60 <HAL_RCC_ClockConfig+0x358>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	4939      	ldr	r1, [pc, #228]	; (8001d60 <HAL_RCC_ClockConfig+0x358>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d010      	beq.n	8001cac <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695a      	ldr	r2, [r3, #20]
 8001c8e:	4b34      	ldr	r3, [pc, #208]	; (8001d60 <HAL_RCC_ClockConfig+0x358>)
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d208      	bcs.n	8001cac <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c9a:	4b31      	ldr	r3, [pc, #196]	; (8001d60 <HAL_RCC_ClockConfig+0x358>)
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	492e      	ldr	r1, [pc, #184]	; (8001d60 <HAL_RCC_ClockConfig+0x358>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0310 	and.w	r3, r3, #16
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d010      	beq.n	8001cda <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	699a      	ldr	r2, [r3, #24]
 8001cbc:	4b28      	ldr	r3, [pc, #160]	; (8001d60 <HAL_RCC_ClockConfig+0x358>)
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d208      	bcs.n	8001cda <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001cc8:	4b25      	ldr	r3, [pc, #148]	; (8001d60 <HAL_RCC_ClockConfig+0x358>)
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	4922      	ldr	r1, [pc, #136]	; (8001d60 <HAL_RCC_ClockConfig+0x358>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0320 	and.w	r3, r3, #32
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d010      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69da      	ldr	r2, [r3, #28]
 8001cea:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <HAL_RCC_ClockConfig+0x358>)
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d208      	bcs.n	8001d08 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001cf6:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <HAL_RCC_ClockConfig+0x358>)
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	4917      	ldr	r1, [pc, #92]	; (8001d60 <HAL_RCC_ClockConfig+0x358>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d08:	f000 f834 	bl	8001d74 <HAL_RCC_GetSysClockFreq>
 8001d0c:	4601      	mov	r1, r0
 8001d0e:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <HAL_RCC_ClockConfig+0x358>)
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	0a1b      	lsrs	r3, r3, #8
 8001d14:	f003 030f 	and.w	r3, r3, #15
 8001d18:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <HAL_RCC_ClockConfig+0x35c>)
 8001d1a:	5cd3      	ldrb	r3, [r2, r3]
 8001d1c:	f003 031f 	and.w	r3, r3, #31
 8001d20:	fa21 f303 	lsr.w	r3, r1, r3
 8001d24:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d26:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <HAL_RCC_ClockConfig+0x358>)
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	4a0d      	ldr	r2, [pc, #52]	; (8001d64 <HAL_RCC_ClockConfig+0x35c>)
 8001d30:	5cd3      	ldrb	r3, [r2, r3]
 8001d32:	f003 031f 	and.w	r3, r3, #31
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3c:	4a0a      	ldr	r2, [pc, #40]	; (8001d68 <HAL_RCC_ClockConfig+0x360>)
 8001d3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d40:	4a0a      	ldr	r2, [pc, #40]	; (8001d6c <HAL_RCC_ClockConfig+0x364>)
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001d46:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <HAL_RCC_ClockConfig+0x368>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fd84 	bl	8000858 <HAL_InitTick>
 8001d50:	4603      	mov	r3, r0
 8001d52:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	58024400 	.word	0x58024400
 8001d64:	080023e8 	.word	0x080023e8
 8001d68:	24000004 	.word	0x24000004
 8001d6c:	24000000 	.word	0x24000000
 8001d70:	24000008 	.word	0x24000008

08001d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b089      	sub	sp, #36	; 0x24
 8001d78:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d7a:	4baf      	ldr	r3, [pc, #700]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d82:	2b18      	cmp	r3, #24
 8001d84:	f200 814e 	bhi.w	8002024 <HAL_RCC_GetSysClockFreq+0x2b0>
 8001d88:	a201      	add	r2, pc, #4	; (adr r2, 8001d90 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d8e:	bf00      	nop
 8001d90:	08001df5 	.word	0x08001df5
 8001d94:	08002025 	.word	0x08002025
 8001d98:	08002025 	.word	0x08002025
 8001d9c:	08002025 	.word	0x08002025
 8001da0:	08002025 	.word	0x08002025
 8001da4:	08002025 	.word	0x08002025
 8001da8:	08002025 	.word	0x08002025
 8001dac:	08002025 	.word	0x08002025
 8001db0:	08001e1b 	.word	0x08001e1b
 8001db4:	08002025 	.word	0x08002025
 8001db8:	08002025 	.word	0x08002025
 8001dbc:	08002025 	.word	0x08002025
 8001dc0:	08002025 	.word	0x08002025
 8001dc4:	08002025 	.word	0x08002025
 8001dc8:	08002025 	.word	0x08002025
 8001dcc:	08002025 	.word	0x08002025
 8001dd0:	08001e21 	.word	0x08001e21
 8001dd4:	08002025 	.word	0x08002025
 8001dd8:	08002025 	.word	0x08002025
 8001ddc:	08002025 	.word	0x08002025
 8001de0:	08002025 	.word	0x08002025
 8001de4:	08002025 	.word	0x08002025
 8001de8:	08002025 	.word	0x08002025
 8001dec:	08002025 	.word	0x08002025
 8001df0:	08001e27 	.word	0x08001e27
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001df4:	4b90      	ldr	r3, [pc, #576]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0320 	and.w	r3, r3, #32
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d009      	beq.n	8001e14 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001e00:	4b8d      	ldr	r3, [pc, #564]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	08db      	lsrs	r3, r3, #3
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	4a8c      	ldr	r2, [pc, #560]	; (800203c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e10:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001e12:	e10a      	b.n	800202a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001e14:	4b89      	ldr	r3, [pc, #548]	; (800203c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001e16:	61bb      	str	r3, [r7, #24]
    break;
 8001e18:	e107      	b.n	800202a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001e1a:	4b89      	ldr	r3, [pc, #548]	; (8002040 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001e1c:	61bb      	str	r3, [r7, #24]
    break;
 8001e1e:	e104      	b.n	800202a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001e20:	4b88      	ldr	r3, [pc, #544]	; (8002044 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8001e22:	61bb      	str	r3, [r7, #24]
    break;
 8001e24:	e101      	b.n	800202a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001e26:	4b84      	ldr	r3, [pc, #528]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001e30:	4b81      	ldr	r3, [pc, #516]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e34:	091b      	lsrs	r3, r3, #4
 8001e36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e3a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001e3c:	4b7e      	ldr	r3, [pc, #504]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001e46:	4b7c      	ldr	r3, [pc, #496]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e4a:	08db      	lsrs	r3, r3, #3
 8001e4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	fb02 f303 	mul.w	r3, r2, r3
 8001e56:	ee07 3a90 	vmov	s15, r3
 8001e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e5e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 80da 	beq.w	800201e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d05a      	beq.n	8001f26 <HAL_RCC_GetSysClockFreq+0x1b2>
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d302      	bcc.n	8001e7a <HAL_RCC_GetSysClockFreq+0x106>
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d078      	beq.n	8001f6a <HAL_RCC_GetSysClockFreq+0x1f6>
 8001e78:	e099      	b.n	8001fae <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e7a:	4b6f      	ldr	r3, [pc, #444]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0320 	and.w	r3, r3, #32
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d02d      	beq.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001e86:	4b6c      	ldr	r3, [pc, #432]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	08db      	lsrs	r3, r3, #3
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	4a6a      	ldr	r2, [pc, #424]	; (800203c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001e92:	fa22 f303 	lsr.w	r3, r2, r3
 8001e96:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	ee07 3a90 	vmov	s15, r3
 8001ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001eb0:	4b61      	ldr	r3, [pc, #388]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eb8:	ee07 3a90 	vmov	s15, r3
 8001ebc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ec0:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ec4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8002048 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001ec8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ecc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ed0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ed4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001edc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001ee0:	e087      	b.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	ee07 3a90 	vmov	s15, r3
 8001ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eec:	eddf 6a57 	vldr	s13, [pc, #348]	; 800204c <HAL_RCC_GetSysClockFreq+0x2d8>
 8001ef0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ef4:	4b50      	ldr	r3, [pc, #320]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001efc:	ee07 3a90 	vmov	s15, r3
 8001f00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f04:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f08:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002048 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001f0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f24:	e065      	b.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	ee07 3a90 	vmov	s15, r3
 8001f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f30:	eddf 6a47 	vldr	s13, [pc, #284]	; 8002050 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001f34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f38:	4b3f      	ldr	r3, [pc, #252]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f40:	ee07 3a90 	vmov	s15, r3
 8001f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f48:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f4c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002048 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001f50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f68:	e043      	b.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	ee07 3a90 	vmov	s15, r3
 8001f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f74:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002054 <HAL_RCC_GetSysClockFreq+0x2e0>
 8001f78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f7c:	4b2e      	ldr	r3, [pc, #184]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f84:	ee07 3a90 	vmov	s15, r3
 8001f88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f8c:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f90:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002048 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001f94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001fac:	e021      	b.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	ee07 3a90 	vmov	s15, r3
 8001fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fb8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002050 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001fbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fc0:	4b1d      	ldr	r3, [pc, #116]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fc8:	ee07 3a90 	vmov	s15, r3
 8001fcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fd0:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fd4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002048 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001fd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fe0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fe4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001ff0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001ff2:	4b11      	ldr	r3, [pc, #68]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	0a5b      	lsrs	r3, r3, #9
 8001ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	ee07 3a90 	vmov	s15, r3
 8002006:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800200a:	edd7 6a07 	vldr	s13, [r7, #28]
 800200e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002016:	ee17 3a90 	vmov	r3, s15
 800201a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800201c:	e005      	b.n	800202a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800201e:	2300      	movs	r3, #0
 8002020:	61bb      	str	r3, [r7, #24]
    break;
 8002022:	e002      	b.n	800202a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8002024:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002026:	61bb      	str	r3, [r7, #24]
    break;
 8002028:	bf00      	nop
  }

  return sysclockfreq;
 800202a:	69bb      	ldr	r3, [r7, #24]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3724      	adds	r7, #36	; 0x24
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	58024400 	.word	0x58024400
 800203c:	03d09000 	.word	0x03d09000
 8002040:	003d0900 	.word	0x003d0900
 8002044:	017d7840 	.word	0x017d7840
 8002048:	46000000 	.word	0x46000000
 800204c:	4c742400 	.word	0x4c742400
 8002050:	4a742400 	.word	0x4a742400
 8002054:	4bbebc20 	.word	0x4bbebc20

08002058 <__errno>:
 8002058:	4b01      	ldr	r3, [pc, #4]	; (8002060 <__errno+0x8>)
 800205a:	6818      	ldr	r0, [r3, #0]
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	24000010 	.word	0x24000010

08002064 <__libc_init_array>:
 8002064:	b570      	push	{r4, r5, r6, lr}
 8002066:	4e0d      	ldr	r6, [pc, #52]	; (800209c <__libc_init_array+0x38>)
 8002068:	4c0d      	ldr	r4, [pc, #52]	; (80020a0 <__libc_init_array+0x3c>)
 800206a:	1ba4      	subs	r4, r4, r6
 800206c:	10a4      	asrs	r4, r4, #2
 800206e:	2500      	movs	r5, #0
 8002070:	42a5      	cmp	r5, r4
 8002072:	d109      	bne.n	8002088 <__libc_init_array+0x24>
 8002074:	4e0b      	ldr	r6, [pc, #44]	; (80020a4 <__libc_init_array+0x40>)
 8002076:	4c0c      	ldr	r4, [pc, #48]	; (80020a8 <__libc_init_array+0x44>)
 8002078:	f000 f9a8 	bl	80023cc <_init>
 800207c:	1ba4      	subs	r4, r4, r6
 800207e:	10a4      	asrs	r4, r4, #2
 8002080:	2500      	movs	r5, #0
 8002082:	42a5      	cmp	r5, r4
 8002084:	d105      	bne.n	8002092 <__libc_init_array+0x2e>
 8002086:	bd70      	pop	{r4, r5, r6, pc}
 8002088:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800208c:	4798      	blx	r3
 800208e:	3501      	adds	r5, #1
 8002090:	e7ee      	b.n	8002070 <__libc_init_array+0xc>
 8002092:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002096:	4798      	blx	r3
 8002098:	3501      	adds	r5, #1
 800209a:	e7f2      	b.n	8002082 <__libc_init_array+0x1e>
 800209c:	08002430 	.word	0x08002430
 80020a0:	08002430 	.word	0x08002430
 80020a4:	08002430 	.word	0x08002430
 80020a8:	08002434 	.word	0x08002434

080020ac <memset>:
 80020ac:	4402      	add	r2, r0
 80020ae:	4603      	mov	r3, r0
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d100      	bne.n	80020b6 <memset+0xa>
 80020b4:	4770      	bx	lr
 80020b6:	f803 1b01 	strb.w	r1, [r3], #1
 80020ba:	e7f9      	b.n	80020b0 <memset+0x4>
 80020bc:	0000      	movs	r0, r0
	...

080020c0 <exp>:
 80020c0:	b510      	push	{r4, lr}
 80020c2:	ed2d 8b04 	vpush	{d8-d9}
 80020c6:	eeb0 8b40 	vmov.f64	d8, d0
 80020ca:	4c33      	ldr	r4, [pc, #204]	; (8002198 <exp+0xd8>)
 80020cc:	b08a      	sub	sp, #40	; 0x28
 80020ce:	f000 f86b 	bl	80021a8 <__ieee754_exp>
 80020d2:	f994 3000 	ldrsb.w	r3, [r4]
 80020d6:	eeb0 9b40 	vmov.f64	d9, d0
 80020da:	3301      	adds	r3, #1
 80020dc:	d029      	beq.n	8002132 <exp+0x72>
 80020de:	eeb0 0b48 	vmov.f64	d0, d8
 80020e2:	f000 f969 	bl	80023b8 <finite>
 80020e6:	b320      	cbz	r0, 8002132 <exp+0x72>
 80020e8:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8002188 <exp+0xc8>
 80020ec:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80020f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f4:	dd2e      	ble.n	8002154 <exp+0x94>
 80020f6:	2303      	movs	r3, #3
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	4b28      	ldr	r3, [pc, #160]	; (800219c <exp+0xdc>)
 80020fc:	9301      	str	r3, [sp, #4]
 80020fe:	2300      	movs	r3, #0
 8002100:	9308      	str	r3, [sp, #32]
 8002102:	f994 3000 	ldrsb.w	r3, [r4]
 8002106:	ed8d 8b04 	vstr	d8, [sp, #16]
 800210a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800210e:	b9b3      	cbnz	r3, 800213e <exp+0x7e>
 8002110:	4b23      	ldr	r3, [pc, #140]	; (80021a0 <exp+0xe0>)
 8002112:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002116:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800211a:	4668      	mov	r0, sp
 800211c:	f000 f954 	bl	80023c8 <matherr>
 8002120:	b198      	cbz	r0, 800214a <exp+0x8a>
 8002122:	9b08      	ldr	r3, [sp, #32]
 8002124:	b11b      	cbz	r3, 800212e <exp+0x6e>
 8002126:	f7ff ff97 	bl	8002058 <__errno>
 800212a:	9b08      	ldr	r3, [sp, #32]
 800212c:	6003      	str	r3, [r0, #0]
 800212e:	ed9d 9b06 	vldr	d9, [sp, #24]
 8002132:	eeb0 0b49 	vmov.f64	d0, d9
 8002136:	b00a      	add	sp, #40	; 0x28
 8002138:	ecbd 8b04 	vpop	{d8-d9}
 800213c:	bd10      	pop	{r4, pc}
 800213e:	4919      	ldr	r1, [pc, #100]	; (80021a4 <exp+0xe4>)
 8002140:	2000      	movs	r0, #0
 8002142:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d1e7      	bne.n	800211a <exp+0x5a>
 800214a:	f7ff ff85 	bl	8002058 <__errno>
 800214e:	2322      	movs	r3, #34	; 0x22
 8002150:	6003      	str	r3, [r0, #0]
 8002152:	e7e6      	b.n	8002122 <exp+0x62>
 8002154:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8002190 <exp+0xd0>
 8002158:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800215c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002160:	d5e7      	bpl.n	8002132 <exp+0x72>
 8002162:	2304      	movs	r3, #4
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	4b0d      	ldr	r3, [pc, #52]	; (800219c <exp+0xdc>)
 8002168:	9301      	str	r3, [sp, #4]
 800216a:	2300      	movs	r3, #0
 800216c:	9308      	str	r3, [sp, #32]
 800216e:	2200      	movs	r2, #0
 8002170:	2300      	movs	r3, #0
 8002172:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002176:	ed8d 8b04 	vstr	d8, [sp, #16]
 800217a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800217e:	f994 3000 	ldrsb.w	r3, [r4]
 8002182:	e7e0      	b.n	8002146 <exp+0x86>
 8002184:	f3af 8000 	nop.w
 8002188:	fefa39ef 	.word	0xfefa39ef
 800218c:	40862e42 	.word	0x40862e42
 8002190:	d52d3051 	.word	0xd52d3051
 8002194:	c0874910 	.word	0xc0874910
 8002198:	24000074 	.word	0x24000074
 800219c:	080023f8 	.word	0x080023f8
 80021a0:	47efffff 	.word	0x47efffff
 80021a4:	7ff00000 	.word	0x7ff00000

080021a8 <__ieee754_exp>:
 80021a8:	ee10 1a90 	vmov	r1, s1
 80021ac:	4b7a      	ldr	r3, [pc, #488]	; (8002398 <__ieee754_exp+0x1f0>)
 80021ae:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80021b2:	429a      	cmp	r2, r3
 80021b4:	b082      	sub	sp, #8
 80021b6:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 80021ba:	d928      	bls.n	800220e <__ieee754_exp+0x66>
 80021bc:	4b77      	ldr	r3, [pc, #476]	; (800239c <__ieee754_exp+0x1f4>)
 80021be:	429a      	cmp	r2, r3
 80021c0:	d90f      	bls.n	80021e2 <__ieee754_exp+0x3a>
 80021c2:	ee10 3a10 	vmov	r3, s0
 80021c6:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80021ca:	430b      	orrs	r3, r1
 80021cc:	d003      	beq.n	80021d6 <__ieee754_exp+0x2e>
 80021ce:	ee30 0b00 	vadd.f64	d0, d0, d0
 80021d2:	b002      	add	sp, #8
 80021d4:	4770      	bx	lr
 80021d6:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8002330 <__ieee754_exp+0x188>
 80021da:	2800      	cmp	r0, #0
 80021dc:	fe00 0b07 	vseleq.f64	d0, d0, d7
 80021e0:	e7f7      	b.n	80021d2 <__ieee754_exp+0x2a>
 80021e2:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8002338 <__ieee754_exp+0x190>
 80021e6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80021ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ee:	dd04      	ble.n	80021fa <__ieee754_exp+0x52>
 80021f0:	ed9f 0b53 	vldr	d0, [pc, #332]	; 8002340 <__ieee754_exp+0x198>
 80021f4:	ee20 0b00 	vmul.f64	d0, d0, d0
 80021f8:	e7eb      	b.n	80021d2 <__ieee754_exp+0x2a>
 80021fa:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8002348 <__ieee754_exp+0x1a0>
 80021fe:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8002202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002206:	d505      	bpl.n	8002214 <__ieee754_exp+0x6c>
 8002208:	ed9f 0b49 	vldr	d0, [pc, #292]	; 8002330 <__ieee754_exp+0x188>
 800220c:	e7e1      	b.n	80021d2 <__ieee754_exp+0x2a>
 800220e:	4b64      	ldr	r3, [pc, #400]	; (80023a0 <__ieee754_exp+0x1f8>)
 8002210:	429a      	cmp	r2, r3
 8002212:	d956      	bls.n	80022c2 <__ieee754_exp+0x11a>
 8002214:	4b63      	ldr	r3, [pc, #396]	; (80023a4 <__ieee754_exp+0x1fc>)
 8002216:	429a      	cmp	r2, r3
 8002218:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800221c:	d838      	bhi.n	8002290 <__ieee754_exp+0xe8>
 800221e:	4b62      	ldr	r3, [pc, #392]	; (80023a8 <__ieee754_exp+0x200>)
 8002220:	4413      	add	r3, r2
 8002222:	ed93 6b00 	vldr	d6, [r3]
 8002226:	4b61      	ldr	r3, [pc, #388]	; (80023ac <__ieee754_exp+0x204>)
 8002228:	ee30 6b46 	vsub.f64	d6, d0, d6
 800222c:	4413      	add	r3, r2
 800222e:	ed93 7b00 	vldr	d7, [r3]
 8002232:	f1c0 0301 	rsb	r3, r0, #1
 8002236:	1a1b      	subs	r3, r3, r0
 8002238:	ee36 0b47 	vsub.f64	d0, d6, d7
 800223c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 8002350 <__ieee754_exp+0x1a8>
 8002240:	ee20 5b00 	vmul.f64	d5, d0, d0
 8002244:	ed9f 3b44 	vldr	d3, [pc, #272]	; 8002358 <__ieee754_exp+0x1b0>
 8002248:	eea5 3b04 	vfma.f64	d3, d5, d4
 800224c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 8002360 <__ieee754_exp+0x1b8>
 8002250:	eea3 4b05 	vfma.f64	d4, d3, d5
 8002254:	ed9f 3b44 	vldr	d3, [pc, #272]	; 8002368 <__ieee754_exp+0x1c0>
 8002258:	eea4 3b05 	vfma.f64	d3, d4, d5
 800225c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 8002370 <__ieee754_exp+0x1c8>
 8002260:	eea3 4b05 	vfma.f64	d4, d3, d5
 8002264:	eeb0 3b40 	vmov.f64	d3, d0
 8002268:	eea4 3b45 	vfms.f64	d3, d4, d5
 800226c:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8002270:	eeb0 5b43 	vmov.f64	d5, d3
 8002274:	ee20 2b03 	vmul.f64	d2, d0, d3
 8002278:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 800227c:	bba3      	cbnz	r3, 80022e8 <__ieee754_exp+0x140>
 800227e:	ee35 5b44 	vsub.f64	d5, d5, d4
 8002282:	ee82 7b05 	vdiv.f64	d7, d2, d5
 8002286:	ee37 0b40 	vsub.f64	d0, d7, d0
 800228a:	ee33 0b40 	vsub.f64	d0, d3, d0
 800228e:	e7a0      	b.n	80021d2 <__ieee754_exp+0x2a>
 8002290:	4b47      	ldr	r3, [pc, #284]	; (80023b0 <__ieee754_exp+0x208>)
 8002292:	4413      	add	r3, r2
 8002294:	ed93 7b00 	vldr	d7, [r3]
 8002298:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8002378 <__ieee754_exp+0x1d0>
 800229c:	ed9f 5b38 	vldr	d5, [pc, #224]	; 8002380 <__ieee754_exp+0x1d8>
 80022a0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80022a4:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8002388 <__ieee754_exp+0x1e0>
 80022a8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80022ac:	ee17 3a90 	vmov	r3, s15
 80022b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80022b4:	eea7 0b46 	vfms.f64	d0, d7, d6
 80022b8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80022bc:	eeb0 6b40 	vmov.f64	d6, d0
 80022c0:	e7ba      	b.n	8002238 <__ieee754_exp+0x90>
 80022c2:	4b3c      	ldr	r3, [pc, #240]	; (80023b4 <__ieee754_exp+0x20c>)
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d80d      	bhi.n	80022e4 <__ieee754_exp+0x13c>
 80022c8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80022cc:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8002340 <__ieee754_exp+0x198>
 80022d0:	ee30 5b05 	vadd.f64	d5, d0, d5
 80022d4:	eeb4 5bc4 	vcmpe.f64	d5, d4
 80022d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022dc:	dd02      	ble.n	80022e4 <__ieee754_exp+0x13c>
 80022de:	ee30 0b04 	vadd.f64	d0, d0, d4
 80022e2:	e776      	b.n	80021d2 <__ieee754_exp+0x2a>
 80022e4:	2300      	movs	r3, #0
 80022e6:	e7a9      	b.n	800223c <__ieee754_exp+0x94>
 80022e8:	f46f 717f 	mvn.w	r1, #1020	; 0x3fc
 80022ec:	ee34 5b45 	vsub.f64	d5, d4, d5
 80022f0:	428b      	cmp	r3, r1
 80022f2:	ee82 4b05 	vdiv.f64	d4, d2, d5
 80022f6:	ee37 7b44 	vsub.f64	d7, d7, d4
 80022fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80022fe:	ee33 7b47 	vsub.f64	d7, d3, d7
 8002302:	ed8d 7b00 	vstr	d7, [sp]
 8002306:	9a01      	ldr	r2, [sp, #4]
 8002308:	e9dd 0100 	ldrd	r0, r1, [sp]
 800230c:	db04      	blt.n	8002318 <__ieee754_exp+0x170>
 800230e:	eb02 5103 	add.w	r1, r2, r3, lsl #20
 8002312:	ec41 0b10 	vmov	d0, r0, r1
 8002316:	e75c      	b.n	80021d2 <__ieee754_exp+0x2a>
 8002318:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800231c:	eb02 5103 	add.w	r1, r2, r3, lsl #20
 8002320:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8002390 <__ieee754_exp+0x1e8>
 8002324:	ec41 0b10 	vmov	d0, r0, r1
 8002328:	ee20 0b07 	vmul.f64	d0, d0, d7
 800232c:	e751      	b.n	80021d2 <__ieee754_exp+0x2a>
 800232e:	bf00      	nop
	...
 8002338:	fefa39ef 	.word	0xfefa39ef
 800233c:	40862e42 	.word	0x40862e42
 8002340:	8800759c 	.word	0x8800759c
 8002344:	7e37e43c 	.word	0x7e37e43c
 8002348:	d52d3051 	.word	0xd52d3051
 800234c:	c0874910 	.word	0xc0874910
 8002350:	72bea4d0 	.word	0x72bea4d0
 8002354:	3e663769 	.word	0x3e663769
 8002358:	c5d26bf1 	.word	0xc5d26bf1
 800235c:	bebbbd41 	.word	0xbebbbd41
 8002360:	af25de2c 	.word	0xaf25de2c
 8002364:	3f11566a 	.word	0x3f11566a
 8002368:	16bebd93 	.word	0x16bebd93
 800236c:	bf66c16c 	.word	0xbf66c16c
 8002370:	5555553e 	.word	0x5555553e
 8002374:	3fc55555 	.word	0x3fc55555
 8002378:	652b82fe 	.word	0x652b82fe
 800237c:	3ff71547 	.word	0x3ff71547
 8002380:	35793c76 	.word	0x35793c76
 8002384:	3dea39ef 	.word	0x3dea39ef
 8002388:	fee00000 	.word	0xfee00000
 800238c:	3fe62e42 	.word	0x3fe62e42
 8002390:	00000000 	.word	0x00000000
 8002394:	01700000 	.word	0x01700000
 8002398:	40862e41 	.word	0x40862e41
 800239c:	7fefffff 	.word	0x7fefffff
 80023a0:	3fd62e42 	.word	0x3fd62e42
 80023a4:	3ff0a2b1 	.word	0x3ff0a2b1
 80023a8:	08002410 	.word	0x08002410
 80023ac:	08002420 	.word	0x08002420
 80023b0:	08002400 	.word	0x08002400
 80023b4:	3e2fffff 	.word	0x3e2fffff

080023b8 <finite>:
 80023b8:	ee10 3a90 	vmov	r3, s1
 80023bc:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80023c0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80023c4:	0fc0      	lsrs	r0, r0, #31
 80023c6:	4770      	bx	lr

080023c8 <matherr>:
 80023c8:	2000      	movs	r0, #0
 80023ca:	4770      	bx	lr

080023cc <_init>:
 80023cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ce:	bf00      	nop
 80023d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023d2:	bc08      	pop	{r3}
 80023d4:	469e      	mov	lr, r3
 80023d6:	4770      	bx	lr

080023d8 <_fini>:
 80023d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023da:	bf00      	nop
 80023dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023de:	bc08      	pop	{r3}
 80023e0:	469e      	mov	lr, r3
 80023e2:	4770      	bx	lr
