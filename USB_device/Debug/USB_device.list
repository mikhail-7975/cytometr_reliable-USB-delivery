
USB_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08006804  08006804  00016804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006870  08006870  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08006870  08006870  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006870  08006870  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006870  08006870  00016870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006874  08006874  00016874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08006878  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000900  2000017c  080069f4  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a7c  080069f4  00020a7c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd10  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002766  00000000  00000000  0002feb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a18  00000000  00000000  00032620  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008e0  00000000  00000000  00033038  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001935e  00000000  00000000  00033918  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b650  00000000  00000000  0004cc76  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008442e  00000000  00000000  000582c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dc6f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026b8  00000000  00000000  000dc770  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	080067ec 	.word	0x080067ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	080067ec 	.word	0x080067ec

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f932 	bl	80003b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f805 	bl	8000162 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f85e 	bl	8000218 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015c:	f005 fea0 	bl	8005ea0 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000160:	e7fe      	b.n	8000160 <main+0x14>

08000162 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000162:	b580      	push	{r7, lr}
 8000164:	b094      	sub	sp, #80	; 0x50
 8000166:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000168:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800016c:	2228      	movs	r2, #40	; 0x28
 800016e:	2100      	movs	r1, #0
 8000170:	4618      	mov	r0, r3
 8000172:	f006 fb33 	bl	80067dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000176:	f107 0314 	add.w	r3, r7, #20
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
 800017e:	605a      	str	r2, [r3, #4]
 8000180:	609a      	str	r2, [r3, #8]
 8000182:	60da      	str	r2, [r3, #12]
 8000184:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000186:	1d3b      	adds	r3, r7, #4
 8000188:	2200      	movs	r2, #0
 800018a:	601a      	str	r2, [r3, #0]
 800018c:	605a      	str	r2, [r3, #4]
 800018e:	609a      	str	r2, [r3, #8]
 8000190:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000192:	2301      	movs	r3, #1
 8000194:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000196:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800019a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800019c:	2300      	movs	r3, #0
 800019e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a0:	2301      	movs	r3, #1
 80001a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a4:	2302      	movs	r3, #2
 80001a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80001ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80001b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001b8:	4618      	mov	r0, r3
 80001ba:	f001 fdef 	bl	8001d9c <HAL_RCC_OscConfig>
 80001be:	4603      	mov	r3, r0
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d001      	beq.n	80001c8 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001c4:	f000 f860 	bl	8000288 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001c8:	230f      	movs	r3, #15
 80001ca:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001cc:	2302      	movs	r3, #2
 80001ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d0:	2300      	movs	r3, #0
 80001d2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001d8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001da:	2300      	movs	r3, #0
 80001dc:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80001de:	f107 0314 	add.w	r3, r7, #20
 80001e2:	2101      	movs	r1, #1
 80001e4:	4618      	mov	r0, r3
 80001e6:	f002 f859 	bl	800229c <HAL_RCC_ClockConfig>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d001      	beq.n	80001f4 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80001f0:	f000 f84a 	bl	8000288 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80001f4:	2310      	movs	r3, #16
 80001f6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80001f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80001fc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001fe:	1d3b      	adds	r3, r7, #4
 8000200:	4618      	mov	r0, r3
 8000202:	f002 f9b5 	bl	8002570 <HAL_RCCEx_PeriphCLKConfig>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d001      	beq.n	8000210 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800020c:	f000 f83c 	bl	8000288 <Error_Handler>
  }
}
 8000210:	bf00      	nop
 8000212:	3750      	adds	r7, #80	; 0x50
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}

08000218 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800021e:	4b14      	ldr	r3, [pc, #80]	; (8000270 <MX_GPIO_Init+0x58>)
 8000220:	699b      	ldr	r3, [r3, #24]
 8000222:	4a13      	ldr	r2, [pc, #76]	; (8000270 <MX_GPIO_Init+0x58>)
 8000224:	f043 0310 	orr.w	r3, r3, #16
 8000228:	6193      	str	r3, [r2, #24]
 800022a:	4b11      	ldr	r3, [pc, #68]	; (8000270 <MX_GPIO_Init+0x58>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	f003 0310 	and.w	r3, r3, #16
 8000232:	60fb      	str	r3, [r7, #12]
 8000234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000236:	4b0e      	ldr	r3, [pc, #56]	; (8000270 <MX_GPIO_Init+0x58>)
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	4a0d      	ldr	r2, [pc, #52]	; (8000270 <MX_GPIO_Init+0x58>)
 800023c:	f043 0320 	orr.w	r3, r3, #32
 8000240:	6193      	str	r3, [r2, #24]
 8000242:	4b0b      	ldr	r3, [pc, #44]	; (8000270 <MX_GPIO_Init+0x58>)
 8000244:	699b      	ldr	r3, [r3, #24]
 8000246:	f003 0320 	and.w	r3, r3, #32
 800024a:	60bb      	str	r3, [r7, #8]
 800024c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800024e:	4b08      	ldr	r3, [pc, #32]	; (8000270 <MX_GPIO_Init+0x58>)
 8000250:	699b      	ldr	r3, [r3, #24]
 8000252:	4a07      	ldr	r2, [pc, #28]	; (8000270 <MX_GPIO_Init+0x58>)
 8000254:	f043 0304 	orr.w	r3, r3, #4
 8000258:	6193      	str	r3, [r2, #24]
 800025a:	4b05      	ldr	r3, [pc, #20]	; (8000270 <MX_GPIO_Init+0x58>)
 800025c:	699b      	ldr	r3, [r3, #24]
 800025e:	f003 0304 	and.w	r3, r3, #4
 8000262:	607b      	str	r3, [r7, #4]
 8000264:	687b      	ldr	r3, [r7, #4]

}
 8000266:	bf00      	nop
 8000268:	3714      	adds	r7, #20
 800026a:	46bd      	mov	sp, r7
 800026c:	bc80      	pop	{r7}
 800026e:	4770      	bx	lr
 8000270:	40021000 	.word	0x40021000

08000274 <CDC_Recive_Callback>:

/* USER CODE BEGIN 4 */
void CDC_Recive_Callback(uint8_t* Buf, uint16_t* len) {
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	6039      	str	r1, [r7, #0]

}
 800027e:	bf00      	nop
 8000280:	370c      	adds	r7, #12
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr

08000288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800028c:	bf00      	nop
 800028e:	46bd      	mov	sp, r7
 8000290:	bc80      	pop	{r7}
 8000292:	4770      	bx	lr

08000294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800029a:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <HAL_MspInit+0x5c>)
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	4a14      	ldr	r2, [pc, #80]	; (80002f0 <HAL_MspInit+0x5c>)
 80002a0:	f043 0301 	orr.w	r3, r3, #1
 80002a4:	6193      	str	r3, [r2, #24]
 80002a6:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <HAL_MspInit+0x5c>)
 80002a8:	699b      	ldr	r3, [r3, #24]
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	60bb      	str	r3, [r7, #8]
 80002b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002b2:	4b0f      	ldr	r3, [pc, #60]	; (80002f0 <HAL_MspInit+0x5c>)
 80002b4:	69db      	ldr	r3, [r3, #28]
 80002b6:	4a0e      	ldr	r2, [pc, #56]	; (80002f0 <HAL_MspInit+0x5c>)
 80002b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002bc:	61d3      	str	r3, [r2, #28]
 80002be:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <HAL_MspInit+0x5c>)
 80002c0:	69db      	ldr	r3, [r3, #28]
 80002c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002c6:	607b      	str	r3, [r7, #4]
 80002c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80002ca:	4b0a      	ldr	r3, [pc, #40]	; (80002f4 <HAL_MspInit+0x60>)
 80002cc:	685b      	ldr	r3, [r3, #4]
 80002ce:	60fb      	str	r3, [r7, #12]
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80002d6:	60fb      	str	r3, [r7, #12]
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002de:	60fb      	str	r3, [r7, #12]
 80002e0:	4a04      	ldr	r2, [pc, #16]	; (80002f4 <HAL_MspInit+0x60>)
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002e6:	bf00      	nop
 80002e8:	3714      	adds	r7, #20
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr
 80002f0:	40021000 	.word	0x40021000
 80002f4:	40010000 	.word	0x40010000

080002f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr

08000304 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000308:	e7fe      	b.n	8000308 <HardFault_Handler+0x4>

0800030a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800030a:	b480      	push	{r7}
 800030c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800030e:	e7fe      	b.n	800030e <MemManage_Handler+0x4>

08000310 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000314:	e7fe      	b.n	8000314 <BusFault_Handler+0x4>

08000316 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000316:	b480      	push	{r7}
 8000318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800031a:	e7fe      	b.n	800031a <UsageFault_Handler+0x4>

0800031c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	bc80      	pop	{r7}
 8000326:	4770      	bx	lr

08000328 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800032c:	bf00      	nop
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr

08000334 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	bc80      	pop	{r7}
 800033e:	4770      	bx	lr

08000340 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000344:	f000 f87e 	bl	8000444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000348:	bf00      	nop
 800034a:	bd80      	pop	{r7, pc}

0800034c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000350:	4802      	ldr	r0, [pc, #8]	; (800035c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000352:	f000 fad1 	bl	80008f8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	20000790 	.word	0x20000790

08000360 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr

0800036c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800036c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800036e:	e003      	b.n	8000378 <LoopCopyDataInit>

08000370 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000370:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000372:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000374:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000376:	3104      	adds	r1, #4

08000378 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000378:	480a      	ldr	r0, [pc, #40]	; (80003a4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800037a:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800037c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800037e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000380:	d3f6      	bcc.n	8000370 <CopyDataInit>
  ldr r2, =_sbss
 8000382:	4a0a      	ldr	r2, [pc, #40]	; (80003ac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000384:	e002      	b.n	800038c <LoopFillZerobss>

08000386 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000386:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000388:	f842 3b04 	str.w	r3, [r2], #4

0800038c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800038c:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800038e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000390:	d3f9      	bcc.n	8000386 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000392:	f7ff ffe5 	bl	8000360 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000396:	f006 f9fd 	bl	8006794 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800039a:	f7ff fed7 	bl	800014c <main>
  bx lr
 800039e:	4770      	bx	lr
  ldr r3, =_sidata
 80003a0:	08006878 	.word	0x08006878
  ldr r0, =_sdata
 80003a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80003a8:	2000017c 	.word	0x2000017c
  ldr r2, =_sbss
 80003ac:	2000017c 	.word	0x2000017c
  ldr r3, = _ebss
 80003b0:	20000a7c 	.word	0x20000a7c

080003b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b4:	e7fe      	b.n	80003b4 <ADC1_2_IRQHandler>
	...

080003b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003bc:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <HAL_Init+0x28>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a07      	ldr	r2, [pc, #28]	; (80003e0 <HAL_Init+0x28>)
 80003c2:	f043 0310 	orr.w	r3, r3, #16
 80003c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003c8:	2003      	movs	r0, #3
 80003ca:	f000 f923 	bl	8000614 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80003ce:	2000      	movs	r0, #0
 80003d0:	f000 f808 	bl	80003e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80003d4:	f7ff ff5e 	bl	8000294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80003d8:	2300      	movs	r3, #0
}
 80003da:	4618      	mov	r0, r3
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40022000 	.word	0x40022000

080003e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003ec:	4b12      	ldr	r3, [pc, #72]	; (8000438 <HAL_InitTick+0x54>)
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	4b12      	ldr	r3, [pc, #72]	; (800043c <HAL_InitTick+0x58>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	4619      	mov	r1, r3
 80003f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80003fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000402:	4618      	mov	r0, r3
 8000404:	f000 f93b 	bl	800067e <HAL_SYSTICK_Config>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800040e:	2301      	movs	r3, #1
 8000410:	e00e      	b.n	8000430 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	2b0f      	cmp	r3, #15
 8000416:	d80a      	bhi.n	800042e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000418:	2200      	movs	r2, #0
 800041a:	6879      	ldr	r1, [r7, #4]
 800041c:	f04f 30ff 	mov.w	r0, #4294967295
 8000420:	f000 f903 	bl	800062a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000424:	4a06      	ldr	r2, [pc, #24]	; (8000440 <HAL_InitTick+0x5c>)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800042a:	2300      	movs	r3, #0
 800042c:	e000      	b.n	8000430 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800042e:	2301      	movs	r3, #1
}
 8000430:	4618      	mov	r0, r3
 8000432:	3708      	adds	r7, #8
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	20000000 	.word	0x20000000
 800043c:	20000008 	.word	0x20000008
 8000440:	20000004 	.word	0x20000004

08000444 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000448:	4b05      	ldr	r3, [pc, #20]	; (8000460 <HAL_IncTick+0x1c>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	461a      	mov	r2, r3
 800044e:	4b05      	ldr	r3, [pc, #20]	; (8000464 <HAL_IncTick+0x20>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4413      	add	r3, r2
 8000454:	4a03      	ldr	r2, [pc, #12]	; (8000464 <HAL_IncTick+0x20>)
 8000456:	6013      	str	r3, [r2, #0]
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr
 8000460:	20000008 	.word	0x20000008
 8000464:	200003bc 	.word	0x200003bc

08000468 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  return uwTick;
 800046c:	4b02      	ldr	r3, [pc, #8]	; (8000478 <HAL_GetTick+0x10>)
 800046e:	681b      	ldr	r3, [r3, #0]
}
 8000470:	4618      	mov	r0, r3
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	200003bc 	.word	0x200003bc

0800047c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	f003 0307 	and.w	r3, r3, #7
 800048a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800048c:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <__NVIC_SetPriorityGrouping+0x44>)
 800048e:	68db      	ldr	r3, [r3, #12]
 8000490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000492:	68ba      	ldr	r2, [r7, #8]
 8000494:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000498:	4013      	ands	r3, r2
 800049a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004a0:	68bb      	ldr	r3, [r7, #8]
 80004a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80004a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80004a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80004ae:	4a04      	ldr	r2, [pc, #16]	; (80004c0 <__NVIC_SetPriorityGrouping+0x44>)
 80004b0:	68bb      	ldr	r3, [r7, #8]
 80004b2:	60d3      	str	r3, [r2, #12]
}
 80004b4:	bf00      	nop
 80004b6:	3714      	adds	r7, #20
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	e000ed00 	.word	0xe000ed00

080004c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004c8:	4b04      	ldr	r3, [pc, #16]	; (80004dc <__NVIC_GetPriorityGrouping+0x18>)
 80004ca:	68db      	ldr	r3, [r3, #12]
 80004cc:	0a1b      	lsrs	r3, r3, #8
 80004ce:	f003 0307 	and.w	r3, r3, #7
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	e000ed00 	.word	0xe000ed00

080004e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	db0b      	blt.n	800050a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	f003 021f 	and.w	r2, r3, #31
 80004f8:	4906      	ldr	r1, [pc, #24]	; (8000514 <__NVIC_EnableIRQ+0x34>)
 80004fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004fe:	095b      	lsrs	r3, r3, #5
 8000500:	2001      	movs	r0, #1
 8000502:	fa00 f202 	lsl.w	r2, r0, r2
 8000506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800050a:	bf00      	nop
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr
 8000514:	e000e100 	.word	0xe000e100

08000518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	6039      	str	r1, [r7, #0]
 8000522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000528:	2b00      	cmp	r3, #0
 800052a:	db0a      	blt.n	8000542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	b2da      	uxtb	r2, r3
 8000530:	490c      	ldr	r1, [pc, #48]	; (8000564 <__NVIC_SetPriority+0x4c>)
 8000532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000536:	0112      	lsls	r2, r2, #4
 8000538:	b2d2      	uxtb	r2, r2
 800053a:	440b      	add	r3, r1
 800053c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000540:	e00a      	b.n	8000558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	b2da      	uxtb	r2, r3
 8000546:	4908      	ldr	r1, [pc, #32]	; (8000568 <__NVIC_SetPriority+0x50>)
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	f003 030f 	and.w	r3, r3, #15
 800054e:	3b04      	subs	r3, #4
 8000550:	0112      	lsls	r2, r2, #4
 8000552:	b2d2      	uxtb	r2, r2
 8000554:	440b      	add	r3, r1
 8000556:	761a      	strb	r2, [r3, #24]
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	bc80      	pop	{r7}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	e000e100 	.word	0xe000e100
 8000568:	e000ed00 	.word	0xe000ed00

0800056c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800056c:	b480      	push	{r7}
 800056e:	b089      	sub	sp, #36	; 0x24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	f003 0307 	and.w	r3, r3, #7
 800057e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000580:	69fb      	ldr	r3, [r7, #28]
 8000582:	f1c3 0307 	rsb	r3, r3, #7
 8000586:	2b04      	cmp	r3, #4
 8000588:	bf28      	it	cs
 800058a:	2304      	movcs	r3, #4
 800058c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800058e:	69fb      	ldr	r3, [r7, #28]
 8000590:	3304      	adds	r3, #4
 8000592:	2b06      	cmp	r3, #6
 8000594:	d902      	bls.n	800059c <NVIC_EncodePriority+0x30>
 8000596:	69fb      	ldr	r3, [r7, #28]
 8000598:	3b03      	subs	r3, #3
 800059a:	e000      	b.n	800059e <NVIC_EncodePriority+0x32>
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a0:	f04f 32ff 	mov.w	r2, #4294967295
 80005a4:	69bb      	ldr	r3, [r7, #24]
 80005a6:	fa02 f303 	lsl.w	r3, r2, r3
 80005aa:	43da      	mvns	r2, r3
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	401a      	ands	r2, r3
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005b4:	f04f 31ff 	mov.w	r1, #4294967295
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	fa01 f303 	lsl.w	r3, r1, r3
 80005be:	43d9      	mvns	r1, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c4:	4313      	orrs	r3, r2
         );
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3724      	adds	r7, #36	; 0x24
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	3b01      	subs	r3, #1
 80005dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80005e0:	d301      	bcc.n	80005e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005e2:	2301      	movs	r3, #1
 80005e4:	e00f      	b.n	8000606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005e6:	4a0a      	ldr	r2, [pc, #40]	; (8000610 <SysTick_Config+0x40>)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	3b01      	subs	r3, #1
 80005ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005ee:	210f      	movs	r1, #15
 80005f0:	f04f 30ff 	mov.w	r0, #4294967295
 80005f4:	f7ff ff90 	bl	8000518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <SysTick_Config+0x40>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005fe:	4b04      	ldr	r3, [pc, #16]	; (8000610 <SysTick_Config+0x40>)
 8000600:	2207      	movs	r2, #7
 8000602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000604:	2300      	movs	r3, #0
}
 8000606:	4618      	mov	r0, r3
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	e000e010 	.word	0xe000e010

08000614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f7ff ff2d 	bl	800047c <__NVIC_SetPriorityGrouping>
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800062a:	b580      	push	{r7, lr}
 800062c:	b086      	sub	sp, #24
 800062e:	af00      	add	r7, sp, #0
 8000630:	4603      	mov	r3, r0
 8000632:	60b9      	str	r1, [r7, #8]
 8000634:	607a      	str	r2, [r7, #4]
 8000636:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800063c:	f7ff ff42 	bl	80004c4 <__NVIC_GetPriorityGrouping>
 8000640:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	68b9      	ldr	r1, [r7, #8]
 8000646:	6978      	ldr	r0, [r7, #20]
 8000648:	f7ff ff90 	bl	800056c <NVIC_EncodePriority>
 800064c:	4602      	mov	r2, r0
 800064e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000652:	4611      	mov	r1, r2
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff ff5f 	bl	8000518 <__NVIC_SetPriority>
}
 800065a:	bf00      	nop
 800065c:	3718      	adds	r7, #24
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	b082      	sub	sp, #8
 8000666:	af00      	add	r7, sp, #0
 8000668:	4603      	mov	r3, r0
 800066a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800066c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ff35 	bl	80004e0 <__NVIC_EnableIRQ>
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	b082      	sub	sp, #8
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f7ff ffa2 	bl	80005d0 <SysTick_Config>
 800068c:	4603      	mov	r3, r0
}
 800068e:	4618      	mov	r0, r3
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000696:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000698:	b08b      	sub	sp, #44	; 0x2c
 800069a:	af06      	add	r7, sp, #24
 800069c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d101      	bne.n	80006a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80006a4:	2301      	movs	r3, #1
 80006a6:	e0fd      	b.n	80008a4 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d106      	bne.n	80006c2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2200      	movs	r2, #0
 80006b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f005 fdbf 	bl	8006240 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2203      	movs	r2, #3
 80006c6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 f82a 	bl	8002728 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	687e      	ldr	r6, [r7, #4]
 80006dc:	466d      	mov	r5, sp
 80006de:	f106 0410 	add.w	r4, r6, #16
 80006e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006e6:	6823      	ldr	r3, [r4, #0]
 80006e8:	602b      	str	r3, [r5, #0]
 80006ea:	1d33      	adds	r3, r6, #4
 80006ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006ee:	6838      	ldr	r0, [r7, #0]
 80006f0:	f001 fff4 	bl	80026dc <USB_CoreInit>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d005      	beq.n	8000706 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2202      	movs	r2, #2
 80006fe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000702:	2301      	movs	r3, #1
 8000704:	e0ce      	b.n	80008a4 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f002 f825 	bl	800275c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000712:	2300      	movs	r3, #0
 8000714:	73fb      	strb	r3, [r7, #15]
 8000716:	e04c      	b.n	80007b2 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	6879      	ldr	r1, [r7, #4]
 800071c:	1c5a      	adds	r2, r3, #1
 800071e:	4613      	mov	r3, r2
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	4413      	add	r3, r2
 8000724:	00db      	lsls	r3, r3, #3
 8000726:	440b      	add	r3, r1
 8000728:	3301      	adds	r3, #1
 800072a:	2201      	movs	r2, #1
 800072c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	6879      	ldr	r1, [r7, #4]
 8000732:	1c5a      	adds	r2, r3, #1
 8000734:	4613      	mov	r3, r2
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	4413      	add	r3, r2
 800073a:	00db      	lsls	r3, r3, #3
 800073c:	440b      	add	r3, r1
 800073e:	7bfa      	ldrb	r2, [r7, #15]
 8000740:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000742:	7bfa      	ldrb	r2, [r7, #15]
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	b298      	uxth	r0, r3
 8000748:	6879      	ldr	r1, [r7, #4]
 800074a:	4613      	mov	r3, r2
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	4413      	add	r3, r2
 8000750:	00db      	lsls	r3, r3, #3
 8000752:	440b      	add	r3, r1
 8000754:	3336      	adds	r3, #54	; 0x36
 8000756:	4602      	mov	r2, r0
 8000758:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	6879      	ldr	r1, [r7, #4]
 800075e:	1c5a      	adds	r2, r3, #1
 8000760:	4613      	mov	r3, r2
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	4413      	add	r3, r2
 8000766:	00db      	lsls	r3, r3, #3
 8000768:	440b      	add	r3, r1
 800076a:	3303      	adds	r3, #3
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000770:	7bfa      	ldrb	r2, [r7, #15]
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	4613      	mov	r3, r2
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	4413      	add	r3, r2
 800077a:	00db      	lsls	r3, r3, #3
 800077c:	440b      	add	r3, r1
 800077e:	3338      	adds	r3, #56	; 0x38
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000784:	7bfa      	ldrb	r2, [r7, #15]
 8000786:	6879      	ldr	r1, [r7, #4]
 8000788:	4613      	mov	r3, r2
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	4413      	add	r3, r2
 800078e:	00db      	lsls	r3, r3, #3
 8000790:	440b      	add	r3, r1
 8000792:	333c      	adds	r3, #60	; 0x3c
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000798:	7bfa      	ldrb	r2, [r7, #15]
 800079a:	6879      	ldr	r1, [r7, #4]
 800079c:	4613      	mov	r3, r2
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	4413      	add	r3, r2
 80007a2:	00db      	lsls	r3, r3, #3
 80007a4:	440b      	add	r3, r1
 80007a6:	3340      	adds	r3, #64	; 0x40
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	3301      	adds	r3, #1
 80007b0:	73fb      	strb	r3, [r7, #15]
 80007b2:	7bfa      	ldrb	r2, [r7, #15]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d3ad      	bcc.n	8000718 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80007bc:	2300      	movs	r3, #0
 80007be:	73fb      	strb	r3, [r7, #15]
 80007c0:	e044      	b.n	800084c <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80007c2:	7bfa      	ldrb	r2, [r7, #15]
 80007c4:	6879      	ldr	r1, [r7, #4]
 80007c6:	4613      	mov	r3, r2
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	4413      	add	r3, r2
 80007cc:	00db      	lsls	r3, r3, #3
 80007ce:	440b      	add	r3, r1
 80007d0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80007d8:	7bfa      	ldrb	r2, [r7, #15]
 80007da:	6879      	ldr	r1, [r7, #4]
 80007dc:	4613      	mov	r3, r2
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	4413      	add	r3, r2
 80007e2:	00db      	lsls	r3, r3, #3
 80007e4:	440b      	add	r3, r1
 80007e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80007ea:	7bfa      	ldrb	r2, [r7, #15]
 80007ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80007ee:	7bfa      	ldrb	r2, [r7, #15]
 80007f0:	6879      	ldr	r1, [r7, #4]
 80007f2:	4613      	mov	r3, r2
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	4413      	add	r3, r2
 80007f8:	00db      	lsls	r3, r3, #3
 80007fa:	440b      	add	r3, r1
 80007fc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000804:	7bfa      	ldrb	r2, [r7, #15]
 8000806:	6879      	ldr	r1, [r7, #4]
 8000808:	4613      	mov	r3, r2
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	4413      	add	r3, r2
 800080e:	00db      	lsls	r3, r3, #3
 8000810:	440b      	add	r3, r1
 8000812:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800081a:	7bfa      	ldrb	r2, [r7, #15]
 800081c:	6879      	ldr	r1, [r7, #4]
 800081e:	4613      	mov	r3, r2
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	4413      	add	r3, r2
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	440b      	add	r3, r1
 8000828:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000830:	7bfa      	ldrb	r2, [r7, #15]
 8000832:	6879      	ldr	r1, [r7, #4]
 8000834:	4613      	mov	r3, r2
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	4413      	add	r3, r2
 800083a:	00db      	lsls	r3, r3, #3
 800083c:	440b      	add	r3, r1
 800083e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000846:	7bfb      	ldrb	r3, [r7, #15]
 8000848:	3301      	adds	r3, #1
 800084a:	73fb      	strb	r3, [r7, #15]
 800084c:	7bfa      	ldrb	r2, [r7, #15]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	429a      	cmp	r2, r3
 8000854:	d3b5      	bcc.n	80007c2 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	687e      	ldr	r6, [r7, #4]
 800085e:	466d      	mov	r5, sp
 8000860:	f106 0410 	add.w	r4, r6, #16
 8000864:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000866:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000868:	6823      	ldr	r3, [r4, #0]
 800086a:	602b      	str	r3, [r5, #0]
 800086c:	1d33      	adds	r3, r6, #4
 800086e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000870:	6838      	ldr	r0, [r7, #0]
 8000872:	f001 ff7f 	bl	8002774 <USB_DevInit>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d005      	beq.n	8000888 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2202      	movs	r2, #2
 8000880:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000884:	2301      	movs	r3, #1
 8000886:	e00d      	b.n	80008a4 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2200      	movs	r2, #0
 800088c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2201      	movs	r2, #1
 8000894:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4618      	mov	r0, r3
 800089e:	f003 ff19 	bl	80046d4 <USB_DevDisconnect>

  return HAL_OK;
 80008a2:	2300      	movs	r3, #0
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3714      	adds	r7, #20
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080008ac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d101      	bne.n	80008c2 <HAL_PCD_Start+0x16>
 80008be:	2302      	movs	r3, #2
 80008c0:	e016      	b.n	80008f0 <HAL_PCD_Start+0x44>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2201      	movs	r2, #1
 80008c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4618      	mov	r0, r3
 80008d0:	f001 ff14 	bl	80026fc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80008d4:	2101      	movs	r1, #1
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f005 ff25 	bl	8006726 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f003 feed 	bl	80046c0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2200      	movs	r2, #0
 80008ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b088      	sub	sp, #32
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4618      	mov	r0, r3
 8000906:	f003 feef 	bl	80046e8 <USB_ReadInterrupts>
 800090a:	4603      	mov	r3, r0
 800090c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000914:	d102      	bne.n	800091c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f000 fb61 	bl	8000fde <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4618      	mov	r0, r3
 8000922:	f003 fee1 	bl	80046e8 <USB_ReadInterrupts>
 8000926:	4603      	mov	r3, r0
 8000928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800092c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000930:	d112      	bne.n	8000958 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800093a:	b29a      	uxth	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000944:	b292      	uxth	r2, r2
 8000946:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f005 fcf3 	bl	8006336 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000950:	2100      	movs	r1, #0
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f000 f925 	bl	8000ba2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4618      	mov	r0, r3
 800095e:	f003 fec3 	bl	80046e8 <USB_ReadInterrupts>
 8000962:	4603      	mov	r3, r0
 8000964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000968:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800096c:	d10b      	bne.n	8000986 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000976:	b29a      	uxth	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000980:	b292      	uxth	r2, r2
 8000982:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4618      	mov	r0, r3
 800098c:	f003 feac 	bl	80046e8 <USB_ReadInterrupts>
 8000990:	4603      	mov	r3, r0
 8000992:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800099a:	d10b      	bne.n	80009b4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80009ae:	b292      	uxth	r2, r2
 80009b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f003 fe95 	bl	80046e8 <USB_ReadInterrupts>
 80009be:	4603      	mov	r3, r0
 80009c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80009c8:	d126      	bne.n	8000a18 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f022 0204 	bic.w	r2, r2, #4
 80009dc:	b292      	uxth	r2, r2
 80009de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f022 0208 	bic.w	r2, r2, #8
 80009f4:	b292      	uxth	r2, r2
 80009f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f005 fcd4 	bl	80063a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a12:	b292      	uxth	r2, r2
 8000a14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f003 fe63 	bl	80046e8 <USB_ReadInterrupts>
 8000a22:	4603      	mov	r3, r0
 8000a24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a2c:	f040 8084 	bne.w	8000b38 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000a30:	2300      	movs	r3, #0
 8000a32:	77fb      	strb	r3, [r7, #31]
 8000a34:	e011      	b.n	8000a5a <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	7ffb      	ldrb	r3, [r7, #31]
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	441a      	add	r2, r3
 8000a42:	7ffb      	ldrb	r3, [r7, #31]
 8000a44:	8812      	ldrh	r2, [r2, #0]
 8000a46:	b292      	uxth	r2, r2
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	f107 0120 	add.w	r1, r7, #32
 8000a4e:	440b      	add	r3, r1
 8000a50:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000a54:	7ffb      	ldrb	r3, [r7, #31]
 8000a56:	3301      	adds	r3, #1
 8000a58:	77fb      	strb	r3, [r7, #31]
 8000a5a:	7ffb      	ldrb	r3, [r7, #31]
 8000a5c:	2b07      	cmp	r3, #7
 8000a5e:	d9ea      	bls.n	8000a36 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f042 0201 	orr.w	r2, r2, #1
 8000a72:	b292      	uxth	r2, r2
 8000a74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f022 0201 	bic.w	r2, r2, #1
 8000a8a:	b292      	uxth	r2, r2
 8000a8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000a90:	bf00      	nop
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d0f6      	beq.n	8000a92 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ab6:	b292      	uxth	r2, r2
 8000ab8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000abc:	2300      	movs	r3, #0
 8000abe:	77fb      	strb	r3, [r7, #31]
 8000ac0:	e010      	b.n	8000ae4 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000ac2:	7ffb      	ldrb	r3, [r7, #31]
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	6812      	ldr	r2, [r2, #0]
 8000ac8:	4611      	mov	r1, r2
 8000aca:	7ffa      	ldrb	r2, [r7, #31]
 8000acc:	0092      	lsls	r2, r2, #2
 8000ace:	440a      	add	r2, r1
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	f107 0120 	add.w	r1, r7, #32
 8000ad6:	440b      	add	r3, r1
 8000ad8:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000adc:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000ade:	7ffb      	ldrb	r3, [r7, #31]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	77fb      	strb	r3, [r7, #31]
 8000ae4:	7ffb      	ldrb	r3, [r7, #31]
 8000ae6:	2b07      	cmp	r3, #7
 8000ae8:	d9eb      	bls.n	8000ac2 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f042 0208 	orr.w	r2, r2, #8
 8000afc:	b292      	uxth	r2, r2
 8000afe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b14:	b292      	uxth	r2, r2
 8000b16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f042 0204 	orr.w	r2, r2, #4
 8000b2c:	b292      	uxth	r2, r2
 8000b2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f005 fc1e 	bl	8006374 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f003 fdd3 	bl	80046e8 <USB_ReadInterrupts>
 8000b42:	4603      	mov	r3, r0
 8000b44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b4c:	d10e      	bne.n	8000b6c <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000b60:	b292      	uxth	r2, r2
 8000b62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f005 fbd7 	bl	800631a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f003 fdb9 	bl	80046e8 <USB_ReadInterrupts>
 8000b76:	4603      	mov	r3, r0
 8000b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b80:	d10b      	bne.n	8000b9a <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b94:	b292      	uxth	r2, r2
 8000b96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	3720      	adds	r7, #32
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	460b      	mov	r3, r1
 8000bac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d101      	bne.n	8000bbc <HAL_PCD_SetAddress+0x1a>
 8000bb8:	2302      	movs	r3, #2
 8000bba:	e013      	b.n	8000be4 <HAL_PCD_SetAddress+0x42>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	78fa      	ldrb	r2, [r7, #3]
 8000bc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	78fa      	ldrb	r2, [r7, #3]
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f003 fd60 	bl	800469a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000be2:	2300      	movs	r3, #0
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	4608      	mov	r0, r1
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	70fb      	strb	r3, [r7, #3]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	803b      	strh	r3, [r7, #0]
 8000c02:	4613      	mov	r3, r2
 8000c04:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000c06:	2300      	movs	r3, #0
 8000c08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000c0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	da0e      	bge.n	8000c30 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c12:	78fb      	ldrb	r3, [r7, #3]
 8000c14:	f003 0307 	and.w	r3, r3, #7
 8000c18:	1c5a      	adds	r2, r3, #1
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	4413      	add	r3, r2
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	705a      	strb	r2, [r3, #1]
 8000c2e:	e00e      	b.n	8000c4e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c30:	78fb      	ldrb	r3, [r7, #3]
 8000c32:	f003 0207 	and.w	r2, r3, #7
 8000c36:	4613      	mov	r3, r2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	4413      	add	r3, r2
 8000c3c:	00db      	lsls	r3, r3, #3
 8000c3e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000c4e:	78fb      	ldrb	r3, [r7, #3]
 8000c50:	f003 0307 	and.w	r3, r3, #7
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000c5a:	883a      	ldrh	r2, [r7, #0]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	78ba      	ldrb	r2, [r7, #2]
 8000c64:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	785b      	ldrb	r3, [r3, #1]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d004      	beq.n	8000c78 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000c78:	78bb      	ldrb	r3, [r7, #2]
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	d102      	bne.n	8000c84 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	2200      	movs	r2, #0
 8000c82:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d101      	bne.n	8000c92 <HAL_PCD_EP_Open+0xa6>
 8000c8e:	2302      	movs	r3, #2
 8000c90:	e00e      	b.n	8000cb0 <HAL_PCD_EP_Open+0xc4>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2201      	movs	r2, #1
 8000c96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	68f9      	ldr	r1, [r7, #12]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f001 fd87 	bl	80027b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8000cae:	7afb      	ldrb	r3, [r7, #11]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000cc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	da0e      	bge.n	8000cea <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000ccc:	78fb      	ldrb	r3, [r7, #3]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	1c5a      	adds	r2, r3, #1
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	4413      	add	r3, r2
 8000ce0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	705a      	strb	r2, [r3, #1]
 8000ce8:	e00e      	b.n	8000d08 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000cea:	78fb      	ldrb	r3, [r7, #3]
 8000cec:	f003 0207 	and.w	r2, r3, #7
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	4413      	add	r3, r2
 8000cf6:	00db      	lsls	r3, r3, #3
 8000cf8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	4413      	add	r3, r2
 8000d00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	2200      	movs	r2, #0
 8000d06:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000d08:	78fb      	ldrb	r3, [r7, #3]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d101      	bne.n	8000d22 <HAL_PCD_EP_Close+0x6a>
 8000d1e:	2302      	movs	r3, #2
 8000d20:	e00e      	b.n	8000d40 <HAL_PCD_EP_Close+0x88>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2201      	movs	r2, #1
 8000d26:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	68f9      	ldr	r1, [r7, #12]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f002 f8a9 	bl	8002e88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8000d3e:	2300      	movs	r3, #0
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	460b      	mov	r3, r1
 8000d56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d58:	7afb      	ldrb	r3, [r7, #11]
 8000d5a:	f003 0207 	and.w	r2, r3, #7
 8000d5e:	4613      	mov	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	4413      	add	r3, r2
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	683a      	ldr	r2, [r7, #0]
 8000d7a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	2200      	movs	r2, #0
 8000d86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d88:	7afb      	ldrb	r3, [r7, #11]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000d94:	7afb      	ldrb	r3, [r7, #11]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d106      	bne.n	8000dac <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	6979      	ldr	r1, [r7, #20]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f002 fa5b 	bl	8003260 <USB_EPStartXfer>
 8000daa:	e005      	b.n	8000db8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	6979      	ldr	r1, [r7, #20]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f002 fa54 	bl	8003260 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	460b      	mov	r3, r1
 8000dcc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000dce:	78fb      	ldrb	r3, [r7, #3]
 8000dd0:	f003 0207 	and.w	r2, r3, #7
 8000dd4:	6879      	ldr	r1, [r7, #4]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	4413      	add	r3, r2
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	440b      	add	r3, r1
 8000de0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000de4:	681b      	ldr	r3, [r3, #0]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr

08000df0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	607a      	str	r2, [r7, #4]
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e00:	7afb      	ldrb	r3, [r7, #11]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	1c5a      	adds	r2, r3, #1
 8000e08:	4613      	mov	r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	4413      	add	r3, r2
 8000e0e:	00db      	lsls	r3, r3, #3
 8000e10:	68fa      	ldr	r2, [r7, #12]
 8000e12:	4413      	add	r3, r2
 8000e14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	683a      	ldr	r2, [r7, #0]
 8000e20:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	2201      	movs	r2, #1
 8000e26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	683a      	ldr	r2, [r7, #0]
 8000e2e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	2200      	movs	r2, #0
 8000e34:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	2201      	movs	r2, #1
 8000e3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e3c:	7afb      	ldrb	r3, [r7, #11]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000e48:	7afb      	ldrb	r3, [r7, #11]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d106      	bne.n	8000e60 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	6979      	ldr	r1, [r7, #20]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f002 fa01 	bl	8003260 <USB_EPStartXfer>
 8000e5e:	e005      	b.n	8000e6c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6979      	ldr	r1, [r7, #20]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f002 f9fa 	bl	8003260 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b084      	sub	sp, #16
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
 8000e7e:	460b      	mov	r3, r1
 8000e80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000e82:	78fb      	ldrb	r3, [r7, #3]
 8000e84:	f003 0207 	and.w	r2, r3, #7
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d901      	bls.n	8000e94 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e04c      	b.n	8000f2e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000e94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	da0e      	bge.n	8000eba <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e9c:	78fb      	ldrb	r3, [r7, #3]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	1c5a      	adds	r2, r3, #1
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	4413      	add	r3, r2
 8000eaa:	00db      	lsls	r3, r3, #3
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	4413      	add	r3, r2
 8000eb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	705a      	strb	r2, [r3, #1]
 8000eb8:	e00c      	b.n	8000ed4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000eba:	78fa      	ldrb	r2, [r7, #3]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	4413      	add	r3, r2
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	4413      	add	r3, r2
 8000ecc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000eda:	78fb      	ldrb	r3, [r7, #3]
 8000edc:	f003 0307 	and.w	r3, r3, #7
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d101      	bne.n	8000ef4 <HAL_PCD_EP_SetStall+0x7e>
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	e01c      	b.n	8000f2e <HAL_PCD_EP_SetStall+0xb8>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	68f9      	ldr	r1, [r7, #12]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f003 facc 	bl	80044a0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000f08:	78fb      	ldrb	r3, [r7, #3]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d108      	bne.n	8000f24 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4610      	mov	r0, r2
 8000f20:	f003 fbf1 	bl	8004706 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b084      	sub	sp, #16
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000f42:	78fb      	ldrb	r3, [r7, #3]
 8000f44:	f003 020f 	and.w	r2, r3, #15
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d901      	bls.n	8000f54 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e040      	b.n	8000fd6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000f54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	da0e      	bge.n	8000f7a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f5c:	78fb      	ldrb	r3, [r7, #3]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	4613      	mov	r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	4413      	add	r3, r2
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	4413      	add	r3, r2
 8000f70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2201      	movs	r2, #1
 8000f76:	705a      	strb	r2, [r3, #1]
 8000f78:	e00e      	b.n	8000f98 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f7a:	78fb      	ldrb	r3, [r7, #3]
 8000f7c:	f003 0207 	and.w	r2, r3, #7
 8000f80:	4613      	mov	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4413      	add	r3, r2
 8000f86:	00db      	lsls	r3, r3, #3
 8000f88:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	4413      	add	r3, r2
 8000f90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	2200      	movs	r2, #0
 8000f96:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f9e:	78fb      	ldrb	r3, [r7, #3]
 8000fa0:	f003 0307 	and.w	r3, r3, #7
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d101      	bne.n	8000fb8 <HAL_PCD_EP_ClrStall+0x82>
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	e00e      	b.n	8000fd6 <HAL_PCD_EP_ClrStall+0xa0>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	68f9      	ldr	r1, [r7, #12]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f003 faba 	bl	8004540 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b08e      	sub	sp, #56	; 0x38
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000fe6:	e2df      	b.n	80015a8 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ff0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000ff2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8000ffe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001002:	2b00      	cmp	r3, #0
 8001004:	f040 8158 	bne.w	80012b8 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001008:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800100a:	f003 0310 	and.w	r3, r3, #16
 800100e:	2b00      	cmp	r3, #0
 8001010:	d152      	bne.n	80010b8 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	b29b      	uxth	r3, r3
 800101a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800101e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001022:	81fb      	strh	r3, [r7, #14]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	89fb      	ldrh	r3, [r7, #14]
 800102a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800102e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001032:	b29b      	uxth	r3, r3
 8001034:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3328      	adds	r3, #40	; 0x28
 800103a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001044:	b29b      	uxth	r3, r3
 8001046:	461a      	mov	r2, r3
 8001048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	4413      	add	r3, r2
 8001050:	3302      	adds	r3, #2
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	6812      	ldr	r2, [r2, #0]
 8001058:	4413      	add	r3, r2
 800105a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001066:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106a:	695a      	ldr	r2, [r3, #20]
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	69db      	ldr	r3, [r3, #28]
 8001070:	441a      	add	r2, r3
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001076:	2100      	movs	r1, #0
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f005 f934 	bl	80062e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	f000 828e 	beq.w	80015a8 <PCD_EP_ISR_Handler+0x5ca>
 800108c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	2b00      	cmp	r3, #0
 8001092:	f040 8289 	bne.w	80015a8 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800109c:	b2db      	uxtb	r3, r3
 800109e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	b292      	uxth	r2, r2
 80010aa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80010b6:	e277      	b.n	80015a8 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80010c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80010ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d034      	beq.n	800113c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80010da:	b29b      	uxth	r3, r3
 80010dc:	461a      	mov	r2, r3
 80010de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	4413      	add	r3, r2
 80010e6:	3306      	adds	r3, #6
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	6812      	ldr	r2, [r2, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80010fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6818      	ldr	r0, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001110:	b29b      	uxth	r3, r3
 8001112:	f003 fb47 	bl	80047a4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	b29a      	uxth	r2, r3
 800111e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001122:	4013      	ands	r3, r2
 8001124:	823b      	strh	r3, [r7, #16]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	8a3a      	ldrh	r2, [r7, #16]
 800112c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001130:	b292      	uxth	r2, r2
 8001132:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f005 f8a9 	bl	800628c <HAL_PCD_SetupStageCallback>
 800113a:	e235      	b.n	80015a8 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800113c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001140:	2b00      	cmp	r3, #0
 8001142:	f280 8231 	bge.w	80015a8 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	b29a      	uxth	r2, r3
 800114e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001152:	4013      	ands	r3, r2
 8001154:	83bb      	strh	r3, [r7, #28]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	8bba      	ldrh	r2, [r7, #28]
 800115c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001160:	b292      	uxth	r2, r2
 8001162:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800116c:	b29b      	uxth	r3, r3
 800116e:	461a      	mov	r2, r3
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	4413      	add	r3, r2
 8001178:	3306      	adds	r3, #6
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	6812      	ldr	r2, [r2, #0]
 8001180:	4413      	add	r3, r2
 8001182:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001192:	69db      	ldr	r3, [r3, #28]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d019      	beq.n	80011cc <PCD_EP_ISR_Handler+0x1ee>
 8001198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d015      	beq.n	80011cc <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a6:	6959      	ldr	r1, [r3, #20]
 80011a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011aa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ae:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	f003 faf7 	bl	80047a4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80011b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b8:	695a      	ldr	r2, [r3, #20]
 80011ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	441a      	add	r2, r3
 80011c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80011c4:	2100      	movs	r1, #0
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f005 f872 	bl	80062b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	61bb      	str	r3, [r7, #24]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80011da:	b29b      	uxth	r3, r3
 80011dc:	461a      	mov	r2, r3
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	4413      	add	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d112      	bne.n	800121a <PCD_EP_ISR_Handler+0x23c>
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80011fe:	b29a      	uxth	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	801a      	strh	r2, [r3, #0]
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	b29b      	uxth	r3, r3
 800120a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800120e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001212:	b29a      	uxth	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	801a      	strh	r2, [r3, #0]
 8001218:	e02f      	b.n	800127a <PCD_EP_ISR_Handler+0x29c>
 800121a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	2b3e      	cmp	r3, #62	; 0x3e
 8001220:	d813      	bhi.n	800124a <PCD_EP_ISR_Handler+0x26c>
 8001222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	085b      	lsrs	r3, r3, #1
 8001228:	633b      	str	r3, [r7, #48]	; 0x30
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b00      	cmp	r3, #0
 8001234:	d002      	beq.n	800123c <PCD_EP_ISR_Handler+0x25e>
 8001236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001238:	3301      	adds	r3, #1
 800123a:	633b      	str	r3, [r7, #48]	; 0x30
 800123c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800123e:	b29b      	uxth	r3, r3
 8001240:	029b      	lsls	r3, r3, #10
 8001242:	b29a      	uxth	r2, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	801a      	strh	r2, [r3, #0]
 8001248:	e017      	b.n	800127a <PCD_EP_ISR_Handler+0x29c>
 800124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	633b      	str	r3, [r7, #48]	; 0x30
 8001252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	f003 031f 	and.w	r3, r3, #31
 800125a:	2b00      	cmp	r3, #0
 800125c:	d102      	bne.n	8001264 <PCD_EP_ISR_Handler+0x286>
 800125e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001260:	3b01      	subs	r3, #1
 8001262:	633b      	str	r3, [r7, #48]	; 0x30
 8001264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001266:	b29b      	uxth	r3, r3
 8001268:	029b      	lsls	r3, r3, #10
 800126a:	b29b      	uxth	r3, r3
 800126c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001270:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001274:	b29a      	uxth	r2, r3
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	b29b      	uxth	r3, r3
 8001282:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800128a:	827b      	strh	r3, [r7, #18]
 800128c:	8a7b      	ldrh	r3, [r7, #18]
 800128e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001292:	827b      	strh	r3, [r7, #18]
 8001294:	8a7b      	ldrh	r3, [r7, #18]
 8001296:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800129a:	827b      	strh	r3, [r7, #18]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	8a7b      	ldrh	r3, [r7, #18]
 80012a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80012a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80012aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	8013      	strh	r3, [r2, #0]
 80012b6:	e177      	b.n	80015a8 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	881b      	ldrh	r3, [r3, #0]
 80012c8:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80012ca:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f280 80ea 	bge.w	80014a8 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80012ea:	4013      	ands	r3, r2
 80012ec:	853b      	strh	r3, [r7, #40]	; 0x28
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80012fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001302:	b292      	uxth	r2, r2
 8001304:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001306:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800130a:	4613      	mov	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800131c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131e:	7b1b      	ldrb	r3, [r3, #12]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d122      	bne.n	800136a <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800132c:	b29b      	uxth	r3, r3
 800132e:	461a      	mov	r2, r3
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	4413      	add	r3, r2
 8001338:	3306      	adds	r3, #6
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	6812      	ldr	r2, [r2, #0]
 8001340:	4413      	add	r3, r2
 8001342:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800134c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800134e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001350:	2b00      	cmp	r3, #0
 8001352:	f000 8087 	beq.w	8001464 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6818      	ldr	r0, [r3, #0]
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	6959      	ldr	r1, [r3, #20]
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	88da      	ldrh	r2, [r3, #6]
 8001362:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001364:	f003 fa1e 	bl	80047a4 <USB_ReadPMA>
 8001368:	e07c      	b.n	8001464 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	78db      	ldrb	r3, [r3, #3]
 800136e:	2b02      	cmp	r3, #2
 8001370:	d108      	bne.n	8001384 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001372:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001374:	461a      	mov	r2, r3
 8001376:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f000 f923 	bl	80015c4 <HAL_PCD_EP_DB_Receive>
 800137e:	4603      	mov	r3, r0
 8001380:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001382:	e06f      	b.n	8001464 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	b29b      	uxth	r3, r3
 8001396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800139a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800139e:	847b      	strh	r3, [r7, #34]	; 0x22
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	441a      	add	r2, r3
 80013ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80013b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80013b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80013b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	461a      	mov	r2, r3
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d021      	beq.n	8001422 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	4413      	add	r3, r2
 80013f2:	3302      	adds	r3, #2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	6812      	ldr	r2, [r2, #0]
 80013fa:	4413      	add	r3, r2
 80013fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001406:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001408:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800140a:	2b00      	cmp	r3, #0
 800140c:	d02a      	beq.n	8001464 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6818      	ldr	r0, [r3, #0]
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	6959      	ldr	r1, [r3, #20]
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	891a      	ldrh	r2, [r3, #8]
 800141a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800141c:	f003 f9c2 	bl	80047a4 <USB_ReadPMA>
 8001420:	e020      	b.n	8001464 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800142a:	b29b      	uxth	r3, r3
 800142c:	461a      	mov	r2, r3
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	4413      	add	r3, r2
 8001436:	3306      	adds	r3, #6
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	6812      	ldr	r2, [r2, #0]
 800143e:	4413      	add	r3, r2
 8001440:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800144a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800144c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800144e:	2b00      	cmp	r3, #0
 8001450:	d008      	beq.n	8001464 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6818      	ldr	r0, [r3, #0]
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	6959      	ldr	r1, [r3, #20]
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	895a      	ldrh	r2, [r3, #10]
 800145e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001460:	f003 f9a0 	bl	80047a4 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	69da      	ldr	r2, [r3, #28]
 8001468:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800146a:	441a      	add	r2, r3
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001472:	695a      	ldr	r2, [r3, #20]
 8001474:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001476:	441a      	add	r2, r3
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d004      	beq.n	800148e <PCD_EP_ISR_Handler+0x4b0>
 8001484:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	429a      	cmp	r2, r3
 800148c:	d206      	bcs.n	800149c <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	4619      	mov	r1, r3
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f004 ff0b 	bl	80062b0 <HAL_PCD_DataOutStageCallback>
 800149a:	e005      	b.n	80014a8 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014a2:	4618      	mov	r0, r3
 80014a4:	f001 fedc 	bl	8003260 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80014a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d07a      	beq.n	80015a8 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80014b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014b6:	1c5a      	adds	r2, r3, #1
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	4413      	add	r3, r2
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	461a      	mov	r2, r3
 80014cc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80014dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014e0:	843b      	strh	r3, [r7, #32]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	461a      	mov	r2, r3
 80014e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	441a      	add	r2, r3
 80014f0:	8c3b      	ldrh	r3, [r7, #32]
 80014f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80014f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	78db      	ldrb	r3, [r3, #3]
 8001502:	2b02      	cmp	r3, #2
 8001504:	d108      	bne.n	8001518 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800150a:	2b02      	cmp	r3, #2
 800150c:	d146      	bne.n	800159c <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800150e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001514:	2b00      	cmp	r3, #0
 8001516:	d141      	bne.n	800159c <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001520:	b29b      	uxth	r3, r3
 8001522:	461a      	mov	r2, r3
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	4413      	add	r3, r2
 800152c:	3302      	adds	r3, #2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	6812      	ldr	r2, [r2, #0]
 8001534:	4413      	add	r3, r2
 8001536:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001540:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	699a      	ldr	r2, [r3, #24]
 8001546:	8bfb      	ldrh	r3, [r7, #30]
 8001548:	429a      	cmp	r2, r3
 800154a:	d906      	bls.n	800155a <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	699a      	ldr	r2, [r3, #24]
 8001550:	8bfb      	ldrh	r3, [r7, #30]
 8001552:	1ad2      	subs	r2, r2, r3
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	619a      	str	r2, [r3, #24]
 8001558:	e002      	b.n	8001560 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d106      	bne.n	8001576 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4619      	mov	r1, r3
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f004 feb9 	bl	80062e6 <HAL_PCD_DataInStageCallback>
 8001574:	e018      	b.n	80015a8 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	695a      	ldr	r2, [r3, #20]
 800157a:	8bfb      	ldrh	r3, [r7, #30]
 800157c:	441a      	add	r2, r3
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	69da      	ldr	r2, [r3, #28]
 8001586:	8bfb      	ldrh	r3, [r7, #30]
 8001588:	441a      	add	r2, r3
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001594:	4618      	mov	r0, r3
 8001596:	f001 fe63 	bl	8003260 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800159a:	e005      	b.n	80015a8 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800159c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800159e:	461a      	mov	r2, r3
 80015a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f000 f91b 	bl	80017de <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	b21b      	sxth	r3, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f6ff ad17 	blt.w	8000fe8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3738      	adds	r7, #56	; 0x38
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	4613      	mov	r3, r2
 80015d0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80015d2:	88fb      	ldrh	r3, [r7, #6]
 80015d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d07e      	beq.n	80016da <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	461a      	mov	r2, r3
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	4413      	add	r3, r2
 80015f0:	3302      	adds	r3, #2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	6812      	ldr	r2, [r2, #0]
 80015f8:	4413      	add	r3, r2
 80015fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015fe:	881b      	ldrh	r3, [r3, #0]
 8001600:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001604:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	699a      	ldr	r2, [r3, #24]
 800160a:	8b7b      	ldrh	r3, [r7, #26]
 800160c:	429a      	cmp	r2, r3
 800160e:	d306      	bcc.n	800161e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	699a      	ldr	r2, [r3, #24]
 8001614:	8b7b      	ldrh	r3, [r7, #26]
 8001616:	1ad2      	subs	r2, r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	619a      	str	r2, [r3, #24]
 800161c:	e002      	b.n	8001624 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d123      	bne.n	8001674 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	b29b      	uxth	r3, r3
 800163e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001646:	833b      	strh	r3, [r7, #24]
 8001648:	8b3b      	ldrh	r3, [r7, #24]
 800164a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800164e:	833b      	strh	r3, [r7, #24]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	441a      	add	r2, r3
 800165e:	8b3b      	ldrh	r3, [r7, #24]
 8001660:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001664:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001668:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800166c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001670:	b29b      	uxth	r3, r3
 8001672:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001674:	88fb      	ldrh	r3, [r7, #6]
 8001676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800167a:	2b00      	cmp	r3, #0
 800167c:	d01f      	beq.n	80016be <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	b29b      	uxth	r3, r3
 8001690:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001698:	82fb      	strh	r3, [r7, #22]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	441a      	add	r2, r3
 80016a8:	8afb      	ldrh	r3, [r7, #22]
 80016aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80016ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80016b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80016be:	8b7b      	ldrh	r3, [r7, #26]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 8087 	beq.w	80017d4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6818      	ldr	r0, [r3, #0]
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	6959      	ldr	r1, [r3, #20]
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	891a      	ldrh	r2, [r3, #8]
 80016d2:	8b7b      	ldrh	r3, [r7, #26]
 80016d4:	f003 f866 	bl	80047a4 <USB_ReadPMA>
 80016d8:	e07c      	b.n	80017d4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	461a      	mov	r2, r3
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	4413      	add	r3, r2
 80016ee:	3306      	adds	r3, #6
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	6812      	ldr	r2, [r2, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001702:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	699a      	ldr	r2, [r3, #24]
 8001708:	8b7b      	ldrh	r3, [r7, #26]
 800170a:	429a      	cmp	r2, r3
 800170c:	d306      	bcc.n	800171c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	699a      	ldr	r2, [r3, #24]
 8001712:	8b7b      	ldrh	r3, [r7, #26]
 8001714:	1ad2      	subs	r2, r2, r3
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	619a      	str	r2, [r3, #24]
 800171a:	e002      	b.n	8001722 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2200      	movs	r2, #0
 8001720:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d123      	bne.n	8001772 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	461a      	mov	r2, r3
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	b29b      	uxth	r3, r3
 800173c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001744:	83fb      	strh	r3, [r7, #30]
 8001746:	8bfb      	ldrh	r3, [r7, #30]
 8001748:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800174c:	83fb      	strh	r3, [r7, #30]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	441a      	add	r2, r3
 800175c:	8bfb      	ldrh	r3, [r7, #30]
 800175e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001762:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800176a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800176e:	b29b      	uxth	r3, r3
 8001770:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001772:	88fb      	ldrh	r3, [r7, #6]
 8001774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001778:	2b00      	cmp	r3, #0
 800177a:	d11f      	bne.n	80017bc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	b29b      	uxth	r3, r3
 800178e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001796:	83bb      	strh	r3, [r7, #28]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	441a      	add	r2, r3
 80017a6:	8bbb      	ldrh	r3, [r7, #28]
 80017a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80017ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80017b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80017bc:	8b7b      	ldrh	r3, [r7, #26]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d008      	beq.n	80017d4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6818      	ldr	r0, [r3, #0]
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	6959      	ldr	r1, [r3, #20]
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	895a      	ldrh	r2, [r3, #10]
 80017ce:	8b7b      	ldrh	r3, [r7, #26]
 80017d0:	f002 ffe8 	bl	80047a4 <USB_ReadPMA>
    }
  }

  return count;
 80017d4:	8b7b      	ldrh	r3, [r7, #26]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3720      	adds	r7, #32
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b092      	sub	sp, #72	; 0x48
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	60f8      	str	r0, [r7, #12]
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	4613      	mov	r3, r2
 80017ea:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80017ec:	88fb      	ldrh	r3, [r7, #6]
 80017ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 8132 	beq.w	8001a5c <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001800:	b29b      	uxth	r3, r3
 8001802:	461a      	mov	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	4413      	add	r3, r2
 800180c:	3302      	adds	r3, #2
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	6812      	ldr	r2, [r2, #0]
 8001814:	4413      	add	r3, r2
 8001816:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001820:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	699a      	ldr	r2, [r3, #24]
 8001826:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001828:	429a      	cmp	r2, r3
 800182a:	d906      	bls.n	800183a <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	699a      	ldr	r2, [r3, #24]
 8001830:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001832:	1ad2      	subs	r2, r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	619a      	str	r2, [r3, #24]
 8001838:	e002      	b.n	8001840 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	2200      	movs	r2, #0
 800183e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d12c      	bne.n	80018a2 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f004 fd49 	bl	80062e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001854:	88fb      	ldrh	r3, [r7, #6]
 8001856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 822f 	beq.w	8001cbe <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	461a      	mov	r2, r3
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	b29b      	uxth	r3, r3
 8001872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800187a:	827b      	strh	r3, [r7, #18]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	441a      	add	r2, r3
 800188a:	8a7b      	ldrh	r3, [r7, #18]
 800188c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001890:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001894:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800189c:	b29b      	uxth	r3, r3
 800189e:	8013      	strh	r3, [r2, #0]
 80018a0:	e20d      	b.n	8001cbe <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d01f      	beq.n	80018ec <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80018c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018c6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	441a      	add	r2, r3
 80018d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80018dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80018e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	f040 81e3 	bne.w	8001cbe <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	695a      	ldr	r2, [r3, #20]
 80018fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80018fe:	441a      	add	r2, r3
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	69da      	ldr	r2, [r3, #28]
 8001908:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800190a:	441a      	add	r2, r3
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	6a1a      	ldr	r2, [r3, #32]
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	429a      	cmp	r2, r3
 800191a:	d309      	bcc.n	8001930 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	6a1a      	ldr	r2, [r3, #32]
 8001926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001928:	1ad2      	subs	r2, r2, r3
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	621a      	str	r2, [r3, #32]
 800192e:	e014      	b.n	800195a <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d106      	bne.n	8001946 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8001938:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800193a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001944:	e009      	b.n	800195a <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	2200      	movs	r2, #0
 8001958:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	785b      	ldrb	r3, [r3, #1]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d155      	bne.n	8001a0e <HAL_PCD_EP_DB_Transmit+0x230>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	61bb      	str	r3, [r7, #24]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001970:	b29b      	uxth	r3, r3
 8001972:	461a      	mov	r2, r3
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	4413      	add	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	011a      	lsls	r2, r3, #4
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	4413      	add	r3, r2
 8001984:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800198c:	2b00      	cmp	r3, #0
 800198e:	d112      	bne.n	80019b6 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	b29b      	uxth	r3, r3
 8001996:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800199a:	b29a      	uxth	r2, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	801a      	strh	r2, [r3, #0]
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	801a      	strh	r2, [r3, #0]
 80019b4:	e047      	b.n	8001a46 <HAL_PCD_EP_DB_Transmit+0x268>
 80019b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019b8:	2b3e      	cmp	r3, #62	; 0x3e
 80019ba:	d811      	bhi.n	80019e0 <HAL_PCD_EP_DB_Transmit+0x202>
 80019bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019be:	085b      	lsrs	r3, r3, #1
 80019c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80019c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d002      	beq.n	80019d2 <HAL_PCD_EP_DB_Transmit+0x1f4>
 80019cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ce:	3301      	adds	r3, #1
 80019d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80019d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	029b      	lsls	r3, r3, #10
 80019d8:	b29a      	uxth	r2, r3
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	801a      	strh	r2, [r3, #0]
 80019de:	e032      	b.n	8001a46 <HAL_PCD_EP_DB_Transmit+0x268>
 80019e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019e2:	095b      	lsrs	r3, r3, #5
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80019e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019e8:	f003 031f 	and.w	r3, r3, #31
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d102      	bne.n	80019f6 <HAL_PCD_EP_DB_Transmit+0x218>
 80019f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f2:	3b01      	subs	r3, #1
 80019f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80019f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	029b      	lsls	r3, r3, #10
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	801a      	strh	r2, [r3, #0]
 8001a0c:	e01b      	b.n	8001a46 <HAL_PCD_EP_DB_Transmit+0x268>
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	785b      	ldrb	r3, [r3, #1]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d117      	bne.n	8001a46 <HAL_PCD_EP_DB_Transmit+0x268>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	623b      	str	r3, [r7, #32]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	461a      	mov	r2, r3
 8001a28:	6a3b      	ldr	r3, [r7, #32]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	623b      	str	r3, [r7, #32]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	011a      	lsls	r2, r3, #4
 8001a34:	6a3b      	ldr	r3, [r7, #32]
 8001a36:	4413      	add	r3, r2
 8001a38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001a3c:	61fb      	str	r3, [r7, #28]
 8001a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	6959      	ldr	r1, [r3, #20]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	891a      	ldrh	r2, [r3, #8]
 8001a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	f002 fe61 	bl	800471c <USB_WritePMA>
 8001a5a:	e130      	b.n	8001cbe <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	461a      	mov	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	4413      	add	r3, r2
 8001a70:	3306      	adds	r3, #6
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	4413      	add	r3, r2
 8001a7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a84:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	699a      	ldr	r2, [r3, #24]
 8001a8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d306      	bcc.n	8001a9e <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	699a      	ldr	r2, [r3, #24]
 8001a94:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a96:	1ad2      	subs	r2, r2, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	619a      	str	r2, [r3, #24]
 8001a9c:	e002      	b.n	8001aa4 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d12c      	bne.n	8001b06 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f004 fc17 	bl	80062e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001ab8:	88fb      	ldrh	r3, [r7, #6]
 8001aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f040 80fd 	bne.w	8001cbe <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ade:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	441a      	add	r2, r3
 8001aee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001af0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001af4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001af8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	8013      	strh	r3, [r2, #0]
 8001b04:	e0db      	b.n	8001cbe <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001b06:	88fb      	ldrh	r3, [r7, #6]
 8001b08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d11f      	bne.n	8001b50 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b2a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	441a      	add	r2, r3
 8001b3a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001b3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	f040 80b1 	bne.w	8001cbe <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	695a      	ldr	r2, [r3, #20]
 8001b60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b62:	441a      	add	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	69da      	ldr	r2, [r3, #28]
 8001b6c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b6e:	441a      	add	r2, r3
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	6a1a      	ldr	r2, [r3, #32]
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d309      	bcc.n	8001b94 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	6a1a      	ldr	r2, [r3, #32]
 8001b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b8c:	1ad2      	subs	r2, r2, r3
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	621a      	str	r2, [r3, #32]
 8001b92:	e014      	b.n	8001bbe <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d106      	bne.n	8001baa <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8001b9c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b9e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ba8:	e009      	b.n	8001bbe <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	637b      	str	r3, [r7, #52]	; 0x34
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	785b      	ldrb	r3, [r3, #1]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d155      	bne.n	8001c78 <HAL_PCD_EP_DB_Transmit+0x49a>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	647b      	str	r3, [r7, #68]	; 0x44
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	461a      	mov	r2, r3
 8001bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001be0:	4413      	add	r3, r2
 8001be2:	647b      	str	r3, [r7, #68]	; 0x44
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	011a      	lsls	r2, r3, #4
 8001bea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bec:	4413      	add	r3, r2
 8001bee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001bf2:	643b      	str	r3, [r7, #64]	; 0x40
 8001bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d112      	bne.n	8001c20 <HAL_PCD_EP_DB_Transmit+0x442>
 8001bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c08:	801a      	strh	r2, [r3, #0]
 8001c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c1c:	801a      	strh	r2, [r3, #0]
 8001c1e:	e044      	b.n	8001caa <HAL_PCD_EP_DB_Transmit+0x4cc>
 8001c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c22:	2b3e      	cmp	r3, #62	; 0x3e
 8001c24:	d811      	bhi.n	8001c4a <HAL_PCD_EP_DB_Transmit+0x46c>
 8001c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c28:	085b      	lsrs	r3, r3, #1
 8001c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d002      	beq.n	8001c3c <HAL_PCD_EP_DB_Transmit+0x45e>
 8001c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c38:	3301      	adds	r3, #1
 8001c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	029b      	lsls	r3, r3, #10
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c46:	801a      	strh	r2, [r3, #0]
 8001c48:	e02f      	b.n	8001caa <HAL_PCD_EP_DB_Transmit+0x4cc>
 8001c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c4c:	095b      	lsrs	r3, r3, #5
 8001c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c52:	f003 031f 	and.w	r3, r3, #31
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d102      	bne.n	8001c60 <HAL_PCD_EP_DB_Transmit+0x482>
 8001c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	029b      	lsls	r3, r3, #10
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c74:	801a      	strh	r2, [r3, #0]
 8001c76:	e018      	b.n	8001caa <HAL_PCD_EP_DB_Transmit+0x4cc>
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	785b      	ldrb	r3, [r3, #1]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d114      	bne.n	8001caa <HAL_PCD_EP_DB_Transmit+0x4cc>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c8e:	4413      	add	r3, r2
 8001c90:	637b      	str	r3, [r7, #52]	; 0x34
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	011a      	lsls	r2, r3, #4
 8001c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ca0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6818      	ldr	r0, [r3, #0]
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	6959      	ldr	r1, [r3, #20]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	895a      	ldrh	r2, [r3, #10]
 8001cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	f002 fd2f 	bl	800471c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001cd8:	823b      	strh	r3, [r7, #16]
 8001cda:	8a3b      	ldrh	r3, [r7, #16]
 8001cdc:	f083 0310 	eor.w	r3, r3, #16
 8001ce0:	823b      	strh	r3, [r7, #16]
 8001ce2:	8a3b      	ldrh	r3, [r7, #16]
 8001ce4:	f083 0320 	eor.w	r3, r3, #32
 8001ce8:	823b      	strh	r3, [r7, #16]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	441a      	add	r2, r3
 8001cf8:	8a3b      	ldrh	r3, [r7, #16]
 8001cfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3748      	adds	r7, #72	; 0x48
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b087      	sub	sp, #28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	460b      	mov	r3, r1
 8001d24:	817b      	strh	r3, [r7, #10]
 8001d26:	4613      	mov	r3, r2
 8001d28:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001d2a:	897b      	ldrh	r3, [r7, #10]
 8001d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00b      	beq.n	8001d4e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d36:	897b      	ldrh	r3, [r7, #10]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	1c5a      	adds	r2, r3, #1
 8001d3e:	4613      	mov	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	4413      	add	r3, r2
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	e009      	b.n	8001d62 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d4e:	897a      	ldrh	r2, [r7, #10]
 8001d50:	4613      	mov	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	4413      	add	r3, r2
 8001d60:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001d62:	893b      	ldrh	r3, [r7, #8]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d107      	bne.n	8001d78 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	80da      	strh	r2, [r3, #6]
 8001d76:	e00b      	b.n	8001d90 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	0c1b      	lsrs	r3, r3, #16
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	371c      	adds	r7, #28
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr

08001d9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e26c      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 8087 	beq.w	8001eca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dbc:	4b92      	ldr	r3, [pc, #584]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 030c 	and.w	r3, r3, #12
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d00c      	beq.n	8001de2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dc8:	4b8f      	ldr	r3, [pc, #572]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d112      	bne.n	8001dfa <HAL_RCC_OscConfig+0x5e>
 8001dd4:	4b8c      	ldr	r3, [pc, #560]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de0:	d10b      	bne.n	8001dfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de2:	4b89      	ldr	r3, [pc, #548]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d06c      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x12c>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d168      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e246      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e02:	d106      	bne.n	8001e12 <HAL_RCC_OscConfig+0x76>
 8001e04:	4b80      	ldr	r3, [pc, #512]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a7f      	ldr	r2, [pc, #508]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	e02e      	b.n	8001e70 <HAL_RCC_OscConfig+0xd4>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10c      	bne.n	8001e34 <HAL_RCC_OscConfig+0x98>
 8001e1a:	4b7b      	ldr	r3, [pc, #492]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a7a      	ldr	r2, [pc, #488]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	4b78      	ldr	r3, [pc, #480]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a77      	ldr	r2, [pc, #476]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	e01d      	b.n	8001e70 <HAL_RCC_OscConfig+0xd4>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e3c:	d10c      	bne.n	8001e58 <HAL_RCC_OscConfig+0xbc>
 8001e3e:	4b72      	ldr	r3, [pc, #456]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a71      	ldr	r2, [pc, #452]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	4b6f      	ldr	r3, [pc, #444]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a6e      	ldr	r2, [pc, #440]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	e00b      	b.n	8001e70 <HAL_RCC_OscConfig+0xd4>
 8001e58:	4b6b      	ldr	r3, [pc, #428]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a6a      	ldr	r2, [pc, #424]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e62:	6013      	str	r3, [r2, #0]
 8001e64:	4b68      	ldr	r3, [pc, #416]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a67      	ldr	r2, [pc, #412]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d013      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e78:	f7fe faf6 	bl	8000468 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e80:	f7fe faf2 	bl	8000468 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b64      	cmp	r3, #100	; 0x64
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e1fa      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e92:	4b5d      	ldr	r3, [pc, #372]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0xe4>
 8001e9e:	e014      	b.n	8001eca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7fe fae2 	bl	8000468 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea8:	f7fe fade 	bl	8000468 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b64      	cmp	r3, #100	; 0x64
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e1e6      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eba:	4b53      	ldr	r3, [pc, #332]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f0      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x10c>
 8001ec6:	e000      	b.n	8001eca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d063      	beq.n	8001f9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ed6:	4b4c      	ldr	r3, [pc, #304]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 030c 	and.w	r3, r3, #12
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00b      	beq.n	8001efa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ee2:	4b49      	ldr	r3, [pc, #292]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d11c      	bne.n	8001f28 <HAL_RCC_OscConfig+0x18c>
 8001eee:	4b46      	ldr	r3, [pc, #280]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d116      	bne.n	8001f28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001efa:	4b43      	ldr	r3, [pc, #268]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d005      	beq.n	8001f12 <HAL_RCC_OscConfig+0x176>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d001      	beq.n	8001f12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e1ba      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f12:	4b3d      	ldr	r3, [pc, #244]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4939      	ldr	r1, [pc, #228]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f26:	e03a      	b.n	8001f9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d020      	beq.n	8001f72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f30:	4b36      	ldr	r3, [pc, #216]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f36:	f7fe fa97 	bl	8000468 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f3e:	f7fe fa93 	bl	8000468 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e19b      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f50:	4b2d      	ldr	r3, [pc, #180]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0f0      	beq.n	8001f3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5c:	4b2a      	ldr	r3, [pc, #168]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	4927      	ldr	r1, [pc, #156]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	600b      	str	r3, [r1, #0]
 8001f70:	e015      	b.n	8001f9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f72:	4b26      	ldr	r3, [pc, #152]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7fe fa76 	bl	8000468 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f80:	f7fe fa72 	bl	8000468 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e17a      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f92:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d03a      	beq.n	8002020 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d019      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fb2:	4b17      	ldr	r3, [pc, #92]	; (8002010 <HAL_RCC_OscConfig+0x274>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb8:	f7fe fa56 	bl	8000468 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc0:	f7fe fa52 	bl	8000468 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e15a      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fde:	2001      	movs	r0, #1
 8001fe0:	f000 faa8 	bl	8002534 <RCC_Delay>
 8001fe4:	e01c      	b.n	8002020 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <HAL_RCC_OscConfig+0x274>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fec:	f7fe fa3c 	bl	8000468 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff2:	e00f      	b.n	8002014 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff4:	f7fe fa38 	bl	8000468 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d908      	bls.n	8002014 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e140      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000
 800200c:	42420000 	.word	0x42420000
 8002010:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002014:	4b9e      	ldr	r3, [pc, #632]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1e9      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 80a6 	beq.w	800217a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800202e:	2300      	movs	r3, #0
 8002030:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002032:	4b97      	ldr	r3, [pc, #604]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10d      	bne.n	800205a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800203e:	4b94      	ldr	r3, [pc, #592]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	4a93      	ldr	r2, [pc, #588]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 8002044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002048:	61d3      	str	r3, [r2, #28]
 800204a:	4b91      	ldr	r3, [pc, #580]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002056:	2301      	movs	r3, #1
 8002058:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205a:	4b8e      	ldr	r3, [pc, #568]	; (8002294 <HAL_RCC_OscConfig+0x4f8>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002062:	2b00      	cmp	r3, #0
 8002064:	d118      	bne.n	8002098 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002066:	4b8b      	ldr	r3, [pc, #556]	; (8002294 <HAL_RCC_OscConfig+0x4f8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a8a      	ldr	r2, [pc, #552]	; (8002294 <HAL_RCC_OscConfig+0x4f8>)
 800206c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002072:	f7fe f9f9 	bl	8000468 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207a:	f7fe f9f5 	bl	8000468 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b64      	cmp	r3, #100	; 0x64
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e0fd      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208c:	4b81      	ldr	r3, [pc, #516]	; (8002294 <HAL_RCC_OscConfig+0x4f8>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0f0      	beq.n	800207a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d106      	bne.n	80020ae <HAL_RCC_OscConfig+0x312>
 80020a0:	4b7b      	ldr	r3, [pc, #492]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	4a7a      	ldr	r2, [pc, #488]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	6213      	str	r3, [r2, #32]
 80020ac:	e02d      	b.n	800210a <HAL_RCC_OscConfig+0x36e>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10c      	bne.n	80020d0 <HAL_RCC_OscConfig+0x334>
 80020b6:	4b76      	ldr	r3, [pc, #472]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	4a75      	ldr	r2, [pc, #468]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80020bc:	f023 0301 	bic.w	r3, r3, #1
 80020c0:	6213      	str	r3, [r2, #32]
 80020c2:	4b73      	ldr	r3, [pc, #460]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	4a72      	ldr	r2, [pc, #456]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80020c8:	f023 0304 	bic.w	r3, r3, #4
 80020cc:	6213      	str	r3, [r2, #32]
 80020ce:	e01c      	b.n	800210a <HAL_RCC_OscConfig+0x36e>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	2b05      	cmp	r3, #5
 80020d6:	d10c      	bne.n	80020f2 <HAL_RCC_OscConfig+0x356>
 80020d8:	4b6d      	ldr	r3, [pc, #436]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	4a6c      	ldr	r2, [pc, #432]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80020de:	f043 0304 	orr.w	r3, r3, #4
 80020e2:	6213      	str	r3, [r2, #32]
 80020e4:	4b6a      	ldr	r3, [pc, #424]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	4a69      	ldr	r2, [pc, #420]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	6213      	str	r3, [r2, #32]
 80020f0:	e00b      	b.n	800210a <HAL_RCC_OscConfig+0x36e>
 80020f2:	4b67      	ldr	r3, [pc, #412]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	4a66      	ldr	r2, [pc, #408]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80020f8:	f023 0301 	bic.w	r3, r3, #1
 80020fc:	6213      	str	r3, [r2, #32]
 80020fe:	4b64      	ldr	r3, [pc, #400]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	4a63      	ldr	r2, [pc, #396]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 8002104:	f023 0304 	bic.w	r3, r3, #4
 8002108:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d015      	beq.n	800213e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002112:	f7fe f9a9 	bl	8000468 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002118:	e00a      	b.n	8002130 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800211a:	f7fe f9a5 	bl	8000468 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	f241 3288 	movw	r2, #5000	; 0x1388
 8002128:	4293      	cmp	r3, r2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e0ab      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002130:	4b57      	ldr	r3, [pc, #348]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0ee      	beq.n	800211a <HAL_RCC_OscConfig+0x37e>
 800213c:	e014      	b.n	8002168 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213e:	f7fe f993 	bl	8000468 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002144:	e00a      	b.n	800215c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002146:	f7fe f98f 	bl	8000468 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	f241 3288 	movw	r2, #5000	; 0x1388
 8002154:	4293      	cmp	r3, r2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e095      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800215c:	4b4c      	ldr	r3, [pc, #304]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1ee      	bne.n	8002146 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002168:	7dfb      	ldrb	r3, [r7, #23]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d105      	bne.n	800217a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800216e:	4b48      	ldr	r3, [pc, #288]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	4a47      	ldr	r2, [pc, #284]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 8002174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002178:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 8081 	beq.w	8002286 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002184:	4b42      	ldr	r3, [pc, #264]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 030c 	and.w	r3, r3, #12
 800218c:	2b08      	cmp	r3, #8
 800218e:	d061      	beq.n	8002254 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	69db      	ldr	r3, [r3, #28]
 8002194:	2b02      	cmp	r3, #2
 8002196:	d146      	bne.n	8002226 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002198:	4b3f      	ldr	r3, [pc, #252]	; (8002298 <HAL_RCC_OscConfig+0x4fc>)
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219e:	f7fe f963 	bl	8000468 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a6:	f7fe f95f 	bl	8000468 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e067      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b8:	4b35      	ldr	r3, [pc, #212]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1f0      	bne.n	80021a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021cc:	d108      	bne.n	80021e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021ce:	4b30      	ldr	r3, [pc, #192]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	492d      	ldr	r1, [pc, #180]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021e0:	4b2b      	ldr	r3, [pc, #172]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a19      	ldr	r1, [r3, #32]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	430b      	orrs	r3, r1
 80021f2:	4927      	ldr	r1, [pc, #156]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021f8:	4b27      	ldr	r3, [pc, #156]	; (8002298 <HAL_RCC_OscConfig+0x4fc>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fe:	f7fe f933 	bl	8000468 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002206:	f7fe f92f 	bl	8000468 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e037      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002218:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0f0      	beq.n	8002206 <HAL_RCC_OscConfig+0x46a>
 8002224:	e02f      	b.n	8002286 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002226:	4b1c      	ldr	r3, [pc, #112]	; (8002298 <HAL_RCC_OscConfig+0x4fc>)
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222c:	f7fe f91c 	bl	8000468 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002234:	f7fe f918 	bl	8000468 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e020      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002246:	4b12      	ldr	r3, [pc, #72]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f0      	bne.n	8002234 <HAL_RCC_OscConfig+0x498>
 8002252:	e018      	b.n	8002286 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e013      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002260:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	429a      	cmp	r2, r3
 8002272:	d106      	bne.n	8002282 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227e:	429a      	cmp	r2, r3
 8002280:	d001      	beq.n	8002286 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40021000 	.word	0x40021000
 8002294:	40007000 	.word	0x40007000
 8002298:	42420060 	.word	0x42420060

0800229c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0d0      	b.n	8002452 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022b0:	4b6a      	ldr	r3, [pc, #424]	; (800245c <HAL_RCC_ClockConfig+0x1c0>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d910      	bls.n	80022e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022be:	4b67      	ldr	r3, [pc, #412]	; (800245c <HAL_RCC_ClockConfig+0x1c0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 0207 	bic.w	r2, r3, #7
 80022c6:	4965      	ldr	r1, [pc, #404]	; (800245c <HAL_RCC_ClockConfig+0x1c0>)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ce:	4b63      	ldr	r3, [pc, #396]	; (800245c <HAL_RCC_ClockConfig+0x1c0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d001      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e0b8      	b.n	8002452 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d020      	beq.n	800232e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d005      	beq.n	8002304 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022f8:	4b59      	ldr	r3, [pc, #356]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	4a58      	ldr	r2, [pc, #352]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 80022fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002302:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002310:	4b53      	ldr	r3, [pc, #332]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	4a52      	ldr	r2, [pc, #328]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 8002316:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800231a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800231c:	4b50      	ldr	r3, [pc, #320]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	494d      	ldr	r1, [pc, #308]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	4313      	orrs	r3, r2
 800232c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d040      	beq.n	80023bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d107      	bne.n	8002352 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002342:	4b47      	ldr	r3, [pc, #284]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d115      	bne.n	800237a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e07f      	b.n	8002452 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d107      	bne.n	800236a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800235a:	4b41      	ldr	r3, [pc, #260]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d109      	bne.n	800237a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e073      	b.n	8002452 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236a:	4b3d      	ldr	r3, [pc, #244]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e06b      	b.n	8002452 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800237a:	4b39      	ldr	r3, [pc, #228]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f023 0203 	bic.w	r2, r3, #3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	4936      	ldr	r1, [pc, #216]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 8002388:	4313      	orrs	r3, r2
 800238a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800238c:	f7fe f86c 	bl	8000468 <HAL_GetTick>
 8002390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002392:	e00a      	b.n	80023aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002394:	f7fe f868 	bl	8000468 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e053      	b.n	8002452 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023aa:	4b2d      	ldr	r3, [pc, #180]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 020c 	and.w	r2, r3, #12
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d1eb      	bne.n	8002394 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023bc:	4b27      	ldr	r3, [pc, #156]	; (800245c <HAL_RCC_ClockConfig+0x1c0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d210      	bcs.n	80023ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	4b24      	ldr	r3, [pc, #144]	; (800245c <HAL_RCC_ClockConfig+0x1c0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 0207 	bic.w	r2, r3, #7
 80023d2:	4922      	ldr	r1, [pc, #136]	; (800245c <HAL_RCC_ClockConfig+0x1c0>)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023da:	4b20      	ldr	r3, [pc, #128]	; (800245c <HAL_RCC_ClockConfig+0x1c0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e032      	b.n	8002452 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d008      	beq.n	800240a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023f8:	4b19      	ldr	r3, [pc, #100]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	4916      	ldr	r1, [pc, #88]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 8002406:	4313      	orrs	r3, r2
 8002408:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b00      	cmp	r3, #0
 8002414:	d009      	beq.n	800242a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002416:	4b12      	ldr	r3, [pc, #72]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	490e      	ldr	r1, [pc, #56]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 8002426:	4313      	orrs	r3, r2
 8002428:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800242a:	f000 f821 	bl	8002470 <HAL_RCC_GetSysClockFreq>
 800242e:	4601      	mov	r1, r0
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	091b      	lsrs	r3, r3, #4
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <HAL_RCC_ClockConfig+0x1c8>)
 800243c:	5cd3      	ldrb	r3, [r2, r3]
 800243e:	fa21 f303 	lsr.w	r3, r1, r3
 8002442:	4a09      	ldr	r2, [pc, #36]	; (8002468 <HAL_RCC_ClockConfig+0x1cc>)
 8002444:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <HAL_RCC_ClockConfig+0x1d0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7fd ffca 	bl	80003e4 <HAL_InitTick>

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40022000 	.word	0x40022000
 8002460:	40021000 	.word	0x40021000
 8002464:	08006860 	.word	0x08006860
 8002468:	20000000 	.word	0x20000000
 800246c:	20000004 	.word	0x20000004

08002470 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002470:	b490      	push	{r4, r7}
 8002472:	b08a      	sub	sp, #40	; 0x28
 8002474:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002476:	4b2a      	ldr	r3, [pc, #168]	; (8002520 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002478:	1d3c      	adds	r4, r7, #4
 800247a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800247c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002480:	4b28      	ldr	r3, [pc, #160]	; (8002524 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002486:	2300      	movs	r3, #0
 8002488:	61fb      	str	r3, [r7, #28]
 800248a:	2300      	movs	r3, #0
 800248c:	61bb      	str	r3, [r7, #24]
 800248e:	2300      	movs	r3, #0
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002496:	2300      	movs	r3, #0
 8002498:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800249a:	4b23      	ldr	r3, [pc, #140]	; (8002528 <HAL_RCC_GetSysClockFreq+0xb8>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d002      	beq.n	80024b0 <HAL_RCC_GetSysClockFreq+0x40>
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d003      	beq.n	80024b6 <HAL_RCC_GetSysClockFreq+0x46>
 80024ae:	e02d      	b.n	800250c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024b0:	4b1e      	ldr	r3, [pc, #120]	; (800252c <HAL_RCC_GetSysClockFreq+0xbc>)
 80024b2:	623b      	str	r3, [r7, #32]
      break;
 80024b4:	e02d      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	0c9b      	lsrs	r3, r3, #18
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024c2:	4413      	add	r3, r2
 80024c4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80024c8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d013      	beq.n	80024fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024d4:	4b14      	ldr	r3, [pc, #80]	; (8002528 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	0c5b      	lsrs	r3, r3, #17
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024e2:	4413      	add	r3, r2
 80024e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80024e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	4a0f      	ldr	r2, [pc, #60]	; (800252c <HAL_RCC_GetSysClockFreq+0xbc>)
 80024ee:	fb02 f203 	mul.w	r2, r2, r3
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24
 80024fa:	e004      	b.n	8002506 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	4a0c      	ldr	r2, [pc, #48]	; (8002530 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002500:	fb02 f303 	mul.w	r3, r2, r3
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	623b      	str	r3, [r7, #32]
      break;
 800250a:	e002      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800250c:	4b07      	ldr	r3, [pc, #28]	; (800252c <HAL_RCC_GetSysClockFreq+0xbc>)
 800250e:	623b      	str	r3, [r7, #32]
      break;
 8002510:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002512:	6a3b      	ldr	r3, [r7, #32]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3728      	adds	r7, #40	; 0x28
 8002518:	46bd      	mov	sp, r7
 800251a:	bc90      	pop	{r4, r7}
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	08006804 	.word	0x08006804
 8002524:	08006814 	.word	0x08006814
 8002528:	40021000 	.word	0x40021000
 800252c:	007a1200 	.word	0x007a1200
 8002530:	003d0900 	.word	0x003d0900

08002534 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800253c:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <RCC_Delay+0x34>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a0a      	ldr	r2, [pc, #40]	; (800256c <RCC_Delay+0x38>)
 8002542:	fba2 2303 	umull	r2, r3, r2, r3
 8002546:	0a5b      	lsrs	r3, r3, #9
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	fb02 f303 	mul.w	r3, r2, r3
 800254e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002550:	bf00      	nop
  }
  while (Delay --);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1e5a      	subs	r2, r3, #1
 8002556:	60fa      	str	r2, [r7, #12]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1f9      	bne.n	8002550 <RCC_Delay+0x1c>
}
 800255c:	bf00      	nop
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	20000000 	.word	0x20000000
 800256c:	10624dd3 	.word	0x10624dd3

08002570 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b00      	cmp	r3, #0
 800258a:	d07d      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800258c:	2300      	movs	r3, #0
 800258e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002590:	4b4f      	ldr	r3, [pc, #316]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10d      	bne.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800259c:	4b4c      	ldr	r3, [pc, #304]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	4a4b      	ldr	r2, [pc, #300]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a6:	61d3      	str	r3, [r2, #28]
 80025a8:	4b49      	ldr	r3, [pc, #292]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025b4:	2301      	movs	r3, #1
 80025b6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b8:	4b46      	ldr	r3, [pc, #280]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d118      	bne.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025c4:	4b43      	ldr	r3, [pc, #268]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a42      	ldr	r2, [pc, #264]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025d0:	f7fd ff4a 	bl	8000468 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d6:	e008      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025d8:	f7fd ff46 	bl	8000468 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b64      	cmp	r3, #100	; 0x64
 80025e4:	d901      	bls.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e06d      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ea:	4b3a      	ldr	r3, [pc, #232]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0f0      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025f6:	4b36      	ldr	r3, [pc, #216]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d02e      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	429a      	cmp	r2, r3
 8002612:	d027      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002614:	4b2e      	ldr	r3, [pc, #184]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800261c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800261e:	4b2e      	ldr	r3, [pc, #184]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002620:	2201      	movs	r2, #1
 8002622:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002624:	4b2c      	ldr	r3, [pc, #176]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800262a:	4a29      	ldr	r2, [pc, #164]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d014      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263a:	f7fd ff15 	bl	8000468 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002640:	e00a      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002642:	f7fd ff11 	bl	8000468 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002650:	4293      	cmp	r3, r2
 8002652:	d901      	bls.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e036      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002658:	4b1d      	ldr	r3, [pc, #116]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0ee      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002664:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	4917      	ldr	r1, [pc, #92]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002672:	4313      	orrs	r3, r2
 8002674:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002676:	7dfb      	ldrb	r3, [r7, #23]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d105      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800267c:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	4a13      	ldr	r2, [pc, #76]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002686:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d008      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002694:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	490b      	ldr	r1, [pc, #44]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d008      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026b2:	4b07      	ldr	r3, [pc, #28]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	4904      	ldr	r1, [pc, #16]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000
 80026d4:	40007000 	.word	0x40007000
 80026d8:	42420440 	.word	0x42420440

080026dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80026dc:	b084      	sub	sp, #16
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	f107 0014 	add.w	r0, r7, #20
 80026ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	b004      	add	sp, #16
 80026fa:	4770      	bx	lr

080026fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800270c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002710:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	b29a      	uxth	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr

08002728 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002730:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002734:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800273c:	b29a      	uxth	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	b29b      	uxth	r3, r3
 8002742:	43db      	mvns	r3, r3
 8002744:	b29b      	uxth	r3, r3
 8002746:	4013      	ands	r3, r2
 8002748:	b29a      	uxth	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3714      	adds	r7, #20
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr

0800275c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	460b      	mov	r3, r1
 8002766:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr

08002774 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002774:	b084      	sub	sp, #16
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
 800277e:	f107 0014 	add.w	r0, r7, #20
 8002782:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	b004      	add	sp, #16
 80027b2:	4770      	bx	lr

080027b4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b09b      	sub	sp, #108	; 0x6c
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80027d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027da:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	78db      	ldrb	r3, [r3, #3]
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	d81f      	bhi.n	8002826 <USB_ActivateEndpoint+0x72>
 80027e6:	a201      	add	r2, pc, #4	; (adr r2, 80027ec <USB_ActivateEndpoint+0x38>)
 80027e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ec:	080027fd 	.word	0x080027fd
 80027f0:	08002819 	.word	0x08002819
 80027f4:	0800282f 	.word	0x0800282f
 80027f8:	0800280b 	.word	0x0800280b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80027fc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002800:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002804:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002808:	e012      	b.n	8002830 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800280a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800280e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002812:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002816:	e00b      	b.n	8002830 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002818:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800281c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002820:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002824:	e004      	b.n	8002830 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800282c:	e000      	b.n	8002830 <USB_ActivateEndpoint+0x7c>
      break;
 800282e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	441a      	add	r2, r3
 800283a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800283e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002842:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800284a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800284e:	b29b      	uxth	r3, r3
 8002850:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	b29b      	uxth	r3, r3
 8002860:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002868:	b29a      	uxth	r2, r3
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	b29b      	uxth	r3, r3
 8002870:	4313      	orrs	r3, r2
 8002872:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	441a      	add	r2, r3
 8002880:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800288c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002894:	b29b      	uxth	r3, r3
 8002896:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	7b1b      	ldrb	r3, [r3, #12]
 800289c:	2b00      	cmp	r3, #0
 800289e:	f040 8149 	bne.w	8002b34 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	785b      	ldrb	r3, [r3, #1]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 8084 	beq.w	80029b4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	617b      	str	r3, [r7, #20]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	461a      	mov	r2, r3
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	4413      	add	r3, r2
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	011a      	lsls	r2, r3, #4
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	88db      	ldrh	r3, [r3, #6]
 80028d4:	085b      	lsrs	r3, r3, #1
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	b29a      	uxth	r2, r3
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	881b      	ldrh	r3, [r3, #0]
 80028ec:	81fb      	strh	r3, [r7, #14]
 80028ee:	89fb      	ldrh	r3, [r7, #14]
 80028f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d01b      	beq.n	8002930 <USB_ActivateEndpoint+0x17c>
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	b29b      	uxth	r3, r3
 8002906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800290a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800290e:	81bb      	strh	r3, [r7, #12]
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	441a      	add	r2, r3
 800291a:	89bb      	ldrh	r3, [r7, #12]
 800291c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002928:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800292c:	b29b      	uxth	r3, r3
 800292e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	78db      	ldrb	r3, [r3, #3]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d020      	beq.n	800297a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	b29b      	uxth	r3, r3
 8002946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800294a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800294e:	813b      	strh	r3, [r7, #8]
 8002950:	893b      	ldrh	r3, [r7, #8]
 8002952:	f083 0320 	eor.w	r3, r3, #32
 8002956:	813b      	strh	r3, [r7, #8]
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	441a      	add	r2, r3
 8002962:	893b      	ldrh	r3, [r7, #8]
 8002964:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002968:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800296c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002974:	b29b      	uxth	r3, r3
 8002976:	8013      	strh	r3, [r2, #0]
 8002978:	e27f      	b.n	8002e7a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	b29b      	uxth	r3, r3
 8002988:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800298c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002990:	817b      	strh	r3, [r7, #10]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	441a      	add	r2, r3
 800299c:	897b      	ldrh	r3, [r7, #10]
 800299e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	8013      	strh	r3, [r2, #0]
 80029b2:	e262      	b.n	8002e7a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029be:	b29b      	uxth	r3, r3
 80029c0:	461a      	mov	r2, r3
 80029c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c4:	4413      	add	r3, r2
 80029c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	011a      	lsls	r2, r3, #4
 80029ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d0:	4413      	add	r3, r2
 80029d2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80029d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	88db      	ldrh	r3, [r3, #6]
 80029dc:	085b      	lsrs	r3, r3, #1
 80029de:	b29b      	uxth	r3, r3
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	461a      	mov	r2, r3
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	4413      	add	r3, r2
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	011a      	lsls	r2, r3, #4
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	4413      	add	r3, r2
 8002a06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a0a:	623b      	str	r3, [r7, #32]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d112      	bne.n	8002a3a <USB_ActivateEndpoint+0x286>
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	881b      	ldrh	r3, [r3, #0]
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	801a      	strh	r2, [r3, #0]
 8002a24:	6a3b      	ldr	r3, [r7, #32]
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	801a      	strh	r2, [r3, #0]
 8002a38:	e02f      	b.n	8002a9a <USB_ActivateEndpoint+0x2e6>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	2b3e      	cmp	r3, #62	; 0x3e
 8002a40:	d813      	bhi.n	8002a6a <USB_ActivateEndpoint+0x2b6>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	085b      	lsrs	r3, r3, #1
 8002a48:	663b      	str	r3, [r7, #96]	; 0x60
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d002      	beq.n	8002a5c <USB_ActivateEndpoint+0x2a8>
 8002a56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a58:	3301      	adds	r3, #1
 8002a5a:	663b      	str	r3, [r7, #96]	; 0x60
 8002a5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	029b      	lsls	r3, r3, #10
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	801a      	strh	r2, [r3, #0]
 8002a68:	e017      	b.n	8002a9a <USB_ActivateEndpoint+0x2e6>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	095b      	lsrs	r3, r3, #5
 8002a70:	663b      	str	r3, [r7, #96]	; 0x60
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f003 031f 	and.w	r3, r3, #31
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d102      	bne.n	8002a84 <USB_ActivateEndpoint+0x2d0>
 8002a7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a80:	3b01      	subs	r3, #1
 8002a82:	663b      	str	r3, [r7, #96]	; 0x60
 8002a84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	029b      	lsls	r3, r3, #10
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	83fb      	strh	r3, [r7, #30]
 8002aa8:	8bfb      	ldrh	r3, [r7, #30]
 8002aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d01b      	beq.n	8002aea <USB_ActivateEndpoint+0x336>
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac8:	83bb      	strh	r3, [r7, #28]
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	441a      	add	r2, r3
 8002ad4:	8bbb      	ldrh	r3, [r7, #28]
 8002ad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ade:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b00:	837b      	strh	r3, [r7, #26]
 8002b02:	8b7b      	ldrh	r3, [r7, #26]
 8002b04:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002b08:	837b      	strh	r3, [r7, #26]
 8002b0a:	8b7b      	ldrh	r3, [r7, #26]
 8002b0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b10:	837b      	strh	r3, [r7, #26]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	441a      	add	r2, r3
 8002b1c:	8b7b      	ldrh	r3, [r7, #26]
 8002b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	8013      	strh	r3, [r2, #0]
 8002b32:	e1a2      	b.n	8002e7a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b4a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	441a      	add	r2, r3
 8002b58:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002b5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b64:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b80:	4413      	add	r3, r2
 8002b82:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	011a      	lsls	r2, r3, #4
 8002b8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b92:	657b      	str	r3, [r7, #84]	; 0x54
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	891b      	ldrh	r3, [r3, #8]
 8002b98:	085b      	lsrs	r3, r3, #1
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ba2:	801a      	strh	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	653b      	str	r3, [r7, #80]	; 0x50
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bb4:	4413      	add	r3, r2
 8002bb6:	653b      	str	r3, [r7, #80]	; 0x50
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	011a      	lsls	r2, r3, #4
 8002bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	895b      	ldrh	r3, [r3, #10]
 8002bcc:	085b      	lsrs	r3, r3, #1
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bd6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	785b      	ldrb	r3, [r3, #1]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f040 8091 	bne.w	8002d04 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002bf0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d01b      	beq.n	8002c32 <USB_ActivateEndpoint+0x47e>
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	881b      	ldrh	r3, [r3, #0]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c10:	877b      	strh	r3, [r7, #58]	; 0x3a
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	441a      	add	r2, r3
 8002c1c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002c1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	873b      	strh	r3, [r7, #56]	; 0x38
 8002c40:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d01b      	beq.n	8002c82 <USB_ActivateEndpoint+0x4ce>
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4413      	add	r3, r2
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c60:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	441a      	add	r2, r3
 8002c6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	881b      	ldrh	r3, [r3, #0]
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c98:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002c9a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002c9c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002ca0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002ca2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002ca4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ca8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	441a      	add	r2, r3
 8002cb4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ce0:	867b      	strh	r3, [r7, #50]	; 0x32
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	441a      	add	r2, r3
 8002cec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002cee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	8013      	strh	r3, [r2, #0]
 8002d02:	e0ba      	b.n	8002e7a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002d14:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002d18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d01d      	beq.n	8002d5c <USB_ActivateEndpoint+0x5a8>
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d36:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	441a      	add	r2, r3
 8002d44:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002d48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002d6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d01d      	beq.n	8002db4 <USB_ActivateEndpoint+0x600>
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	441a      	add	r2, r3
 8002d9c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	78db      	ldrb	r3, [r3, #3]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d024      	beq.n	8002e06 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dd2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8002dd6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002dda:	f083 0320 	eor.w	r3, r3, #32
 8002dde:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	441a      	add	r2, r3
 8002dec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002df0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002df4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002df8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	8013      	strh	r3, [r2, #0]
 8002e04:	e01d      	b.n	8002e42 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	881b      	ldrh	r3, [r3, #0]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e1c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	441a      	add	r2, r3
 8002e2a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002e2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e58:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	441a      	add	r2, r3
 8002e64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002e66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8002e7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	376c      	adds	r7, #108	; 0x6c
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr

08002e88 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b08d      	sub	sp, #52	; 0x34
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	7b1b      	ldrb	r3, [r3, #12]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f040 808e 	bne.w	8002fb8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	785b      	ldrb	r3, [r3, #1]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d044      	beq.n	8002f2e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	81bb      	strh	r3, [r7, #12]
 8002eb2:	89bb      	ldrh	r3, [r7, #12]
 8002eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d01b      	beq.n	8002ef4 <USB_DeactivateEndpoint+0x6c>
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed2:	817b      	strh	r3, [r7, #10]
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	441a      	add	r2, r3
 8002ede:	897b      	ldrh	r3, [r7, #10]
 8002ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f0a:	813b      	strh	r3, [r7, #8]
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	441a      	add	r2, r3
 8002f16:	893b      	ldrh	r3, [r7, #8]
 8002f18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	8013      	strh	r3, [r2, #0]
 8002f2c:	e192      	b.n	8003254 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	827b      	strh	r3, [r7, #18]
 8002f3c:	8a7b      	ldrh	r3, [r7, #18]
 8002f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d01b      	beq.n	8002f7e <USB_DeactivateEndpoint+0xf6>
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	881b      	ldrh	r3, [r3, #0]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f5c:	823b      	strh	r3, [r7, #16]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	441a      	add	r2, r3
 8002f68:	8a3b      	ldrh	r3, [r7, #16]
 8002f6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f94:	81fb      	strh	r3, [r7, #14]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	441a      	add	r2, r3
 8002fa0:	89fb      	ldrh	r3, [r7, #14]
 8002fa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	8013      	strh	r3, [r2, #0]
 8002fb6:	e14d      	b.n	8003254 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	785b      	ldrb	r3, [r3, #1]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f040 80a5 	bne.w	800310c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	843b      	strh	r3, [r7, #32]
 8002fd0:	8c3b      	ldrh	r3, [r7, #32]
 8002fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d01b      	beq.n	8003012 <USB_DeactivateEndpoint+0x18a>
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff0:	83fb      	strh	r3, [r7, #30]
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	441a      	add	r2, r3
 8002ffc:	8bfb      	ldrh	r3, [r7, #30]
 8002ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003006:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800300a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800300e:	b29b      	uxth	r3, r3
 8003010:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	83bb      	strh	r3, [r7, #28]
 8003020:	8bbb      	ldrh	r3, [r7, #28]
 8003022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003026:	2b00      	cmp	r3, #0
 8003028:	d01b      	beq.n	8003062 <USB_DeactivateEndpoint+0x1da>
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	881b      	ldrh	r3, [r3, #0]
 8003036:	b29b      	uxth	r3, r3
 8003038:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800303c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003040:	837b      	strh	r3, [r7, #26]
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	441a      	add	r2, r3
 800304c:	8b7b      	ldrh	r3, [r7, #26]
 800304e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800305a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800305e:	b29b      	uxth	r3, r3
 8003060:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	b29b      	uxth	r3, r3
 8003070:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003078:	833b      	strh	r3, [r7, #24]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	441a      	add	r2, r3
 8003084:	8b3b      	ldrh	r3, [r7, #24]
 8003086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800308a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800308e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003092:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003096:	b29b      	uxth	r3, r3
 8003098:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b0:	82fb      	strh	r3, [r7, #22]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	441a      	add	r2, r3
 80030bc:	8afb      	ldrh	r3, [r7, #22]
 80030be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	881b      	ldrh	r3, [r3, #0]
 80030de:	b29b      	uxth	r3, r3
 80030e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030e8:	82bb      	strh	r3, [r7, #20]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	441a      	add	r2, r3
 80030f4:	8abb      	ldrh	r3, [r7, #20]
 80030f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003106:	b29b      	uxth	r3, r3
 8003108:	8013      	strh	r3, [r2, #0]
 800310a:	e0a3      	b.n	8003254 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800311a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800311c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d01b      	beq.n	800315c <USB_DeactivateEndpoint+0x2d4>
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	b29b      	uxth	r3, r3
 8003132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800313a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	441a      	add	r2, r3
 8003146:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003148:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800314c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003150:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003158:	b29b      	uxth	r3, r3
 800315a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	857b      	strh	r3, [r7, #42]	; 0x2a
 800316a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800316c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003170:	2b00      	cmp	r3, #0
 8003172:	d01b      	beq.n	80031ac <USB_DeactivateEndpoint+0x324>
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	881b      	ldrh	r3, [r3, #0]
 8003180:	b29b      	uxth	r3, r3
 8003182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800318a:	853b      	strh	r3, [r7, #40]	; 0x28
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	441a      	add	r2, r3
 8003196:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003198:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800319c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	441a      	add	r2, r3
 80031ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80031d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031fa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	441a      	add	r2, r3
 8003206:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003208:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800320c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003218:	b29b      	uxth	r3, r3
 800321a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	b29b      	uxth	r3, r3
 800322a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800322e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003232:	847b      	strh	r3, [r7, #34]	; 0x22
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	441a      	add	r2, r3
 800323e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003240:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003244:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003248:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800324c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003250:	b29b      	uxth	r3, r3
 8003252:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3734      	adds	r7, #52	; 0x34
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr

08003260 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b0c4      	sub	sp, #272	; 0x110
 8003264:	af00      	add	r7, sp, #0
 8003266:	1d3b      	adds	r3, r7, #4
 8003268:	6018      	str	r0, [r3, #0]
 800326a:	463b      	mov	r3, r7
 800326c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800326e:	463b      	mov	r3, r7
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	785b      	ldrb	r3, [r3, #1]
 8003274:	2b01      	cmp	r3, #1
 8003276:	f040 8557 	bne.w	8003d28 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800327a:	463b      	mov	r3, r7
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	699a      	ldr	r2, [r3, #24]
 8003280:	463b      	mov	r3, r7
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	429a      	cmp	r2, r3
 8003288:	d905      	bls.n	8003296 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800328a:	463b      	mov	r3, r7
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003294:	e004      	b.n	80032a0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003296:	463b      	mov	r3, r7
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80032a0:	463b      	mov	r3, r7
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	7b1b      	ldrb	r3, [r3, #12]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d12c      	bne.n	8003304 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80032aa:	463b      	mov	r3, r7
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6959      	ldr	r1, [r3, #20]
 80032b0:	463b      	mov	r3, r7
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	88da      	ldrh	r2, [r3, #6]
 80032b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	1d38      	adds	r0, r7, #4
 80032be:	6800      	ldr	r0, [r0, #0]
 80032c0:	f001 fa2c 	bl	800471c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80032c4:	1d3b      	adds	r3, r7, #4
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	617b      	str	r3, [r7, #20]
 80032ca:	1d3b      	adds	r3, r7, #4
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	461a      	mov	r2, r3
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	4413      	add	r3, r2
 80032da:	617b      	str	r3, [r7, #20]
 80032dc:	463b      	mov	r3, r7
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	011a      	lsls	r2, r3, #4
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	4413      	add	r3, r2
 80032e8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80032ec:	f107 0310 	add.w	r3, r7, #16
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	f107 0310 	add.w	r3, r7, #16
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	801a      	strh	r2, [r3, #0]
 8003300:	f000 bcdd 	b.w	8003cbe <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003304:	463b      	mov	r3, r7
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	78db      	ldrb	r3, [r3, #3]
 800330a:	2b02      	cmp	r3, #2
 800330c:	f040 8347 	bne.w	800399e <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003310:	463b      	mov	r3, r7
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6a1a      	ldr	r2, [r3, #32]
 8003316:	463b      	mov	r3, r7
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	429a      	cmp	r2, r3
 800331e:	f240 82eb 	bls.w	80038f8 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003322:	1d3b      	adds	r3, r7, #4
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	463b      	mov	r3, r7
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	b29b      	uxth	r3, r3
 8003334:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800333c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8003340:	1d3b      	adds	r3, r7, #4
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	463b      	mov	r3, r7
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	441a      	add	r2, r3
 800334e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003352:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003356:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800335a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800335e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003362:	b29b      	uxth	r3, r3
 8003364:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003366:	463b      	mov	r3, r7
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6a1a      	ldr	r2, [r3, #32]
 800336c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003370:	1ad2      	subs	r2, r2, r3
 8003372:	463b      	mov	r3, r7
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003378:	1d3b      	adds	r3, r7, #4
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	463b      	mov	r3, r7
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	b29b      	uxth	r3, r3
 800338a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 8159 	beq.w	8003646 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003394:	1d3b      	adds	r3, r7, #4
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	637b      	str	r3, [r7, #52]	; 0x34
 800339a:	463b      	mov	r3, r7
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	785b      	ldrb	r3, [r3, #1]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d164      	bne.n	800346e <USB_EPStartXfer+0x20e>
 80033a4:	1d3b      	adds	r3, r7, #4
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033aa:	1d3b      	adds	r3, r7, #4
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	461a      	mov	r2, r3
 80033b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b8:	4413      	add	r3, r2
 80033ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033bc:	463b      	mov	r3, r7
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	011a      	lsls	r2, r3, #4
 80033c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c6:	4413      	add	r3, r2
 80033c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80033cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d112      	bne.n	80033fc <USB_EPStartXfer+0x19c>
 80033d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	b29b      	uxth	r3, r3
 80033dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e4:	801a      	strh	r2, [r3, #0]
 80033e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f8:	801a      	strh	r2, [r3, #0]
 80033fa:	e054      	b.n	80034a6 <USB_EPStartXfer+0x246>
 80033fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003400:	2b3e      	cmp	r3, #62	; 0x3e
 8003402:	d817      	bhi.n	8003434 <USB_EPStartXfer+0x1d4>
 8003404:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003408:	085b      	lsrs	r3, r3, #1
 800340a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800340e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d004      	beq.n	8003424 <USB_EPStartXfer+0x1c4>
 800341a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800341e:	3301      	adds	r3, #1
 8003420:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003428:	b29b      	uxth	r3, r3
 800342a:	029b      	lsls	r3, r3, #10
 800342c:	b29a      	uxth	r2, r3
 800342e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003430:	801a      	strh	r2, [r3, #0]
 8003432:	e038      	b.n	80034a6 <USB_EPStartXfer+0x246>
 8003434:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003438:	095b      	lsrs	r3, r3, #5
 800343a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800343e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003442:	f003 031f 	and.w	r3, r3, #31
 8003446:	2b00      	cmp	r3, #0
 8003448:	d104      	bne.n	8003454 <USB_EPStartXfer+0x1f4>
 800344a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800344e:	3b01      	subs	r3, #1
 8003450:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003454:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003458:	b29b      	uxth	r3, r3
 800345a:	029b      	lsls	r3, r3, #10
 800345c:	b29b      	uxth	r3, r3
 800345e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003462:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003466:	b29a      	uxth	r2, r3
 8003468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346a:	801a      	strh	r2, [r3, #0]
 800346c:	e01b      	b.n	80034a6 <USB_EPStartXfer+0x246>
 800346e:	463b      	mov	r3, r7
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	785b      	ldrb	r3, [r3, #1]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d116      	bne.n	80034a6 <USB_EPStartXfer+0x246>
 8003478:	1d3b      	adds	r3, r7, #4
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003480:	b29b      	uxth	r3, r3
 8003482:	461a      	mov	r2, r3
 8003484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003486:	4413      	add	r3, r2
 8003488:	637b      	str	r3, [r7, #52]	; 0x34
 800348a:	463b      	mov	r3, r7
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	011a      	lsls	r2, r3, #4
 8003492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003494:	4413      	add	r3, r2
 8003496:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800349a:	633b      	str	r3, [r7, #48]	; 0x30
 800349c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80034a6:	463b      	mov	r3, r7
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	895b      	ldrh	r3, [r3, #10]
 80034ac:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80034b0:	463b      	mov	r3, r7
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6959      	ldr	r1, [r3, #20]
 80034b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80034c0:	1d38      	adds	r0, r7, #4
 80034c2:	6800      	ldr	r0, [r0, #0]
 80034c4:	f001 f92a 	bl	800471c <USB_WritePMA>
            ep->xfer_buff += len;
 80034c8:	463b      	mov	r3, r7
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695a      	ldr	r2, [r3, #20]
 80034ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034d2:	441a      	add	r2, r3
 80034d4:	463b      	mov	r3, r7
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80034da:	463b      	mov	r3, r7
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6a1a      	ldr	r2, [r3, #32]
 80034e0:	463b      	mov	r3, r7
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d909      	bls.n	80034fe <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80034ea:	463b      	mov	r3, r7
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6a1a      	ldr	r2, [r3, #32]
 80034f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034f4:	1ad2      	subs	r2, r2, r3
 80034f6:	463b      	mov	r3, r7
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	621a      	str	r2, [r3, #32]
 80034fc:	e008      	b.n	8003510 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80034fe:	463b      	mov	r3, r7
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003508:	463b      	mov	r3, r7
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2200      	movs	r2, #0
 800350e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003510:	463b      	mov	r3, r7
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	785b      	ldrb	r3, [r3, #1]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d164      	bne.n	80035e4 <USB_EPStartXfer+0x384>
 800351a:	1d3b      	adds	r3, r7, #4
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	61fb      	str	r3, [r7, #28]
 8003520:	1d3b      	adds	r3, r7, #4
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003528:	b29b      	uxth	r3, r3
 800352a:	461a      	mov	r2, r3
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	4413      	add	r3, r2
 8003530:	61fb      	str	r3, [r7, #28]
 8003532:	463b      	mov	r3, r7
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	011a      	lsls	r2, r3, #4
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	4413      	add	r3, r2
 800353e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003542:	61bb      	str	r3, [r7, #24]
 8003544:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003548:	2b00      	cmp	r3, #0
 800354a:	d112      	bne.n	8003572 <USB_EPStartXfer+0x312>
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	881b      	ldrh	r3, [r3, #0]
 8003550:	b29b      	uxth	r3, r3
 8003552:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003556:	b29a      	uxth	r2, r3
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	801a      	strh	r2, [r3, #0]
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	b29b      	uxth	r3, r3
 8003562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800356a:	b29a      	uxth	r2, r3
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	801a      	strh	r2, [r3, #0]
 8003570:	e057      	b.n	8003622 <USB_EPStartXfer+0x3c2>
 8003572:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003576:	2b3e      	cmp	r3, #62	; 0x3e
 8003578:	d817      	bhi.n	80035aa <USB_EPStartXfer+0x34a>
 800357a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800357e:	085b      	lsrs	r3, r3, #1
 8003580:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003584:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b00      	cmp	r3, #0
 800358e:	d004      	beq.n	800359a <USB_EPStartXfer+0x33a>
 8003590:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003594:	3301      	adds	r3, #1
 8003596:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800359a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800359e:	b29b      	uxth	r3, r3
 80035a0:	029b      	lsls	r3, r3, #10
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	801a      	strh	r2, [r3, #0]
 80035a8:	e03b      	b.n	8003622 <USB_EPStartXfer+0x3c2>
 80035aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035ae:	095b      	lsrs	r3, r3, #5
 80035b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80035b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035b8:	f003 031f 	and.w	r3, r3, #31
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d104      	bne.n	80035ca <USB_EPStartXfer+0x36a>
 80035c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80035c4:	3b01      	subs	r3, #1
 80035c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80035ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	029b      	lsls	r3, r3, #10
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035dc:	b29a      	uxth	r2, r3
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	801a      	strh	r2, [r3, #0]
 80035e2:	e01e      	b.n	8003622 <USB_EPStartXfer+0x3c2>
 80035e4:	463b      	mov	r3, r7
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	785b      	ldrb	r3, [r3, #1]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d119      	bne.n	8003622 <USB_EPStartXfer+0x3c2>
 80035ee:	1d3b      	adds	r3, r7, #4
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
 80035f4:	1d3b      	adds	r3, r7, #4
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	461a      	mov	r2, r3
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	4413      	add	r3, r2
 8003604:	627b      	str	r3, [r7, #36]	; 0x24
 8003606:	463b      	mov	r3, r7
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	011a      	lsls	r2, r3, #4
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	4413      	add	r3, r2
 8003612:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003616:	623b      	str	r3, [r7, #32]
 8003618:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800361c:	b29a      	uxth	r2, r3
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003622:	463b      	mov	r3, r7
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	891b      	ldrh	r3, [r3, #8]
 8003628:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800362c:	463b      	mov	r3, r7
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6959      	ldr	r1, [r3, #20]
 8003632:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003636:	b29b      	uxth	r3, r3
 8003638:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800363c:	1d38      	adds	r0, r7, #4
 800363e:	6800      	ldr	r0, [r0, #0]
 8003640:	f001 f86c 	bl	800471c <USB_WritePMA>
 8003644:	e33b      	b.n	8003cbe <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003646:	463b      	mov	r3, r7
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	785b      	ldrb	r3, [r3, #1]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d164      	bne.n	800371a <USB_EPStartXfer+0x4ba>
 8003650:	1d3b      	adds	r3, r7, #4
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003656:	1d3b      	adds	r3, r7, #4
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800365e:	b29b      	uxth	r3, r3
 8003660:	461a      	mov	r2, r3
 8003662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003664:	4413      	add	r3, r2
 8003666:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003668:	463b      	mov	r3, r7
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	011a      	lsls	r2, r3, #4
 8003670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003672:	4413      	add	r3, r2
 8003674:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003678:	64bb      	str	r3, [r7, #72]	; 0x48
 800367a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800367e:	2b00      	cmp	r3, #0
 8003680:	d112      	bne.n	80036a8 <USB_EPStartXfer+0x448>
 8003682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	b29b      	uxth	r3, r3
 8003688:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800368c:	b29a      	uxth	r2, r3
 800368e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003690:	801a      	strh	r2, [r3, #0]
 8003692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	b29b      	uxth	r3, r3
 8003698:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800369c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036a4:	801a      	strh	r2, [r3, #0]
 80036a6:	e057      	b.n	8003758 <USB_EPStartXfer+0x4f8>
 80036a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036ac:	2b3e      	cmp	r3, #62	; 0x3e
 80036ae:	d817      	bhi.n	80036e0 <USB_EPStartXfer+0x480>
 80036b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036b4:	085b      	lsrs	r3, r3, #1
 80036b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80036ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d004      	beq.n	80036d0 <USB_EPStartXfer+0x470>
 80036c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036ca:	3301      	adds	r3, #1
 80036cc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80036d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	029b      	lsls	r3, r3, #10
 80036d8:	b29a      	uxth	r2, r3
 80036da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036dc:	801a      	strh	r2, [r3, #0]
 80036de:	e03b      	b.n	8003758 <USB_EPStartXfer+0x4f8>
 80036e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036e4:	095b      	lsrs	r3, r3, #5
 80036e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80036ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036ee:	f003 031f 	and.w	r3, r3, #31
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d104      	bne.n	8003700 <USB_EPStartXfer+0x4a0>
 80036f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036fa:	3b01      	subs	r3, #1
 80036fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003700:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003704:	b29b      	uxth	r3, r3
 8003706:	029b      	lsls	r3, r3, #10
 8003708:	b29b      	uxth	r3, r3
 800370a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800370e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003712:	b29a      	uxth	r2, r3
 8003714:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003716:	801a      	strh	r2, [r3, #0]
 8003718:	e01e      	b.n	8003758 <USB_EPStartXfer+0x4f8>
 800371a:	463b      	mov	r3, r7
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	785b      	ldrb	r3, [r3, #1]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d119      	bne.n	8003758 <USB_EPStartXfer+0x4f8>
 8003724:	1d3b      	adds	r3, r7, #4
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	657b      	str	r3, [r7, #84]	; 0x54
 800372a:	1d3b      	adds	r3, r7, #4
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003732:	b29b      	uxth	r3, r3
 8003734:	461a      	mov	r2, r3
 8003736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003738:	4413      	add	r3, r2
 800373a:	657b      	str	r3, [r7, #84]	; 0x54
 800373c:	463b      	mov	r3, r7
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	011a      	lsls	r2, r3, #4
 8003744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003746:	4413      	add	r3, r2
 8003748:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800374c:	653b      	str	r3, [r7, #80]	; 0x50
 800374e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003752:	b29a      	uxth	r2, r3
 8003754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003756:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003758:	463b      	mov	r3, r7
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	891b      	ldrh	r3, [r3, #8]
 800375e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003762:	463b      	mov	r3, r7
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6959      	ldr	r1, [r3, #20]
 8003768:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800376c:	b29b      	uxth	r3, r3
 800376e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003772:	1d38      	adds	r0, r7, #4
 8003774:	6800      	ldr	r0, [r0, #0]
 8003776:	f000 ffd1 	bl	800471c <USB_WritePMA>
            ep->xfer_buff += len;
 800377a:	463b      	mov	r3, r7
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695a      	ldr	r2, [r3, #20]
 8003780:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003784:	441a      	add	r2, r3
 8003786:	463b      	mov	r3, r7
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800378c:	463b      	mov	r3, r7
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6a1a      	ldr	r2, [r3, #32]
 8003792:	463b      	mov	r3, r7
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	429a      	cmp	r2, r3
 800379a:	d909      	bls.n	80037b0 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 800379c:	463b      	mov	r3, r7
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6a1a      	ldr	r2, [r3, #32]
 80037a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037a6:	1ad2      	subs	r2, r2, r3
 80037a8:	463b      	mov	r3, r7
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	621a      	str	r2, [r3, #32]
 80037ae:	e008      	b.n	80037c2 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80037b0:	463b      	mov	r3, r7
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80037ba:	463b      	mov	r3, r7
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2200      	movs	r2, #0
 80037c0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80037c2:	1d3b      	adds	r3, r7, #4
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	647b      	str	r3, [r7, #68]	; 0x44
 80037c8:	463b      	mov	r3, r7
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	785b      	ldrb	r3, [r3, #1]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d164      	bne.n	800389c <USB_EPStartXfer+0x63c>
 80037d2:	1d3b      	adds	r3, r7, #4
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037d8:	1d3b      	adds	r3, r7, #4
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	461a      	mov	r2, r3
 80037e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037e6:	4413      	add	r3, r2
 80037e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037ea:	463b      	mov	r3, r7
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	011a      	lsls	r2, r3, #4
 80037f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037f4:	4413      	add	r3, r2
 80037f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80037fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80037fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003800:	2b00      	cmp	r3, #0
 8003802:	d112      	bne.n	800382a <USB_EPStartXfer+0x5ca>
 8003804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	b29b      	uxth	r3, r3
 800380a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800380e:	b29a      	uxth	r2, r3
 8003810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003812:	801a      	strh	r2, [r3, #0]
 8003814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003816:	881b      	ldrh	r3, [r3, #0]
 8003818:	b29b      	uxth	r3, r3
 800381a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800381e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003822:	b29a      	uxth	r2, r3
 8003824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003826:	801a      	strh	r2, [r3, #0]
 8003828:	e054      	b.n	80038d4 <USB_EPStartXfer+0x674>
 800382a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800382e:	2b3e      	cmp	r3, #62	; 0x3e
 8003830:	d817      	bhi.n	8003862 <USB_EPStartXfer+0x602>
 8003832:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003836:	085b      	lsrs	r3, r3, #1
 8003838:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800383c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b00      	cmp	r3, #0
 8003846:	d004      	beq.n	8003852 <USB_EPStartXfer+0x5f2>
 8003848:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800384c:	3301      	adds	r3, #1
 800384e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003852:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003856:	b29b      	uxth	r3, r3
 8003858:	029b      	lsls	r3, r3, #10
 800385a:	b29a      	uxth	r2, r3
 800385c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385e:	801a      	strh	r2, [r3, #0]
 8003860:	e038      	b.n	80038d4 <USB_EPStartXfer+0x674>
 8003862:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003866:	095b      	lsrs	r3, r3, #5
 8003868:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800386c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003870:	f003 031f 	and.w	r3, r3, #31
 8003874:	2b00      	cmp	r3, #0
 8003876:	d104      	bne.n	8003882 <USB_EPStartXfer+0x622>
 8003878:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800387c:	3b01      	subs	r3, #1
 800387e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003882:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003886:	b29b      	uxth	r3, r3
 8003888:	029b      	lsls	r3, r3, #10
 800388a:	b29b      	uxth	r3, r3
 800388c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003890:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003894:	b29a      	uxth	r2, r3
 8003896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003898:	801a      	strh	r2, [r3, #0]
 800389a:	e01b      	b.n	80038d4 <USB_EPStartXfer+0x674>
 800389c:	463b      	mov	r3, r7
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	785b      	ldrb	r3, [r3, #1]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d116      	bne.n	80038d4 <USB_EPStartXfer+0x674>
 80038a6:	1d3b      	adds	r3, r7, #4
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	461a      	mov	r2, r3
 80038b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038b4:	4413      	add	r3, r2
 80038b6:	647b      	str	r3, [r7, #68]	; 0x44
 80038b8:	463b      	mov	r3, r7
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	011a      	lsls	r2, r3, #4
 80038c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038c2:	4413      	add	r3, r2
 80038c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80038c8:	643b      	str	r3, [r7, #64]	; 0x40
 80038ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038d2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80038d4:	463b      	mov	r3, r7
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	895b      	ldrh	r3, [r3, #10]
 80038da:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80038de:	463b      	mov	r3, r7
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6959      	ldr	r1, [r3, #20]
 80038e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80038ee:	1d38      	adds	r0, r7, #4
 80038f0:	6800      	ldr	r0, [r0, #0]
 80038f2:	f000 ff13 	bl	800471c <USB_WritePMA>
 80038f6:	e1e2      	b.n	8003cbe <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80038f8:	463b      	mov	r3, r7
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003902:	1d3b      	adds	r3, r7, #4
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	463b      	mov	r3, r7
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4413      	add	r3, r2
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	b29b      	uxth	r3, r3
 8003914:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800391c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003920:	1d3b      	adds	r3, r7, #4
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	463b      	mov	r3, r7
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	441a      	add	r2, r3
 800392e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003932:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003936:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800393a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800393e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003942:	b29b      	uxth	r3, r3
 8003944:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003946:	1d3b      	adds	r3, r7, #4
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	663b      	str	r3, [r7, #96]	; 0x60
 800394c:	1d3b      	adds	r3, r7, #4
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003954:	b29b      	uxth	r3, r3
 8003956:	461a      	mov	r2, r3
 8003958:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800395a:	4413      	add	r3, r2
 800395c:	663b      	str	r3, [r7, #96]	; 0x60
 800395e:	463b      	mov	r3, r7
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	011a      	lsls	r2, r3, #4
 8003966:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003968:	4413      	add	r3, r2
 800396a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800396e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003970:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003974:	b29a      	uxth	r2, r3
 8003976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003978:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800397a:	463b      	mov	r3, r7
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	891b      	ldrh	r3, [r3, #8]
 8003980:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003984:	463b      	mov	r3, r7
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6959      	ldr	r1, [r3, #20]
 800398a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800398e:	b29b      	uxth	r3, r3
 8003990:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003994:	1d38      	adds	r0, r7, #4
 8003996:	6800      	ldr	r0, [r0, #0]
 8003998:	f000 fec0 	bl	800471c <USB_WritePMA>
 800399c:	e18f      	b.n	8003cbe <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800399e:	1d3b      	adds	r3, r7, #4
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	463b      	mov	r3, r7
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	881b      	ldrh	r3, [r3, #0]
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 808f 	beq.w	8003ad8 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80039ba:	1d3b      	adds	r3, r7, #4
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	67bb      	str	r3, [r7, #120]	; 0x78
 80039c0:	463b      	mov	r3, r7
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	785b      	ldrb	r3, [r3, #1]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d164      	bne.n	8003a94 <USB_EPStartXfer+0x834>
 80039ca:	1d3b      	adds	r3, r7, #4
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	673b      	str	r3, [r7, #112]	; 0x70
 80039d0:	1d3b      	adds	r3, r7, #4
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039d8:	b29b      	uxth	r3, r3
 80039da:	461a      	mov	r2, r3
 80039dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039de:	4413      	add	r3, r2
 80039e0:	673b      	str	r3, [r7, #112]	; 0x70
 80039e2:	463b      	mov	r3, r7
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	011a      	lsls	r2, r3, #4
 80039ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039ec:	4413      	add	r3, r2
 80039ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80039f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d112      	bne.n	8003a22 <USB_EPStartXfer+0x7c2>
 80039fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a0a:	801a      	strh	r2, [r3, #0]
 8003a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a1e:	801a      	strh	r2, [r3, #0]
 8003a20:	e054      	b.n	8003acc <USB_EPStartXfer+0x86c>
 8003a22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a26:	2b3e      	cmp	r3, #62	; 0x3e
 8003a28:	d817      	bhi.n	8003a5a <USB_EPStartXfer+0x7fa>
 8003a2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a2e:	085b      	lsrs	r3, r3, #1
 8003a30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003a34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d004      	beq.n	8003a4a <USB_EPStartXfer+0x7ea>
 8003a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a44:	3301      	adds	r3, #1
 8003a46:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	029b      	lsls	r3, r3, #10
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a56:	801a      	strh	r2, [r3, #0]
 8003a58:	e038      	b.n	8003acc <USB_EPStartXfer+0x86c>
 8003a5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003a64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a68:	f003 031f 	and.w	r3, r3, #31
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d104      	bne.n	8003a7a <USB_EPStartXfer+0x81a>
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a74:	3b01      	subs	r3, #1
 8003a76:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	029b      	lsls	r3, r3, #10
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a90:	801a      	strh	r2, [r3, #0]
 8003a92:	e01b      	b.n	8003acc <USB_EPStartXfer+0x86c>
 8003a94:	463b      	mov	r3, r7
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	785b      	ldrb	r3, [r3, #1]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d116      	bne.n	8003acc <USB_EPStartXfer+0x86c>
 8003a9e:	1d3b      	adds	r3, r7, #4
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003aac:	4413      	add	r3, r2
 8003aae:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ab0:	463b      	mov	r3, r7
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	011a      	lsls	r2, r3, #4
 8003ab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003aba:	4413      	add	r3, r2
 8003abc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ac0:	677b      	str	r3, [r7, #116]	; 0x74
 8003ac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8003acc:	463b      	mov	r3, r7
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	895b      	ldrh	r3, [r3, #10]
 8003ad2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8003ad6:	e097      	b.n	8003c08 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003ad8:	463b      	mov	r3, r7
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	785b      	ldrb	r3, [r3, #1]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d168      	bne.n	8003bb4 <USB_EPStartXfer+0x954>
 8003ae2:	1d3b      	adds	r3, r7, #4
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003aea:	1d3b      	adds	r3, r7, #4
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	461a      	mov	r2, r3
 8003af6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003afa:	4413      	add	r3, r2
 8003afc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b00:	463b      	mov	r3, r7
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	011a      	lsls	r2, r3, #4
 8003b08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b12:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d112      	bne.n	8003b42 <USB_EPStartXfer+0x8e2>
 8003b1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b2a:	801a      	strh	r2, [r3, #0]
 8003b2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b3e:	801a      	strh	r2, [r3, #0]
 8003b40:	e05d      	b.n	8003bfe <USB_EPStartXfer+0x99e>
 8003b42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b46:	2b3e      	cmp	r3, #62	; 0x3e
 8003b48:	d817      	bhi.n	8003b7a <USB_EPStartXfer+0x91a>
 8003b4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b4e:	085b      	lsrs	r3, r3, #1
 8003b50:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003b54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d004      	beq.n	8003b6a <USB_EPStartXfer+0x90a>
 8003b60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003b64:	3301      	adds	r3, #1
 8003b66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003b6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	029b      	lsls	r3, r3, #10
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b76:	801a      	strh	r2, [r3, #0]
 8003b78:	e041      	b.n	8003bfe <USB_EPStartXfer+0x99e>
 8003b7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b7e:	095b      	lsrs	r3, r3, #5
 8003b80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003b84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b88:	f003 031f 	and.w	r3, r3, #31
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d104      	bne.n	8003b9a <USB_EPStartXfer+0x93a>
 8003b90:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003b94:	3b01      	subs	r3, #1
 8003b96:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003b9a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	029b      	lsls	r3, r3, #10
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ba8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003bb0:	801a      	strh	r2, [r3, #0]
 8003bb2:	e024      	b.n	8003bfe <USB_EPStartXfer+0x99e>
 8003bb4:	463b      	mov	r3, r7
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	785b      	ldrb	r3, [r3, #1]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d11f      	bne.n	8003bfe <USB_EPStartXfer+0x99e>
 8003bbe:	1d3b      	adds	r3, r7, #4
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003bc6:	1d3b      	adds	r3, r7, #4
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003bdc:	463b      	mov	r3, r7
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	011a      	lsls	r2, r3, #4
 8003be4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003be8:	4413      	add	r3, r2
 8003bea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bfc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003bfe:	463b      	mov	r3, r7
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	891b      	ldrh	r3, [r3, #8]
 8003c04:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003c08:	463b      	mov	r3, r7
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6959      	ldr	r1, [r3, #20]
 8003c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003c18:	1d38      	adds	r0, r7, #4
 8003c1a:	6800      	ldr	r0, [r0, #0]
 8003c1c:	f000 fd7e 	bl	800471c <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003c20:	463b      	mov	r3, r7
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	785b      	ldrb	r3, [r3, #1]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d122      	bne.n	8003c70 <USB_EPStartXfer+0xa10>
 8003c2a:	1d3b      	adds	r3, r7, #4
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	463b      	mov	r3, r7
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	881b      	ldrh	r3, [r3, #0]
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c44:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8003c48:	1d3b      	adds	r3, r7, #4
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	463b      	mov	r3, r7
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	441a      	add	r2, r3
 8003c56:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8003c5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	8013      	strh	r3, [r2, #0]
 8003c6e:	e026      	b.n	8003cbe <USB_EPStartXfer+0xa5e>
 8003c70:	463b      	mov	r3, r7
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	785b      	ldrb	r3, [r3, #1]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d121      	bne.n	8003cbe <USB_EPStartXfer+0xa5e>
 8003c7a:	1d3b      	adds	r3, r7, #4
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	463b      	mov	r3, r7
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4413      	add	r3, r2
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c94:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8003c98:	1d3b      	adds	r3, r7, #4
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	463b      	mov	r3, r7
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	441a      	add	r2, r3
 8003ca6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8003caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003cbe:	1d3b      	adds	r3, r7, #4
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	463b      	mov	r3, r7
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	f107 020e 	add.w	r2, r7, #14
 8003cd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cdc:	8013      	strh	r3, [r2, #0]
 8003cde:	f107 030e 	add.w	r3, r7, #14
 8003ce2:	f107 020e 	add.w	r2, r7, #14
 8003ce6:	8812      	ldrh	r2, [r2, #0]
 8003ce8:	f082 0210 	eor.w	r2, r2, #16
 8003cec:	801a      	strh	r2, [r3, #0]
 8003cee:	f107 030e 	add.w	r3, r7, #14
 8003cf2:	f107 020e 	add.w	r2, r7, #14
 8003cf6:	8812      	ldrh	r2, [r2, #0]
 8003cf8:	f082 0220 	eor.w	r2, r2, #32
 8003cfc:	801a      	strh	r2, [r3, #0]
 8003cfe:	1d3b      	adds	r3, r7, #4
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	463b      	mov	r3, r7
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	441a      	add	r2, r3
 8003d0c:	f107 030e 	add.w	r3, r7, #14
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	8013      	strh	r3, [r2, #0]
 8003d26:	e3b5      	b.n	8004494 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8003d28:	463b      	mov	r3, r7
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	7b1b      	ldrb	r3, [r3, #12]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f040 8090 	bne.w	8003e54 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8003d34:	463b      	mov	r3, r7
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699a      	ldr	r2, [r3, #24]
 8003d3a:	463b      	mov	r3, r7
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d90e      	bls.n	8003d62 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8003d44:	463b      	mov	r3, r7
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8003d4e:	463b      	mov	r3, r7
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	699a      	ldr	r2, [r3, #24]
 8003d54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d58:	1ad2      	subs	r2, r2, r3
 8003d5a:	463b      	mov	r3, r7
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	619a      	str	r2, [r3, #24]
 8003d60:	e008      	b.n	8003d74 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8003d62:	463b      	mov	r3, r7
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8003d6c:	463b      	mov	r3, r7
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2200      	movs	r2, #0
 8003d72:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003d74:	1d3b      	adds	r3, r7, #4
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d7c:	1d3b      	adds	r3, r7, #4
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	461a      	mov	r2, r3
 8003d88:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d92:	463b      	mov	r3, r7
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	011a      	lsls	r2, r3, #4
 8003d9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003d9e:	4413      	add	r3, r2
 8003da0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003da4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003da8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d116      	bne.n	8003dde <USB_EPStartXfer+0xb7e>
 8003db0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003dc2:	801a      	strh	r2, [r3, #0]
 8003dc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003dc8:	881b      	ldrh	r3, [r3, #0]
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003dda:	801a      	strh	r2, [r3, #0]
 8003ddc:	e32c      	b.n	8004438 <USB_EPStartXfer+0x11d8>
 8003dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003de2:	2b3e      	cmp	r3, #62	; 0x3e
 8003de4:	d818      	bhi.n	8003e18 <USB_EPStartXfer+0xbb8>
 8003de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dea:	085b      	lsrs	r3, r3, #1
 8003dec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003df0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d004      	beq.n	8003e06 <USB_EPStartXfer+0xba6>
 8003dfc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003e00:	3301      	adds	r3, #1
 8003e02:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003e06:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	029b      	lsls	r3, r3, #10
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e14:	801a      	strh	r2, [r3, #0]
 8003e16:	e30f      	b.n	8004438 <USB_EPStartXfer+0x11d8>
 8003e18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e1c:	095b      	lsrs	r3, r3, #5
 8003e1e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e26:	f003 031f 	and.w	r3, r3, #31
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d104      	bne.n	8003e38 <USB_EPStartXfer+0xbd8>
 8003e2e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003e32:	3b01      	subs	r3, #1
 8003e34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003e38:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	029b      	lsls	r3, r3, #10
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e50:	801a      	strh	r2, [r3, #0]
 8003e52:	e2f1      	b.n	8004438 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8003e54:	463b      	mov	r3, r7
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	78db      	ldrb	r3, [r3, #3]
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	f040 818f 	bne.w	800417e <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003e60:	463b      	mov	r3, r7
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	785b      	ldrb	r3, [r3, #1]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d175      	bne.n	8003f56 <USB_EPStartXfer+0xcf6>
 8003e6a:	1d3b      	adds	r3, r7, #4
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e72:	1d3b      	adds	r3, r7, #4
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003e82:	4413      	add	r3, r2
 8003e84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e88:	463b      	mov	r3, r7
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	011a      	lsls	r2, r3, #4
 8003e90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003e94:	4413      	add	r3, r2
 8003e96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e9e:	463b      	mov	r3, r7
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d116      	bne.n	8003ed6 <USB_EPStartXfer+0xc76>
 8003ea8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003eba:	801a      	strh	r2, [r3, #0]
 8003ebc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ed2:	801a      	strh	r2, [r3, #0]
 8003ed4:	e065      	b.n	8003fa2 <USB_EPStartXfer+0xd42>
 8003ed6:	463b      	mov	r3, r7
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	2b3e      	cmp	r3, #62	; 0x3e
 8003ede:	d81a      	bhi.n	8003f16 <USB_EPStartXfer+0xcb6>
 8003ee0:	463b      	mov	r3, r7
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	085b      	lsrs	r3, r3, #1
 8003ee8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003eec:	463b      	mov	r3, r7
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d004      	beq.n	8003f04 <USB_EPStartXfer+0xca4>
 8003efa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003efe:	3301      	adds	r3, #1
 8003f00:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	029b      	lsls	r3, r3, #10
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f12:	801a      	strh	r2, [r3, #0]
 8003f14:	e045      	b.n	8003fa2 <USB_EPStartXfer+0xd42>
 8003f16:	463b      	mov	r3, r7
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	095b      	lsrs	r3, r3, #5
 8003f1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f22:	463b      	mov	r3, r7
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	f003 031f 	and.w	r3, r3, #31
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d104      	bne.n	8003f3a <USB_EPStartXfer+0xcda>
 8003f30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003f34:	3b01      	subs	r3, #1
 8003f36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	029b      	lsls	r3, r3, #10
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f52:	801a      	strh	r2, [r3, #0]
 8003f54:	e025      	b.n	8003fa2 <USB_EPStartXfer+0xd42>
 8003f56:	463b      	mov	r3, r7
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	785b      	ldrb	r3, [r3, #1]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d120      	bne.n	8003fa2 <USB_EPStartXfer+0xd42>
 8003f60:	1d3b      	adds	r3, r7, #4
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f68:	1d3b      	adds	r3, r7, #4
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	461a      	mov	r2, r3
 8003f74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f78:	4413      	add	r3, r2
 8003f7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f7e:	463b      	mov	r3, r7
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	011a      	lsls	r2, r3, #4
 8003f86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f94:	463b      	mov	r3, r7
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003fa0:	801a      	strh	r2, [r3, #0]
 8003fa2:	1d3b      	adds	r3, r7, #4
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003faa:	463b      	mov	r3, r7
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	785b      	ldrb	r3, [r3, #1]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d175      	bne.n	80040a0 <USB_EPStartXfer+0xe40>
 8003fb4:	1d3b      	adds	r3, r7, #4
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003fbc:	1d3b      	adds	r3, r7, #4
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003fcc:	4413      	add	r3, r2
 8003fce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003fd2:	463b      	mov	r3, r7
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	011a      	lsls	r2, r3, #4
 8003fda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003fde:	4413      	add	r3, r2
 8003fe0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fe4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003fe8:	463b      	mov	r3, r7
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d116      	bne.n	8004020 <USB_EPStartXfer+0xdc0>
 8003ff2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004004:	801a      	strh	r2, [r3, #0]
 8004006:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800400a:	881b      	ldrh	r3, [r3, #0]
 800400c:	b29b      	uxth	r3, r3
 800400e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004012:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004016:	b29a      	uxth	r2, r3
 8004018:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800401c:	801a      	strh	r2, [r3, #0]
 800401e:	e061      	b.n	80040e4 <USB_EPStartXfer+0xe84>
 8004020:	463b      	mov	r3, r7
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	2b3e      	cmp	r3, #62	; 0x3e
 8004028:	d81a      	bhi.n	8004060 <USB_EPStartXfer+0xe00>
 800402a:	463b      	mov	r3, r7
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	085b      	lsrs	r3, r3, #1
 8004032:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004036:	463b      	mov	r3, r7
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d004      	beq.n	800404e <USB_EPStartXfer+0xdee>
 8004044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004048:	3301      	adds	r3, #1
 800404a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800404e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004052:	b29b      	uxth	r3, r3
 8004054:	029b      	lsls	r3, r3, #10
 8004056:	b29a      	uxth	r2, r3
 8004058:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800405c:	801a      	strh	r2, [r3, #0]
 800405e:	e041      	b.n	80040e4 <USB_EPStartXfer+0xe84>
 8004060:	463b      	mov	r3, r7
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	095b      	lsrs	r3, r3, #5
 8004068:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800406c:	463b      	mov	r3, r7
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	f003 031f 	and.w	r3, r3, #31
 8004076:	2b00      	cmp	r3, #0
 8004078:	d104      	bne.n	8004084 <USB_EPStartXfer+0xe24>
 800407a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800407e:	3b01      	subs	r3, #1
 8004080:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004088:	b29b      	uxth	r3, r3
 800408a:	029b      	lsls	r3, r3, #10
 800408c:	b29b      	uxth	r3, r3
 800408e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004092:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004096:	b29a      	uxth	r2, r3
 8004098:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800409c:	801a      	strh	r2, [r3, #0]
 800409e:	e021      	b.n	80040e4 <USB_EPStartXfer+0xe84>
 80040a0:	463b      	mov	r3, r7
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	785b      	ldrb	r3, [r3, #1]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d11c      	bne.n	80040e4 <USB_EPStartXfer+0xe84>
 80040aa:	1d3b      	adds	r3, r7, #4
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	461a      	mov	r2, r3
 80040b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80040ba:	4413      	add	r3, r2
 80040bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040c0:	463b      	mov	r3, r7
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	011a      	lsls	r2, r3, #4
 80040c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80040cc:	4413      	add	r3, r2
 80040ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80040d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80040d6:	463b      	mov	r3, r7
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	b29a      	uxth	r2, r3
 80040de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80040e2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80040e4:	463b      	mov	r3, r7
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 81a4 	beq.w	8004438 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80040f0:	1d3b      	adds	r3, r7, #4
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	463b      	mov	r3, r7
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	881b      	ldrh	r3, [r3, #0]
 8004100:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004104:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004108:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d005      	beq.n	800411c <USB_EPStartXfer+0xebc>
 8004110:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10d      	bne.n	8004138 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800411c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004120:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004124:	2b00      	cmp	r3, #0
 8004126:	f040 8187 	bne.w	8004438 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800412a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800412e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004132:	2b00      	cmp	r3, #0
 8004134:	f040 8180 	bne.w	8004438 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8004138:	1d3b      	adds	r3, r7, #4
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	463b      	mov	r3, r7
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	b29b      	uxth	r3, r3
 800414a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800414e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004152:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8004156:	1d3b      	adds	r3, r7, #4
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	463b      	mov	r3, r7
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	441a      	add	r2, r3
 8004164:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8004168:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800416c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004170:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004174:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004178:	b29b      	uxth	r3, r3
 800417a:	8013      	strh	r3, [r2, #0]
 800417c:	e15c      	b.n	8004438 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800417e:	463b      	mov	r3, r7
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	78db      	ldrb	r3, [r3, #3]
 8004184:	2b01      	cmp	r3, #1
 8004186:	f040 8155 	bne.w	8004434 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800418a:	463b      	mov	r3, r7
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	699a      	ldr	r2, [r3, #24]
 8004190:	463b      	mov	r3, r7
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	429a      	cmp	r2, r3
 8004198:	d90e      	bls.n	80041b8 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 800419a:	463b      	mov	r3, r7
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80041a4:	463b      	mov	r3, r7
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699a      	ldr	r2, [r3, #24]
 80041aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ae:	1ad2      	subs	r2, r2, r3
 80041b0:	463b      	mov	r3, r7
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	619a      	str	r2, [r3, #24]
 80041b6:	e008      	b.n	80041ca <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 80041b8:	463b      	mov	r3, r7
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 80041c2:	463b      	mov	r3, r7
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2200      	movs	r2, #0
 80041c8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80041ca:	463b      	mov	r3, r7
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	785b      	ldrb	r3, [r3, #1]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d16f      	bne.n	80042b4 <USB_EPStartXfer+0x1054>
 80041d4:	1d3b      	adds	r3, r7, #4
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041dc:	1d3b      	adds	r3, r7, #4
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	461a      	mov	r2, r3
 80041e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80041ec:	4413      	add	r3, r2
 80041ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041f2:	463b      	mov	r3, r7
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	011a      	lsls	r2, r3, #4
 80041fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80041fe:	4413      	add	r3, r2
 8004200:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004204:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004208:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800420c:	2b00      	cmp	r3, #0
 800420e:	d116      	bne.n	800423e <USB_EPStartXfer+0xfde>
 8004210:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	b29b      	uxth	r3, r3
 8004218:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800421c:	b29a      	uxth	r2, r3
 800421e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004222:	801a      	strh	r2, [r3, #0]
 8004224:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	b29b      	uxth	r3, r3
 800422c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004234:	b29a      	uxth	r2, r3
 8004236:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800423a:	801a      	strh	r2, [r3, #0]
 800423c:	e05f      	b.n	80042fe <USB_EPStartXfer+0x109e>
 800423e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004242:	2b3e      	cmp	r3, #62	; 0x3e
 8004244:	d818      	bhi.n	8004278 <USB_EPStartXfer+0x1018>
 8004246:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800424a:	085b      	lsrs	r3, r3, #1
 800424c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004250:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	2b00      	cmp	r3, #0
 800425a:	d004      	beq.n	8004266 <USB_EPStartXfer+0x1006>
 800425c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004260:	3301      	adds	r3, #1
 8004262:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800426a:	b29b      	uxth	r3, r3
 800426c:	029b      	lsls	r3, r3, #10
 800426e:	b29a      	uxth	r2, r3
 8004270:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004274:	801a      	strh	r2, [r3, #0]
 8004276:	e042      	b.n	80042fe <USB_EPStartXfer+0x109e>
 8004278:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800427c:	095b      	lsrs	r3, r3, #5
 800427e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004282:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004286:	f003 031f 	and.w	r3, r3, #31
 800428a:	2b00      	cmp	r3, #0
 800428c:	d104      	bne.n	8004298 <USB_EPStartXfer+0x1038>
 800428e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004292:	3b01      	subs	r3, #1
 8004294:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800429c:	b29b      	uxth	r3, r3
 800429e:	029b      	lsls	r3, r3, #10
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80042b0:	801a      	strh	r2, [r3, #0]
 80042b2:	e024      	b.n	80042fe <USB_EPStartXfer+0x109e>
 80042b4:	463b      	mov	r3, r7
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	785b      	ldrb	r3, [r3, #1]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d11f      	bne.n	80042fe <USB_EPStartXfer+0x109e>
 80042be:	1d3b      	adds	r3, r7, #4
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80042c6:	1d3b      	adds	r3, r7, #4
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	461a      	mov	r2, r3
 80042d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042d6:	4413      	add	r3, r2
 80042d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80042dc:	463b      	mov	r3, r7
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	011a      	lsls	r2, r3, #4
 80042e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042e8:	4413      	add	r3, r2
 80042ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80042ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80042f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042fc:	801a      	strh	r2, [r3, #0]
 80042fe:	1d3b      	adds	r3, r7, #4
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004306:	463b      	mov	r3, r7
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	785b      	ldrb	r3, [r3, #1]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d16f      	bne.n	80043f0 <USB_EPStartXfer+0x1190>
 8004310:	1d3b      	adds	r3, r7, #4
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004318:	1d3b      	adds	r3, r7, #4
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004320:	b29b      	uxth	r3, r3
 8004322:	461a      	mov	r2, r3
 8004324:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004328:	4413      	add	r3, r2
 800432a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800432e:	463b      	mov	r3, r7
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	011a      	lsls	r2, r3, #4
 8004336:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800433a:	4413      	add	r3, r2
 800433c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004340:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004344:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004348:	2b00      	cmp	r3, #0
 800434a:	d116      	bne.n	800437a <USB_EPStartXfer+0x111a>
 800434c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	b29b      	uxth	r3, r3
 8004354:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004358:	b29a      	uxth	r2, r3
 800435a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800435e:	801a      	strh	r2, [r3, #0]
 8004360:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004364:	881b      	ldrh	r3, [r3, #0]
 8004366:	b29b      	uxth	r3, r3
 8004368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800436c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004370:	b29a      	uxth	r2, r3
 8004372:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004376:	801a      	strh	r2, [r3, #0]
 8004378:	e05e      	b.n	8004438 <USB_EPStartXfer+0x11d8>
 800437a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800437e:	2b3e      	cmp	r3, #62	; 0x3e
 8004380:	d818      	bhi.n	80043b4 <USB_EPStartXfer+0x1154>
 8004382:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004386:	085b      	lsrs	r3, r3, #1
 8004388:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800438c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b00      	cmp	r3, #0
 8004396:	d004      	beq.n	80043a2 <USB_EPStartXfer+0x1142>
 8004398:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800439c:	3301      	adds	r3, #1
 800439e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80043a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	029b      	lsls	r3, r3, #10
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80043b0:	801a      	strh	r2, [r3, #0]
 80043b2:	e041      	b.n	8004438 <USB_EPStartXfer+0x11d8>
 80043b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043b8:	095b      	lsrs	r3, r3, #5
 80043ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80043be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043c2:	f003 031f 	and.w	r3, r3, #31
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d104      	bne.n	80043d4 <USB_EPStartXfer+0x1174>
 80043ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ce:	3b01      	subs	r3, #1
 80043d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80043d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043d8:	b29b      	uxth	r3, r3
 80043da:	029b      	lsls	r3, r3, #10
 80043dc:	b29b      	uxth	r3, r3
 80043de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80043ec:	801a      	strh	r2, [r3, #0]
 80043ee:	e023      	b.n	8004438 <USB_EPStartXfer+0x11d8>
 80043f0:	463b      	mov	r3, r7
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	785b      	ldrb	r3, [r3, #1]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d11e      	bne.n	8004438 <USB_EPStartXfer+0x11d8>
 80043fa:	1d3b      	adds	r3, r7, #4
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004402:	b29b      	uxth	r3, r3
 8004404:	461a      	mov	r2, r3
 8004406:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800440a:	4413      	add	r3, r2
 800440c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004410:	463b      	mov	r3, r7
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	011a      	lsls	r2, r3, #4
 8004418:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800441c:	4413      	add	r3, r2
 800441e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004422:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004426:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800442a:	b29a      	uxth	r2, r3
 800442c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004430:	801a      	strh	r2, [r3, #0]
 8004432:	e001      	b.n	8004438 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e02e      	b.n	8004496 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004438:	1d3b      	adds	r3, r7, #4
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	463b      	mov	r3, r7
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	b29b      	uxth	r3, r3
 800444a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800444e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004452:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004456:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800445a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800445e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004462:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004466:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800446a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800446e:	1d3b      	adds	r3, r7, #4
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	463b      	mov	r3, r7
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	441a      	add	r2, r3
 800447c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004480:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004484:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004488:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800448c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004490:	b29b      	uxth	r3, r3
 8004492:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	785b      	ldrb	r3, [r3, #1]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d020      	beq.n	80044f4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	b29b      	uxth	r3, r3
 80044c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044c8:	81bb      	strh	r3, [r7, #12]
 80044ca:	89bb      	ldrh	r3, [r7, #12]
 80044cc:	f083 0310 	eor.w	r3, r3, #16
 80044d0:	81bb      	strh	r3, [r7, #12]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	441a      	add	r2, r3
 80044dc:	89bb      	ldrh	r3, [r7, #12]
 80044de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	8013      	strh	r3, [r2, #0]
 80044f2:	e01f      	b.n	8004534 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	881b      	ldrh	r3, [r3, #0]
 8004500:	b29b      	uxth	r3, r3
 8004502:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450a:	81fb      	strh	r3, [r7, #14]
 800450c:	89fb      	ldrh	r3, [r7, #14]
 800450e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004512:	81fb      	strh	r3, [r7, #14]
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	441a      	add	r2, r3
 800451e:	89fb      	ldrh	r3, [r7, #14]
 8004520:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004524:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004528:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800452c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004530:	b29b      	uxth	r3, r3
 8004532:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	bc80      	pop	{r7}
 800453e:	4770      	bx	lr

08004540 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004540:	b480      	push	{r7}
 8004542:	b087      	sub	sp, #28
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	7b1b      	ldrb	r3, [r3, #12]
 800454e:	2b00      	cmp	r3, #0
 8004550:	f040 809d 	bne.w	800468e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	785b      	ldrb	r3, [r3, #1]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d04c      	beq.n	80045f6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4413      	add	r3, r2
 8004566:	881b      	ldrh	r3, [r3, #0]
 8004568:	823b      	strh	r3, [r7, #16]
 800456a:	8a3b      	ldrh	r3, [r7, #16]
 800456c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004570:	2b00      	cmp	r3, #0
 8004572:	d01b      	beq.n	80045ac <USB_EPClearStall+0x6c>
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4413      	add	r3, r2
 800457e:	881b      	ldrh	r3, [r3, #0]
 8004580:	b29b      	uxth	r3, r3
 8004582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458a:	81fb      	strh	r3, [r7, #14]
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	441a      	add	r2, r3
 8004596:	89fb      	ldrh	r3, [r7, #14]
 8004598:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800459c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	78db      	ldrb	r3, [r3, #3]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d06c      	beq.n	800468e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ca:	81bb      	strh	r3, [r7, #12]
 80045cc:	89bb      	ldrh	r3, [r7, #12]
 80045ce:	f083 0320 	eor.w	r3, r3, #32
 80045d2:	81bb      	strh	r3, [r7, #12]
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	441a      	add	r2, r3
 80045de:	89bb      	ldrh	r3, [r7, #12]
 80045e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	8013      	strh	r3, [r2, #0]
 80045f4:	e04b      	b.n	800468e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	82fb      	strh	r3, [r7, #22]
 8004604:	8afb      	ldrh	r3, [r7, #22]
 8004606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d01b      	beq.n	8004646 <USB_EPClearStall+0x106>
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	b29b      	uxth	r3, r3
 800461c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004624:	82bb      	strh	r3, [r7, #20]
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	441a      	add	r2, r3
 8004630:	8abb      	ldrh	r3, [r7, #20]
 8004632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004636:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800463a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800463e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004642:	b29b      	uxth	r3, r3
 8004644:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	b29b      	uxth	r3, r3
 8004654:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800465c:	827b      	strh	r3, [r7, #18]
 800465e:	8a7b      	ldrh	r3, [r7, #18]
 8004660:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004664:	827b      	strh	r3, [r7, #18]
 8004666:	8a7b      	ldrh	r3, [r7, #18]
 8004668:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800466c:	827b      	strh	r3, [r7, #18]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	441a      	add	r2, r3
 8004678:	8a7b      	ldrh	r3, [r7, #18]
 800467a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800467e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800468a:	b29b      	uxth	r3, r3
 800468c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	371c      	adds	r7, #28
 8004694:	46bd      	mov	sp, r7
 8004696:	bc80      	pop	{r7}
 8004698:	4770      	bx	lr

0800469a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	460b      	mov	r3, r1
 80046a4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80046a6:	78fb      	ldrb	r3, [r7, #3]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d103      	bne.n	80046b4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2280      	movs	r2, #128	; 0x80
 80046b0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bc80      	pop	{r7}
 80046be:	4770      	bx	lr

080046c0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bc80      	pop	{r7}
 80046d2:	4770      	bx	lr

080046d4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bc80      	pop	{r7}
 80046e6:	4770      	bx	lr

080046e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80046fa:	68fb      	ldr	r3, [r7, #12]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	bc80      	pop	{r7}
 8004704:	4770      	bx	lr

08004706 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	bc80      	pop	{r7}
 800471a:	4770      	bx	lr

0800471c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800471c:	b480      	push	{r7}
 800471e:	b08d      	sub	sp, #52	; 0x34
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	4611      	mov	r1, r2
 8004728:	461a      	mov	r2, r3
 800472a:	460b      	mov	r3, r1
 800472c:	80fb      	strh	r3, [r7, #6]
 800472e:	4613      	mov	r3, r2
 8004730:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004732:	88bb      	ldrh	r3, [r7, #4]
 8004734:	3301      	adds	r3, #1
 8004736:	085b      	lsrs	r3, r3, #1
 8004738:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004742:	88fb      	ldrh	r3, [r7, #6]
 8004744:	005a      	lsls	r2, r3, #1
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	4413      	add	r3, r2
 800474a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800474e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004754:	e01e      	b.n	8004794 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	3301      	adds	r3, #1
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	b29b      	uxth	r3, r3
 8004768:	021b      	lsls	r3, r3, #8
 800476a:	b29b      	uxth	r3, r3
 800476c:	461a      	mov	r2, r3
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	4313      	orrs	r3, r2
 8004772:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	b29a      	uxth	r2, r3
 8004778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800477c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477e:	3302      	adds	r3, #2
 8004780:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004784:	3302      	adds	r3, #2
 8004786:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478a:	3301      	adds	r3, #1
 800478c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800478e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004790:	3b01      	subs	r3, #1
 8004792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1dd      	bne.n	8004756 <USB_WritePMA+0x3a>
  }
}
 800479a:	bf00      	nop
 800479c:	3734      	adds	r7, #52	; 0x34
 800479e:	46bd      	mov	sp, r7
 80047a0:	bc80      	pop	{r7}
 80047a2:	4770      	bx	lr

080047a4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b08b      	sub	sp, #44	; 0x2c
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	4611      	mov	r1, r2
 80047b0:	461a      	mov	r2, r3
 80047b2:	460b      	mov	r3, r1
 80047b4:	80fb      	strh	r3, [r7, #6]
 80047b6:	4613      	mov	r3, r2
 80047b8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80047ba:	88bb      	ldrh	r3, [r7, #4]
 80047bc:	085b      	lsrs	r3, r3, #1
 80047be:	b29b      	uxth	r3, r3
 80047c0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80047ca:	88fb      	ldrh	r3, [r7, #6]
 80047cc:	005a      	lsls	r2, r3, #1
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047d6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	627b      	str	r3, [r7, #36]	; 0x24
 80047dc:	e01b      	b.n	8004816 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	3302      	adds	r3, #2
 80047ea:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	3301      	adds	r3, #1
 80047f8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	0a1b      	lsrs	r3, r3, #8
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	3301      	adds	r3, #1
 8004808:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	3302      	adds	r3, #2
 800480e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	3b01      	subs	r3, #1
 8004814:	627b      	str	r3, [r7, #36]	; 0x24
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1e0      	bne.n	80047de <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800481c:	88bb      	ldrh	r3, [r7, #4]
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	b29b      	uxth	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	d007      	beq.n	8004838 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	881b      	ldrh	r3, [r3, #0]
 800482c:	b29b      	uxth	r3, r3
 800482e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	b2da      	uxtb	r2, r3
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	701a      	strb	r2, [r3, #0]
  }
}
 8004838:	bf00      	nop
 800483a:	372c      	adds	r7, #44	; 0x2c
 800483c:	46bd      	mov	sp, r7
 800483e:	bc80      	pop	{r7}
 8004840:	4770      	bx	lr

08004842 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b084      	sub	sp, #16
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	460b      	mov	r3, r1
 800484c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800484e:	2300      	movs	r3, #0
 8004850:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	7c1b      	ldrb	r3, [r3, #16]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d115      	bne.n	8004886 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800485a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800485e:	2202      	movs	r2, #2
 8004860:	2181      	movs	r1, #129	; 0x81
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f001 fe23 	bl	80064ae <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800486e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004872:	2202      	movs	r2, #2
 8004874:	2101      	movs	r1, #1
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f001 fe19 	bl	80064ae <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004884:	e012      	b.n	80048ac <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004886:	2340      	movs	r3, #64	; 0x40
 8004888:	2202      	movs	r2, #2
 800488a:	2181      	movs	r1, #129	; 0x81
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f001 fe0e 	bl	80064ae <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004898:	2340      	movs	r3, #64	; 0x40
 800489a:	2202      	movs	r2, #2
 800489c:	2101      	movs	r1, #1
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f001 fe05 	bl	80064ae <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80048ac:	2308      	movs	r3, #8
 80048ae:	2203      	movs	r2, #3
 80048b0:	2182      	movs	r1, #130	; 0x82
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f001 fdfb 	bl	80064ae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80048be:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80048c2:	f001 ff1b 	bl	80066fc <USBD_static_malloc>
 80048c6:	4602      	mov	r2, r0
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d102      	bne.n	80048de <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80048d8:	2301      	movs	r3, #1
 80048da:	73fb      	strb	r3, [r7, #15]
 80048dc:	e026      	b.n	800492c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048e4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	7c1b      	ldrb	r3, [r3, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d109      	bne.n	800491c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800490e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004912:	2101      	movs	r1, #1
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f001 febb 	bl	8006690 <USBD_LL_PrepareReceive>
 800491a:	e007      	b.n	800492c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004922:	2340      	movs	r3, #64	; 0x40
 8004924:	2101      	movs	r1, #1
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f001 feb2 	bl	8006690 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800492c:	7bfb      	ldrb	r3, [r7, #15]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b084      	sub	sp, #16
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	460b      	mov	r3, r1
 8004940:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004942:	2300      	movs	r3, #0
 8004944:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004946:	2181      	movs	r1, #129	; 0x81
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f001 fdd6 	bl	80064fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004954:	2101      	movs	r1, #1
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f001 fdcf 	bl	80064fa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004964:	2182      	movs	r1, #130	; 0x82
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f001 fdc7 	bl	80064fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00e      	beq.n	800499a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800498c:	4618      	mov	r0, r3
 800498e:	f001 fec1 	bl	8006714 <USBD_static_free>
    pdev->pClassData = NULL;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800499a:	7bfb      	ldrb	r3, [r7, #15]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049b4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80049b6:	2300      	movs	r3, #0
 80049b8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80049be:	2300      	movs	r3, #0
 80049c0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d039      	beq.n	8004a42 <USBD_CDC_Setup+0x9e>
 80049ce:	2b20      	cmp	r3, #32
 80049d0:	d17c      	bne.n	8004acc <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	88db      	ldrh	r3, [r3, #6]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d029      	beq.n	8004a2e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	b25b      	sxtb	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	da11      	bge.n	8004a08 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80049f0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	88d2      	ldrh	r2, [r2, #6]
 80049f6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80049f8:	6939      	ldr	r1, [r7, #16]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	88db      	ldrh	r3, [r3, #6]
 80049fe:	461a      	mov	r2, r3
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f001 f9c9 	bl	8005d98 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004a06:	e068      	b.n	8004ada <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	785a      	ldrb	r2, [r3, #1]
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	88db      	ldrh	r3, [r3, #6]
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004a1e:	6939      	ldr	r1, [r7, #16]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	88db      	ldrh	r3, [r3, #6]
 8004a24:	461a      	mov	r2, r3
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f001 f9e4 	bl	8005df4 <USBD_CtlPrepareRx>
      break;
 8004a2c:	e055      	b.n	8004ada <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	7850      	ldrb	r0, [r2, #1]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	6839      	ldr	r1, [r7, #0]
 8004a3e:	4798      	blx	r3
      break;
 8004a40:	e04b      	b.n	8004ada <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	785b      	ldrb	r3, [r3, #1]
 8004a46:	2b0a      	cmp	r3, #10
 8004a48:	d017      	beq.n	8004a7a <USBD_CDC_Setup+0xd6>
 8004a4a:	2b0b      	cmp	r3, #11
 8004a4c:	d029      	beq.n	8004aa2 <USBD_CDC_Setup+0xfe>
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d133      	bne.n	8004aba <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a58:	2b03      	cmp	r3, #3
 8004a5a:	d107      	bne.n	8004a6c <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004a5c:	f107 030c 	add.w	r3, r7, #12
 8004a60:	2202      	movs	r2, #2
 8004a62:	4619      	mov	r1, r3
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f001 f997 	bl	8005d98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004a6a:	e02e      	b.n	8004aca <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004a6c:	6839      	ldr	r1, [r7, #0]
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f001 f928 	bl	8005cc4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004a74:	2302      	movs	r3, #2
 8004a76:	75fb      	strb	r3, [r7, #23]
          break;
 8004a78:	e027      	b.n	8004aca <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a80:	2b03      	cmp	r3, #3
 8004a82:	d107      	bne.n	8004a94 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004a84:	f107 030f 	add.w	r3, r7, #15
 8004a88:	2201      	movs	r2, #1
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f001 f983 	bl	8005d98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004a92:	e01a      	b.n	8004aca <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004a94:	6839      	ldr	r1, [r7, #0]
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f001 f914 	bl	8005cc4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	75fb      	strb	r3, [r7, #23]
          break;
 8004aa0:	e013      	b.n	8004aca <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004aa8:	2b03      	cmp	r3, #3
 8004aaa:	d00d      	beq.n	8004ac8 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8004aac:	6839      	ldr	r1, [r7, #0]
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f001 f908 	bl	8005cc4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004ab8:	e006      	b.n	8004ac8 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8004aba:	6839      	ldr	r1, [r7, #0]
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f001 f901 	bl	8005cc4 <USBD_CtlError>
          ret = USBD_FAIL;
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	75fb      	strb	r3, [r7, #23]
          break;
 8004ac6:	e000      	b.n	8004aca <USBD_CDC_Setup+0x126>
          break;
 8004ac8:	bf00      	nop
      }
      break;
 8004aca:	e006      	b.n	8004ada <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8004acc:	6839      	ldr	r1, [r7, #0]
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f001 f8f8 	bl	8005cc4 <USBD_CtlError>
      ret = USBD_FAIL;
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ad8:	bf00      	nop
  }

  return ret;
 8004ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3718      	adds	r7, #24
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	460b      	mov	r3, r1
 8004aee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004af6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004afe:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d03a      	beq.n	8004b80 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004b0a:	78fa      	ldrb	r2, [r7, #3]
 8004b0c:	6879      	ldr	r1, [r7, #4]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	440b      	add	r3, r1
 8004b18:	331c      	adds	r3, #28
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d029      	beq.n	8004b74 <USBD_CDC_DataIn+0x90>
 8004b20:	78fa      	ldrb	r2, [r7, #3]
 8004b22:	6879      	ldr	r1, [r7, #4]
 8004b24:	4613      	mov	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	440b      	add	r3, r1
 8004b2e:	331c      	adds	r3, #28
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	78f9      	ldrb	r1, [r7, #3]
 8004b34:	68b8      	ldr	r0, [r7, #8]
 8004b36:	460b      	mov	r3, r1
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	440b      	add	r3, r1
 8004b3c:	00db      	lsls	r3, r3, #3
 8004b3e:	4403      	add	r3, r0
 8004b40:	3338      	adds	r3, #56	; 0x38
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	fbb2 f1f3 	udiv	r1, r2, r3
 8004b48:	fb03 f301 	mul.w	r3, r3, r1
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d110      	bne.n	8004b74 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004b52:	78fa      	ldrb	r2, [r7, #3]
 8004b54:	6879      	ldr	r1, [r7, #4]
 8004b56:	4613      	mov	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	440b      	add	r3, r1
 8004b60:	331c      	adds	r3, #28
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004b66:	78f9      	ldrb	r1, [r7, #3]
 8004b68:	2300      	movs	r3, #0
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f001 fd6c 	bl	800664a <USBD_LL_Transmit>
 8004b72:	e003      	b.n	8004b7c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	e000      	b.n	8004b82 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8004b80:	2302      	movs	r3, #2
  }
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b084      	sub	sp, #16
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
 8004b92:	460b      	mov	r3, r1
 8004b94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b9c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004b9e:	78fb      	ldrb	r3, [r7, #3]
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f001 fd97 	bl	80066d6 <USBD_LL_GetRxDataSize>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00d      	beq.n	8004bd6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004bce:	4611      	mov	r1, r2
 8004bd0:	4798      	blx	r3

    return USBD_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	e000      	b.n	8004bd8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004bd6:	2302      	movs	r3, #2
  }
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bee:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d015      	beq.n	8004c26 <USBD_CDC_EP0_RxReady+0x46>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004c00:	2bff      	cmp	r3, #255	; 0xff
 8004c02:	d010      	beq.n	8004c26 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8004c12:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004c1a:	b292      	uxth	r2, r2
 8004c1c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	22ff      	movs	r2, #255	; 0xff
 8004c22:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2243      	movs	r2, #67	; 0x43
 8004c3c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004c3e:	4b03      	ldr	r3, [pc, #12]	; (8004c4c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bc80      	pop	{r7}
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	20000094 	.word	0x20000094

08004c50 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2243      	movs	r2, #67	; 0x43
 8004c5c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004c5e:	4b03      	ldr	r3, [pc, #12]	; (8004c6c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bc80      	pop	{r7}
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	20000050 	.word	0x20000050

08004c70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2243      	movs	r2, #67	; 0x43
 8004c7c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8004c7e:	4b03      	ldr	r3, [pc, #12]	; (8004c8c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bc80      	pop	{r7}
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	200000d8 	.word	0x200000d8

08004c90 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	220a      	movs	r2, #10
 8004c9c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8004c9e:	4b03      	ldr	r3, [pc, #12]	; (8004cac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bc80      	pop	{r7}
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	2000000c 	.word	0x2000000c

08004cb0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004cba:	2302      	movs	r3, #2
 8004cbc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d005      	beq.n	8004cd0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bc80      	pop	{r7}
 8004cda:	4770      	bx	lr

08004cdc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b087      	sub	sp, #28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cf0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004cfa:	88fa      	ldrh	r2, [r7, #6]
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	371c      	adds	r7, #28
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bc80      	pop	{r7}
 8004d0c:	4770      	bx	lr

08004d0e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b085      	sub	sp, #20
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d1e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3714      	adds	r7, #20
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bc80      	pop	{r7}
 8004d32:	4770      	bx	lr

08004d34 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d017      	beq.n	8004d7e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	7c1b      	ldrb	r3, [r3, #16]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d109      	bne.n	8004d6a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d60:	2101      	movs	r1, #1
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f001 fc94 	bl	8006690 <USBD_LL_PrepareReceive>
 8004d68:	e007      	b.n	8004d7a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d70:	2340      	movs	r3, #64	; 0x40
 8004d72:	2101      	movs	r1, #1
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f001 fc8b 	bl	8006690 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	e000      	b.n	8004d80 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8004d7e:	2302      	movs	r3, #2
  }
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	4613      	mov	r3, r2
 8004d94:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	e01a      	b.n	8004dd6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	79fa      	ldrb	r2, [r7, #7]
 8004dcc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f001 faf8 	bl	80063c4 <USBD_LL_Init>

  return USBD_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b085      	sub	sp, #20
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
 8004de6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8004de8:	2300      	movs	r3, #0
 8004dea:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d006      	beq.n	8004e00 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	683a      	ldr	r2, [r7, #0]
 8004df6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	73fb      	strb	r3, [r7, #15]
 8004dfe:	e001      	b.n	8004e04 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004e00:	2302      	movs	r3, #2
 8004e02:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bc80      	pop	{r7}
 8004e0e:	4770      	bx	lr

08004e10 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f001 fb2d 	bl	8006478 <USBD_LL_Start>

  return USBD_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bc80      	pop	{r7}
 8004e3a:	4770      	bx	lr

08004e3c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	460b      	mov	r3, r1
 8004e46:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004e48:	2302      	movs	r3, #2
 8004e4a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00c      	beq.n	8004e70 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	78fa      	ldrb	r2, [r7, #3]
 8004e60:	4611      	mov	r1, r2
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	4798      	blx	r3
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d101      	bne.n	8004e70 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b082      	sub	sp, #8
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	460b      	mov	r3, r1
 8004e84:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	78fa      	ldrb	r2, [r7, #3]
 8004e90:	4611      	mov	r1, r2
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	4798      	blx	r3

  return USBD_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3708      	adds	r7, #8
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004eb0:	6839      	ldr	r1, [r7, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 feca 	bl	8005c4c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004ed4:	f003 031f 	and.w	r3, r3, #31
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d00c      	beq.n	8004ef6 <USBD_LL_SetupStage+0x56>
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d302      	bcc.n	8004ee6 <USBD_LL_SetupStage+0x46>
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d010      	beq.n	8004f06 <USBD_LL_SetupStage+0x66>
 8004ee4:	e017      	b.n	8004f16 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004eec:	4619      	mov	r1, r3
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f9ca 	bl	8005288 <USBD_StdDevReq>
      break;
 8004ef4:	e01a      	b.n	8004f2c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004efc:	4619      	mov	r1, r3
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 fa2c 	bl	800535c <USBD_StdItfReq>
      break;
 8004f04:	e012      	b.n	8004f2c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fa6a 	bl	80053e8 <USBD_StdEPReq>
      break;
 8004f14:	e00a      	b.n	8004f2c <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004f1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	4619      	mov	r1, r3
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f001 fb07 	bl	8006538 <USBD_LL_StallEP>
      break;
 8004f2a:	bf00      	nop
  }

  return USBD_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3708      	adds	r7, #8
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b086      	sub	sp, #24
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	60f8      	str	r0, [r7, #12]
 8004f3e:	460b      	mov	r3, r1
 8004f40:	607a      	str	r2, [r7, #4]
 8004f42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004f44:	7afb      	ldrb	r3, [r7, #11]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d14b      	bne.n	8004fe2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004f50:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004f58:	2b03      	cmp	r3, #3
 8004f5a:	d134      	bne.n	8004fc6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	68da      	ldr	r2, [r3, #12]
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d919      	bls.n	8004f9c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	68da      	ldr	r2, [r3, #12]
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	1ad2      	subs	r2, r2, r3
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d203      	bcs.n	8004f8a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	e002      	b.n	8004f90 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	461a      	mov	r2, r3
 8004f92:	6879      	ldr	r1, [r7, #4]
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 ff4b 	bl	8005e30 <USBD_CtlContinueRx>
 8004f9a:	e038      	b.n	800500e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00a      	beq.n	8004fbe <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	d105      	bne.n	8004fbe <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f000 ff48 	bl	8005e54 <USBD_CtlSendStatus>
 8004fc4:	e023      	b.n	800500e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004fcc:	2b05      	cmp	r3, #5
 8004fce:	d11e      	bne.n	800500e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004fd8:	2100      	movs	r1, #0
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f001 faac 	bl	8006538 <USBD_LL_StallEP>
 8004fe0:	e015      	b.n	800500e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00d      	beq.n	800500a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004ff4:	2b03      	cmp	r3, #3
 8004ff6:	d108      	bne.n	800500a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	7afa      	ldrb	r2, [r7, #11]
 8005002:	4611      	mov	r1, r2
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	4798      	blx	r3
 8005008:	e001      	b.n	800500e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800500a:	2302      	movs	r3, #2
 800500c:	e000      	b.n	8005010 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3718      	adds	r7, #24
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	460b      	mov	r3, r1
 8005022:	607a      	str	r2, [r7, #4]
 8005024:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005026:	7afb      	ldrb	r3, [r7, #11]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d17f      	bne.n	800512c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	3314      	adds	r3, #20
 8005030:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005038:	2b02      	cmp	r3, #2
 800503a:	d15c      	bne.n	80050f6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	68da      	ldr	r2, [r3, #12]
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	429a      	cmp	r2, r3
 8005046:	d915      	bls.n	8005074 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	1ad2      	subs	r2, r2, r3
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	b29b      	uxth	r3, r3
 800505c:	461a      	mov	r2, r3
 800505e:	6879      	ldr	r1, [r7, #4]
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 feb5 	bl	8005dd0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005066:	2300      	movs	r3, #0
 8005068:	2200      	movs	r2, #0
 800506a:	2100      	movs	r1, #0
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f001 fb0f 	bl	8006690 <USBD_LL_PrepareReceive>
 8005072:	e04e      	b.n	8005112 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	6912      	ldr	r2, [r2, #16]
 800507c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005080:	fb02 f201 	mul.w	r2, r2, r1
 8005084:	1a9b      	subs	r3, r3, r2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d11c      	bne.n	80050c4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	689a      	ldr	r2, [r3, #8]
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005092:	429a      	cmp	r2, r3
 8005094:	d316      	bcc.n	80050c4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	689a      	ldr	r2, [r3, #8]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d20f      	bcs.n	80050c4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80050a4:	2200      	movs	r2, #0
 80050a6:	2100      	movs	r1, #0
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 fe91 	bl	8005dd0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80050b6:	2300      	movs	r3, #0
 80050b8:	2200      	movs	r2, #0
 80050ba:	2100      	movs	r1, #0
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f001 fae7 	bl	8006690 <USBD_LL_PrepareReceive>
 80050c2:	e026      	b.n	8005112 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00a      	beq.n	80050e6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80050d6:	2b03      	cmp	r3, #3
 80050d8:	d105      	bne.n	80050e6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80050e6:	2180      	movs	r1, #128	; 0x80
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f001 fa25 	bl	8006538 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 fec3 	bl	8005e7a <USBD_CtlReceiveStatus>
 80050f4:	e00d      	b.n	8005112 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80050fc:	2b04      	cmp	r3, #4
 80050fe:	d004      	beq.n	800510a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005106:	2b00      	cmp	r3, #0
 8005108:	d103      	bne.n	8005112 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800510a:	2180      	movs	r1, #128	; 0x80
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f001 fa13 	bl	8006538 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005118:	2b01      	cmp	r3, #1
 800511a:	d11d      	bne.n	8005158 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f7ff fe83 	bl	8004e28 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800512a:	e015      	b.n	8005158 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00d      	beq.n	8005154 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800513e:	2b03      	cmp	r3, #3
 8005140:	d108      	bne.n	8005154 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	7afa      	ldrb	r2, [r7, #11]
 800514c:	4611      	mov	r1, r2
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	4798      	blx	r3
 8005152:	e001      	b.n	8005158 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005154:	2302      	movs	r3, #2
 8005156:	e000      	b.n	800515a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b082      	sub	sp, #8
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800516a:	2340      	movs	r3, #64	; 0x40
 800516c:	2200      	movs	r2, #0
 800516e:	2100      	movs	r1, #0
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f001 f99c 	bl	80064ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2240      	movs	r2, #64	; 0x40
 8005182:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005186:	2340      	movs	r3, #64	; 0x40
 8005188:	2200      	movs	r2, #0
 800518a:	2180      	movs	r1, #128	; 0x80
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f001 f98e 	bl	80064ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2240      	movs	r2, #64	; 0x40
 800519c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d009      	beq.n	80051da <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	6852      	ldr	r2, [r2, #4]
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	4611      	mov	r1, r2
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	4798      	blx	r3
  }

  return USBD_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	460b      	mov	r3, r1
 80051ee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	78fa      	ldrb	r2, [r7, #3]
 80051f4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bc80      	pop	{r7}
 8005200:	4770      	bx	lr

08005202 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005202:	b480      	push	{r7}
 8005204:	b083      	sub	sp, #12
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2204      	movs	r2, #4
 800521a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	bc80      	pop	{r7}
 8005228:	4770      	bx	lr

0800522a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800522a:	b480      	push	{r7}
 800522c:	b083      	sub	sp, #12
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005238:	2b04      	cmp	r3, #4
 800523a:	d105      	bne.n	8005248 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	bc80      	pop	{r7}
 8005252:	4770      	bx	lr

08005254 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005262:	2b03      	cmp	r3, #3
 8005264:	d10b      	bne.n	800527e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d005      	beq.n	800527e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005292:	2300      	movs	r3, #0
 8005294:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800529e:	2b20      	cmp	r3, #32
 80052a0:	d004      	beq.n	80052ac <USBD_StdDevReq+0x24>
 80052a2:	2b40      	cmp	r3, #64	; 0x40
 80052a4:	d002      	beq.n	80052ac <USBD_StdDevReq+0x24>
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d008      	beq.n	80052bc <USBD_StdDevReq+0x34>
 80052aa:	e04c      	b.n	8005346 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	6839      	ldr	r1, [r7, #0]
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	4798      	blx	r3
      break;
 80052ba:	e049      	b.n	8005350 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	785b      	ldrb	r3, [r3, #1]
 80052c0:	2b09      	cmp	r3, #9
 80052c2:	d83a      	bhi.n	800533a <USBD_StdDevReq+0xb2>
 80052c4:	a201      	add	r2, pc, #4	; (adr r2, 80052cc <USBD_StdDevReq+0x44>)
 80052c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ca:	bf00      	nop
 80052cc:	0800531d 	.word	0x0800531d
 80052d0:	08005331 	.word	0x08005331
 80052d4:	0800533b 	.word	0x0800533b
 80052d8:	08005327 	.word	0x08005327
 80052dc:	0800533b 	.word	0x0800533b
 80052e0:	080052ff 	.word	0x080052ff
 80052e4:	080052f5 	.word	0x080052f5
 80052e8:	0800533b 	.word	0x0800533b
 80052ec:	08005313 	.word	0x08005313
 80052f0:	08005309 	.word	0x08005309
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80052f4:	6839      	ldr	r1, [r7, #0]
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f9d4 	bl	80056a4 <USBD_GetDescriptor>
          break;
 80052fc:	e022      	b.n	8005344 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80052fe:	6839      	ldr	r1, [r7, #0]
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 fb37 	bl	8005974 <USBD_SetAddress>
          break;
 8005306:	e01d      	b.n	8005344 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005308:	6839      	ldr	r1, [r7, #0]
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fb74 	bl	80059f8 <USBD_SetConfig>
          break;
 8005310:	e018      	b.n	8005344 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005312:	6839      	ldr	r1, [r7, #0]
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 fbfd 	bl	8005b14 <USBD_GetConfig>
          break;
 800531a:	e013      	b.n	8005344 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800531c:	6839      	ldr	r1, [r7, #0]
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 fc2c 	bl	8005b7c <USBD_GetStatus>
          break;
 8005324:	e00e      	b.n	8005344 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005326:	6839      	ldr	r1, [r7, #0]
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 fc5a 	bl	8005be2 <USBD_SetFeature>
          break;
 800532e:	e009      	b.n	8005344 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005330:	6839      	ldr	r1, [r7, #0]
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 fc69 	bl	8005c0a <USBD_ClrFeature>
          break;
 8005338:	e004      	b.n	8005344 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800533a:	6839      	ldr	r1, [r7, #0]
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 fcc1 	bl	8005cc4 <USBD_CtlError>
          break;
 8005342:	bf00      	nop
      }
      break;
 8005344:	e004      	b.n	8005350 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005346:	6839      	ldr	r1, [r7, #0]
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 fcbb 	bl	8005cc4 <USBD_CtlError>
      break;
 800534e:	bf00      	nop
  }

  return ret;
 8005350:	7bfb      	ldrb	r3, [r7, #15]
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop

0800535c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005366:	2300      	movs	r3, #0
 8005368:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005372:	2b20      	cmp	r3, #32
 8005374:	d003      	beq.n	800537e <USBD_StdItfReq+0x22>
 8005376:	2b40      	cmp	r3, #64	; 0x40
 8005378:	d001      	beq.n	800537e <USBD_StdItfReq+0x22>
 800537a:	2b00      	cmp	r3, #0
 800537c:	d12a      	bne.n	80053d4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005384:	3b01      	subs	r3, #1
 8005386:	2b02      	cmp	r3, #2
 8005388:	d81d      	bhi.n	80053c6 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	889b      	ldrh	r3, [r3, #4]
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b01      	cmp	r3, #1
 8005392:	d813      	bhi.n	80053bc <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	6839      	ldr	r1, [r7, #0]
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	4798      	blx	r3
 80053a2:	4603      	mov	r3, r0
 80053a4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	88db      	ldrh	r3, [r3, #6]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d110      	bne.n	80053d0 <USBD_StdItfReq+0x74>
 80053ae:	7bfb      	ldrb	r3, [r7, #15]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10d      	bne.n	80053d0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 fd4d 	bl	8005e54 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80053ba:	e009      	b.n	80053d0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80053bc:	6839      	ldr	r1, [r7, #0]
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fc80 	bl	8005cc4 <USBD_CtlError>
          break;
 80053c4:	e004      	b.n	80053d0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80053c6:	6839      	ldr	r1, [r7, #0]
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 fc7b 	bl	8005cc4 <USBD_CtlError>
          break;
 80053ce:	e000      	b.n	80053d2 <USBD_StdItfReq+0x76>
          break;
 80053d0:	bf00      	nop
      }
      break;
 80053d2:	e004      	b.n	80053de <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80053d4:	6839      	ldr	r1, [r7, #0]
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fc74 	bl	8005cc4 <USBD_CtlError>
      break;
 80053dc:	bf00      	nop
  }

  return USBD_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80053f2:	2300      	movs	r3, #0
 80053f4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	889b      	ldrh	r3, [r3, #4]
 80053fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005404:	2b20      	cmp	r3, #32
 8005406:	d004      	beq.n	8005412 <USBD_StdEPReq+0x2a>
 8005408:	2b40      	cmp	r3, #64	; 0x40
 800540a:	d002      	beq.n	8005412 <USBD_StdEPReq+0x2a>
 800540c:	2b00      	cmp	r3, #0
 800540e:	d008      	beq.n	8005422 <USBD_StdEPReq+0x3a>
 8005410:	e13d      	b.n	800568e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	6839      	ldr	r1, [r7, #0]
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	4798      	blx	r3
      break;
 8005420:	e13a      	b.n	8005698 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800542a:	2b20      	cmp	r3, #32
 800542c:	d10a      	bne.n	8005444 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	6839      	ldr	r1, [r7, #0]
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	4798      	blx	r3
 800543c:	4603      	mov	r3, r0
 800543e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005440:	7bfb      	ldrb	r3, [r7, #15]
 8005442:	e12a      	b.n	800569a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	785b      	ldrb	r3, [r3, #1]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d03e      	beq.n	80054ca <USBD_StdEPReq+0xe2>
 800544c:	2b03      	cmp	r3, #3
 800544e:	d002      	beq.n	8005456 <USBD_StdEPReq+0x6e>
 8005450:	2b00      	cmp	r3, #0
 8005452:	d070      	beq.n	8005536 <USBD_StdEPReq+0x14e>
 8005454:	e115      	b.n	8005682 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800545c:	2b02      	cmp	r3, #2
 800545e:	d002      	beq.n	8005466 <USBD_StdEPReq+0x7e>
 8005460:	2b03      	cmp	r3, #3
 8005462:	d015      	beq.n	8005490 <USBD_StdEPReq+0xa8>
 8005464:	e02b      	b.n	80054be <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005466:	7bbb      	ldrb	r3, [r7, #14]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00c      	beq.n	8005486 <USBD_StdEPReq+0x9e>
 800546c:	7bbb      	ldrb	r3, [r7, #14]
 800546e:	2b80      	cmp	r3, #128	; 0x80
 8005470:	d009      	beq.n	8005486 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005472:	7bbb      	ldrb	r3, [r7, #14]
 8005474:	4619      	mov	r1, r3
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f001 f85e 	bl	8006538 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800547c:	2180      	movs	r1, #128	; 0x80
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f001 f85a 	bl	8006538 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005484:	e020      	b.n	80054c8 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005486:	6839      	ldr	r1, [r7, #0]
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 fc1b 	bl	8005cc4 <USBD_CtlError>
              break;
 800548e:	e01b      	b.n	80054c8 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	885b      	ldrh	r3, [r3, #2]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10e      	bne.n	80054b6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005498:	7bbb      	ldrb	r3, [r7, #14]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00b      	beq.n	80054b6 <USBD_StdEPReq+0xce>
 800549e:	7bbb      	ldrb	r3, [r7, #14]
 80054a0:	2b80      	cmp	r3, #128	; 0x80
 80054a2:	d008      	beq.n	80054b6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	88db      	ldrh	r3, [r3, #6]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d104      	bne.n	80054b6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80054ac:	7bbb      	ldrb	r3, [r7, #14]
 80054ae:	4619      	mov	r1, r3
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f001 f841 	bl	8006538 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fccc 	bl	8005e54 <USBD_CtlSendStatus>

              break;
 80054bc:	e004      	b.n	80054c8 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80054be:	6839      	ldr	r1, [r7, #0]
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 fbff 	bl	8005cc4 <USBD_CtlError>
              break;
 80054c6:	bf00      	nop
          }
          break;
 80054c8:	e0e0      	b.n	800568c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d002      	beq.n	80054da <USBD_StdEPReq+0xf2>
 80054d4:	2b03      	cmp	r3, #3
 80054d6:	d015      	beq.n	8005504 <USBD_StdEPReq+0x11c>
 80054d8:	e026      	b.n	8005528 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80054da:	7bbb      	ldrb	r3, [r7, #14]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00c      	beq.n	80054fa <USBD_StdEPReq+0x112>
 80054e0:	7bbb      	ldrb	r3, [r7, #14]
 80054e2:	2b80      	cmp	r3, #128	; 0x80
 80054e4:	d009      	beq.n	80054fa <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80054e6:	7bbb      	ldrb	r3, [r7, #14]
 80054e8:	4619      	mov	r1, r3
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f001 f824 	bl	8006538 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80054f0:	2180      	movs	r1, #128	; 0x80
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f001 f820 	bl	8006538 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80054f8:	e01c      	b.n	8005534 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80054fa:	6839      	ldr	r1, [r7, #0]
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 fbe1 	bl	8005cc4 <USBD_CtlError>
              break;
 8005502:	e017      	b.n	8005534 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	885b      	ldrh	r3, [r3, #2]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d112      	bne.n	8005532 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800550c:	7bbb      	ldrb	r3, [r7, #14]
 800550e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005512:	2b00      	cmp	r3, #0
 8005514:	d004      	beq.n	8005520 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005516:	7bbb      	ldrb	r3, [r7, #14]
 8005518:	4619      	mov	r1, r3
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f001 f82b 	bl	8006576 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 fc97 	bl	8005e54 <USBD_CtlSendStatus>
              }
              break;
 8005526:	e004      	b.n	8005532 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005528:	6839      	ldr	r1, [r7, #0]
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fbca 	bl	8005cc4 <USBD_CtlError>
              break;
 8005530:	e000      	b.n	8005534 <USBD_StdEPReq+0x14c>
              break;
 8005532:	bf00      	nop
          }
          break;
 8005534:	e0aa      	b.n	800568c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800553c:	2b02      	cmp	r3, #2
 800553e:	d002      	beq.n	8005546 <USBD_StdEPReq+0x15e>
 8005540:	2b03      	cmp	r3, #3
 8005542:	d032      	beq.n	80055aa <USBD_StdEPReq+0x1c2>
 8005544:	e097      	b.n	8005676 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005546:	7bbb      	ldrb	r3, [r7, #14]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d007      	beq.n	800555c <USBD_StdEPReq+0x174>
 800554c:	7bbb      	ldrb	r3, [r7, #14]
 800554e:	2b80      	cmp	r3, #128	; 0x80
 8005550:	d004      	beq.n	800555c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005552:	6839      	ldr	r1, [r7, #0]
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fbb5 	bl	8005cc4 <USBD_CtlError>
                break;
 800555a:	e091      	b.n	8005680 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800555c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005560:	2b00      	cmp	r3, #0
 8005562:	da0b      	bge.n	800557c <USBD_StdEPReq+0x194>
 8005564:	7bbb      	ldrb	r3, [r7, #14]
 8005566:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800556a:	4613      	mov	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	3310      	adds	r3, #16
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	4413      	add	r3, r2
 8005578:	3304      	adds	r3, #4
 800557a:	e00b      	b.n	8005594 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800557c:	7bbb      	ldrb	r3, [r7, #14]
 800557e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005582:	4613      	mov	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	4413      	add	r3, r2
 8005592:	3304      	adds	r3, #4
 8005594:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	2202      	movs	r2, #2
 80055a0:	4619      	mov	r1, r3
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 fbf8 	bl	8005d98 <USBD_CtlSendData>
              break;
 80055a8:	e06a      	b.n	8005680 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80055aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	da11      	bge.n	80055d6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80055b2:	7bbb      	ldrb	r3, [r7, #14]
 80055b4:	f003 020f 	and.w	r2, r3, #15
 80055b8:	6879      	ldr	r1, [r7, #4]
 80055ba:	4613      	mov	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	440b      	add	r3, r1
 80055c4:	3318      	adds	r3, #24
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d117      	bne.n	80055fc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80055cc:	6839      	ldr	r1, [r7, #0]
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 fb78 	bl	8005cc4 <USBD_CtlError>
                  break;
 80055d4:	e054      	b.n	8005680 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80055d6:	7bbb      	ldrb	r3, [r7, #14]
 80055d8:	f003 020f 	and.w	r2, r3, #15
 80055dc:	6879      	ldr	r1, [r7, #4]
 80055de:	4613      	mov	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	440b      	add	r3, r1
 80055e8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d104      	bne.n	80055fc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80055f2:	6839      	ldr	r1, [r7, #0]
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 fb65 	bl	8005cc4 <USBD_CtlError>
                  break;
 80055fa:	e041      	b.n	8005680 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80055fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005600:	2b00      	cmp	r3, #0
 8005602:	da0b      	bge.n	800561c <USBD_StdEPReq+0x234>
 8005604:	7bbb      	ldrb	r3, [r7, #14]
 8005606:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800560a:	4613      	mov	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	3310      	adds	r3, #16
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	4413      	add	r3, r2
 8005618:	3304      	adds	r3, #4
 800561a:	e00b      	b.n	8005634 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800561c:	7bbb      	ldrb	r3, [r7, #14]
 800561e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005622:	4613      	mov	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	4413      	add	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	4413      	add	r3, r2
 8005632:	3304      	adds	r3, #4
 8005634:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005636:	7bbb      	ldrb	r3, [r7, #14]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d002      	beq.n	8005642 <USBD_StdEPReq+0x25a>
 800563c:	7bbb      	ldrb	r3, [r7, #14]
 800563e:	2b80      	cmp	r3, #128	; 0x80
 8005640:	d103      	bne.n	800564a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2200      	movs	r2, #0
 8005646:	601a      	str	r2, [r3, #0]
 8005648:	e00e      	b.n	8005668 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800564a:	7bbb      	ldrb	r3, [r7, #14]
 800564c:	4619      	mov	r1, r3
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 ffb0 	bl	80065b4 <USBD_LL_IsStallEP>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	2201      	movs	r2, #1
 800565e:	601a      	str	r2, [r3, #0]
 8005660:	e002      	b.n	8005668 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	2200      	movs	r2, #0
 8005666:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	2202      	movs	r2, #2
 800566c:	4619      	mov	r1, r3
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 fb92 	bl	8005d98 <USBD_CtlSendData>
              break;
 8005674:	e004      	b.n	8005680 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005676:	6839      	ldr	r1, [r7, #0]
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fb23 	bl	8005cc4 <USBD_CtlError>
              break;
 800567e:	bf00      	nop
          }
          break;
 8005680:	e004      	b.n	800568c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005682:	6839      	ldr	r1, [r7, #0]
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 fb1d 	bl	8005cc4 <USBD_CtlError>
          break;
 800568a:	bf00      	nop
      }
      break;
 800568c:	e004      	b.n	8005698 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800568e:	6839      	ldr	r1, [r7, #0]
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fb17 	bl	8005cc4 <USBD_CtlError>
      break;
 8005696:	bf00      	nop
  }

  return ret;
 8005698:	7bfb      	ldrb	r3, [r7, #15]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
	...

080056a4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80056ae:	2300      	movs	r3, #0
 80056b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80056b2:	2300      	movs	r3, #0
 80056b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80056b6:	2300      	movs	r3, #0
 80056b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	885b      	ldrh	r3, [r3, #2]
 80056be:	0a1b      	lsrs	r3, r3, #8
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	3b01      	subs	r3, #1
 80056c4:	2b06      	cmp	r3, #6
 80056c6:	f200 8128 	bhi.w	800591a <USBD_GetDescriptor+0x276>
 80056ca:	a201      	add	r2, pc, #4	; (adr r2, 80056d0 <USBD_GetDescriptor+0x2c>)
 80056cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d0:	080056ed 	.word	0x080056ed
 80056d4:	08005705 	.word	0x08005705
 80056d8:	08005745 	.word	0x08005745
 80056dc:	0800591b 	.word	0x0800591b
 80056e0:	0800591b 	.word	0x0800591b
 80056e4:	080058bb 	.word	0x080058bb
 80056e8:	080058e7 	.word	0x080058e7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	7c12      	ldrb	r2, [r2, #16]
 80056f8:	f107 0108 	add.w	r1, r7, #8
 80056fc:	4610      	mov	r0, r2
 80056fe:	4798      	blx	r3
 8005700:	60f8      	str	r0, [r7, #12]
      break;
 8005702:	e112      	b.n	800592a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	7c1b      	ldrb	r3, [r3, #16]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10d      	bne.n	8005728 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005714:	f107 0208 	add.w	r2, r7, #8
 8005718:	4610      	mov	r0, r2
 800571a:	4798      	blx	r3
 800571c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	3301      	adds	r3, #1
 8005722:	2202      	movs	r2, #2
 8005724:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005726:	e100      	b.n	800592a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800572e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005730:	f107 0208 	add.w	r2, r7, #8
 8005734:	4610      	mov	r0, r2
 8005736:	4798      	blx	r3
 8005738:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	3301      	adds	r3, #1
 800573e:	2202      	movs	r2, #2
 8005740:	701a      	strb	r2, [r3, #0]
      break;
 8005742:	e0f2      	b.n	800592a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	885b      	ldrh	r3, [r3, #2]
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b05      	cmp	r3, #5
 800574c:	f200 80ac 	bhi.w	80058a8 <USBD_GetDescriptor+0x204>
 8005750:	a201      	add	r2, pc, #4	; (adr r2, 8005758 <USBD_GetDescriptor+0xb4>)
 8005752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005756:	bf00      	nop
 8005758:	08005771 	.word	0x08005771
 800575c:	080057a5 	.word	0x080057a5
 8005760:	080057d9 	.word	0x080057d9
 8005764:	0800580d 	.word	0x0800580d
 8005768:	08005841 	.word	0x08005841
 800576c:	08005875 	.word	0x08005875
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00b      	beq.n	8005794 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	7c12      	ldrb	r2, [r2, #16]
 8005788:	f107 0108 	add.w	r1, r7, #8
 800578c:	4610      	mov	r0, r2
 800578e:	4798      	blx	r3
 8005790:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005792:	e091      	b.n	80058b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005794:	6839      	ldr	r1, [r7, #0]
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 fa94 	bl	8005cc4 <USBD_CtlError>
            err++;
 800579c:	7afb      	ldrb	r3, [r7, #11]
 800579e:	3301      	adds	r3, #1
 80057a0:	72fb      	strb	r3, [r7, #11]
          break;
 80057a2:	e089      	b.n	80058b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00b      	beq.n	80057c8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	7c12      	ldrb	r2, [r2, #16]
 80057bc:	f107 0108 	add.w	r1, r7, #8
 80057c0:	4610      	mov	r0, r2
 80057c2:	4798      	blx	r3
 80057c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057c6:	e077      	b.n	80058b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057c8:	6839      	ldr	r1, [r7, #0]
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 fa7a 	bl	8005cc4 <USBD_CtlError>
            err++;
 80057d0:	7afb      	ldrb	r3, [r7, #11]
 80057d2:	3301      	adds	r3, #1
 80057d4:	72fb      	strb	r3, [r7, #11]
          break;
 80057d6:	e06f      	b.n	80058b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00b      	beq.n	80057fc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	7c12      	ldrb	r2, [r2, #16]
 80057f0:	f107 0108 	add.w	r1, r7, #8
 80057f4:	4610      	mov	r0, r2
 80057f6:	4798      	blx	r3
 80057f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057fa:	e05d      	b.n	80058b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057fc:	6839      	ldr	r1, [r7, #0]
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fa60 	bl	8005cc4 <USBD_CtlError>
            err++;
 8005804:	7afb      	ldrb	r3, [r7, #11]
 8005806:	3301      	adds	r3, #1
 8005808:	72fb      	strb	r3, [r7, #11]
          break;
 800580a:	e055      	b.n	80058b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00b      	beq.n	8005830 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	7c12      	ldrb	r2, [r2, #16]
 8005824:	f107 0108 	add.w	r1, r7, #8
 8005828:	4610      	mov	r0, r2
 800582a:	4798      	blx	r3
 800582c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800582e:	e043      	b.n	80058b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005830:	6839      	ldr	r1, [r7, #0]
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 fa46 	bl	8005cc4 <USBD_CtlError>
            err++;
 8005838:	7afb      	ldrb	r3, [r7, #11]
 800583a:	3301      	adds	r3, #1
 800583c:	72fb      	strb	r3, [r7, #11]
          break;
 800583e:	e03b      	b.n	80058b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005846:	695b      	ldr	r3, [r3, #20]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00b      	beq.n	8005864 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	7c12      	ldrb	r2, [r2, #16]
 8005858:	f107 0108 	add.w	r1, r7, #8
 800585c:	4610      	mov	r0, r2
 800585e:	4798      	blx	r3
 8005860:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005862:	e029      	b.n	80058b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005864:	6839      	ldr	r1, [r7, #0]
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 fa2c 	bl	8005cc4 <USBD_CtlError>
            err++;
 800586c:	7afb      	ldrb	r3, [r7, #11]
 800586e:	3301      	adds	r3, #1
 8005870:	72fb      	strb	r3, [r7, #11]
          break;
 8005872:	e021      	b.n	80058b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00b      	beq.n	8005898 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	7c12      	ldrb	r2, [r2, #16]
 800588c:	f107 0108 	add.w	r1, r7, #8
 8005890:	4610      	mov	r0, r2
 8005892:	4798      	blx	r3
 8005894:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005896:	e00f      	b.n	80058b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005898:	6839      	ldr	r1, [r7, #0]
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fa12 	bl	8005cc4 <USBD_CtlError>
            err++;
 80058a0:	7afb      	ldrb	r3, [r7, #11]
 80058a2:	3301      	adds	r3, #1
 80058a4:	72fb      	strb	r3, [r7, #11]
          break;
 80058a6:	e007      	b.n	80058b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80058a8:	6839      	ldr	r1, [r7, #0]
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fa0a 	bl	8005cc4 <USBD_CtlError>
          err++;
 80058b0:	7afb      	ldrb	r3, [r7, #11]
 80058b2:	3301      	adds	r3, #1
 80058b4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80058b6:	e038      	b.n	800592a <USBD_GetDescriptor+0x286>
 80058b8:	e037      	b.n	800592a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	7c1b      	ldrb	r3, [r3, #16]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d109      	bne.n	80058d6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ca:	f107 0208 	add.w	r2, r7, #8
 80058ce:	4610      	mov	r0, r2
 80058d0:	4798      	blx	r3
 80058d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80058d4:	e029      	b.n	800592a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80058d6:	6839      	ldr	r1, [r7, #0]
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f9f3 	bl	8005cc4 <USBD_CtlError>
        err++;
 80058de:	7afb      	ldrb	r3, [r7, #11]
 80058e0:	3301      	adds	r3, #1
 80058e2:	72fb      	strb	r3, [r7, #11]
      break;
 80058e4:	e021      	b.n	800592a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	7c1b      	ldrb	r3, [r3, #16]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10d      	bne.n	800590a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f6:	f107 0208 	add.w	r2, r7, #8
 80058fa:	4610      	mov	r0, r2
 80058fc:	4798      	blx	r3
 80058fe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	3301      	adds	r3, #1
 8005904:	2207      	movs	r2, #7
 8005906:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005908:	e00f      	b.n	800592a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800590a:	6839      	ldr	r1, [r7, #0]
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f9d9 	bl	8005cc4 <USBD_CtlError>
        err++;
 8005912:	7afb      	ldrb	r3, [r7, #11]
 8005914:	3301      	adds	r3, #1
 8005916:	72fb      	strb	r3, [r7, #11]
      break;
 8005918:	e007      	b.n	800592a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800591a:	6839      	ldr	r1, [r7, #0]
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 f9d1 	bl	8005cc4 <USBD_CtlError>
      err++;
 8005922:	7afb      	ldrb	r3, [r7, #11]
 8005924:	3301      	adds	r3, #1
 8005926:	72fb      	strb	r3, [r7, #11]
      break;
 8005928:	bf00      	nop
  }

  if (err != 0U)
 800592a:	7afb      	ldrb	r3, [r7, #11]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d11c      	bne.n	800596a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005930:	893b      	ldrh	r3, [r7, #8]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d011      	beq.n	800595a <USBD_GetDescriptor+0x2b6>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	88db      	ldrh	r3, [r3, #6]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00d      	beq.n	800595a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	88da      	ldrh	r2, [r3, #6]
 8005942:	893b      	ldrh	r3, [r7, #8]
 8005944:	4293      	cmp	r3, r2
 8005946:	bf28      	it	cs
 8005948:	4613      	movcs	r3, r2
 800594a:	b29b      	uxth	r3, r3
 800594c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800594e:	893b      	ldrh	r3, [r7, #8]
 8005950:	461a      	mov	r2, r3
 8005952:	68f9      	ldr	r1, [r7, #12]
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 fa1f 	bl	8005d98 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	88db      	ldrh	r3, [r3, #6]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d104      	bne.n	800596c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 fa76 	bl	8005e54 <USBD_CtlSendStatus>
 8005968:	e000      	b.n	800596c <USBD_GetDescriptor+0x2c8>
    return;
 800596a:	bf00      	nop
    }
  }
}
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop

08005974 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	889b      	ldrh	r3, [r3, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d130      	bne.n	80059e8 <USBD_SetAddress+0x74>
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	88db      	ldrh	r3, [r3, #6]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d12c      	bne.n	80059e8 <USBD_SetAddress+0x74>
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	885b      	ldrh	r3, [r3, #2]
 8005992:	2b7f      	cmp	r3, #127	; 0x7f
 8005994:	d828      	bhi.n	80059e8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	885b      	ldrh	r3, [r3, #2]
 800599a:	b2db      	uxtb	r3, r3
 800599c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059a8:	2b03      	cmp	r3, #3
 80059aa:	d104      	bne.n	80059b6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80059ac:	6839      	ldr	r1, [r7, #0]
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f988 	bl	8005cc4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059b4:	e01c      	b.n	80059f0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	7bfa      	ldrb	r2, [r7, #15]
 80059ba:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80059be:	7bfb      	ldrb	r3, [r7, #15]
 80059c0:	4619      	mov	r1, r3
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 fe22 	bl	800660c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fa43 	bl	8005e54 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d004      	beq.n	80059de <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059dc:	e008      	b.n	80059f0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059e6:	e003      	b.n	80059f0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80059e8:	6839      	ldr	r1, [r7, #0]
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f96a 	bl	8005cc4 <USBD_CtlError>
  }
}
 80059f0:	bf00      	nop
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	885b      	ldrh	r3, [r3, #2]
 8005a06:	b2da      	uxtb	r2, r3
 8005a08:	4b41      	ldr	r3, [pc, #260]	; (8005b10 <USBD_SetConfig+0x118>)
 8005a0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005a0c:	4b40      	ldr	r3, [pc, #256]	; (8005b10 <USBD_SetConfig+0x118>)
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d904      	bls.n	8005a1e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005a14:	6839      	ldr	r1, [r7, #0]
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f954 	bl	8005cc4 <USBD_CtlError>
 8005a1c:	e075      	b.n	8005b0a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d002      	beq.n	8005a2e <USBD_SetConfig+0x36>
 8005a28:	2b03      	cmp	r3, #3
 8005a2a:	d023      	beq.n	8005a74 <USBD_SetConfig+0x7c>
 8005a2c:	e062      	b.n	8005af4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005a2e:	4b38      	ldr	r3, [pc, #224]	; (8005b10 <USBD_SetConfig+0x118>)
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d01a      	beq.n	8005a6c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005a36:	4b36      	ldr	r3, [pc, #216]	; (8005b10 <USBD_SetConfig+0x118>)
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2203      	movs	r2, #3
 8005a44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005a48:	4b31      	ldr	r3, [pc, #196]	; (8005b10 <USBD_SetConfig+0x118>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f7ff f9f4 	bl	8004e3c <USBD_SetClassConfig>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d104      	bne.n	8005a64 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005a5a:	6839      	ldr	r1, [r7, #0]
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f931 	bl	8005cc4 <USBD_CtlError>
            return;
 8005a62:	e052      	b.n	8005b0a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 f9f5 	bl	8005e54 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005a6a:	e04e      	b.n	8005b0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 f9f1 	bl	8005e54 <USBD_CtlSendStatus>
        break;
 8005a72:	e04a      	b.n	8005b0a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005a74:	4b26      	ldr	r3, [pc, #152]	; (8005b10 <USBD_SetConfig+0x118>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d112      	bne.n	8005aa2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2202      	movs	r2, #2
 8005a80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005a84:	4b22      	ldr	r3, [pc, #136]	; (8005b10 <USBD_SetConfig+0x118>)
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	461a      	mov	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005a8e:	4b20      	ldr	r3, [pc, #128]	; (8005b10 <USBD_SetConfig+0x118>)
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	4619      	mov	r1, r3
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f7ff f9f0 	bl	8004e7a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f9da 	bl	8005e54 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005aa0:	e033      	b.n	8005b0a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005aa2:	4b1b      	ldr	r3, [pc, #108]	; (8005b10 <USBD_SetConfig+0x118>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d01d      	beq.n	8005aec <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7ff f9de 	bl	8004e7a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005abe:	4b14      	ldr	r3, [pc, #80]	; (8005b10 <USBD_SetConfig+0x118>)
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005ac8:	4b11      	ldr	r3, [pc, #68]	; (8005b10 <USBD_SetConfig+0x118>)
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	4619      	mov	r1, r3
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7ff f9b4 	bl	8004e3c <USBD_SetClassConfig>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d104      	bne.n	8005ae4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005ada:	6839      	ldr	r1, [r7, #0]
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 f8f1 	bl	8005cc4 <USBD_CtlError>
            return;
 8005ae2:	e012      	b.n	8005b0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f9b5 	bl	8005e54 <USBD_CtlSendStatus>
        break;
 8005aea:	e00e      	b.n	8005b0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f9b1 	bl	8005e54 <USBD_CtlSendStatus>
        break;
 8005af2:	e00a      	b.n	8005b0a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005af4:	6839      	ldr	r1, [r7, #0]
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f8e4 	bl	8005cc4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005afc:	4b04      	ldr	r3, [pc, #16]	; (8005b10 <USBD_SetConfig+0x118>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	4619      	mov	r1, r3
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7ff f9b9 	bl	8004e7a <USBD_ClrClassConfig>
        break;
 8005b08:	bf00      	nop
    }
  }
}
 8005b0a:	3708      	adds	r7, #8
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	20000198 	.word	0x20000198

08005b14 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	88db      	ldrh	r3, [r3, #6]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d004      	beq.n	8005b30 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005b26:	6839      	ldr	r1, [r7, #0]
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f8cb 	bl	8005cc4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005b2e:	e021      	b.n	8005b74 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	db17      	blt.n	8005b6a <USBD_GetConfig+0x56>
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	dd02      	ble.n	8005b44 <USBD_GetConfig+0x30>
 8005b3e:	2b03      	cmp	r3, #3
 8005b40:	d00b      	beq.n	8005b5a <USBD_GetConfig+0x46>
 8005b42:	e012      	b.n	8005b6a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	3308      	adds	r3, #8
 8005b4e:	2201      	movs	r2, #1
 8005b50:	4619      	mov	r1, r3
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f920 	bl	8005d98 <USBD_CtlSendData>
        break;
 8005b58:	e00c      	b.n	8005b74 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	2201      	movs	r2, #1
 8005b60:	4619      	mov	r1, r3
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f918 	bl	8005d98 <USBD_CtlSendData>
        break;
 8005b68:	e004      	b.n	8005b74 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8005b6a:	6839      	ldr	r1, [r7, #0]
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f8a9 	bl	8005cc4 <USBD_CtlError>
        break;
 8005b72:	bf00      	nop
}
 8005b74:	bf00      	nop
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d81e      	bhi.n	8005bd0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	88db      	ldrh	r3, [r3, #6]
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d004      	beq.n	8005ba4 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8005b9a:	6839      	ldr	r1, [r7, #0]
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 f891 	bl	8005cc4 <USBD_CtlError>
        break;
 8005ba2:	e01a      	b.n	8005bda <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d005      	beq.n	8005bc0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	f043 0202 	orr.w	r2, r3, #2
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	330c      	adds	r3, #12
 8005bc4:	2202      	movs	r2, #2
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 f8e5 	bl	8005d98 <USBD_CtlSendData>
      break;
 8005bce:	e004      	b.n	8005bda <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005bd0:	6839      	ldr	r1, [r7, #0]
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f876 	bl	8005cc4 <USBD_CtlError>
      break;
 8005bd8:	bf00      	nop
  }
}
 8005bda:	bf00      	nop
 8005bdc:	3708      	adds	r7, #8
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b082      	sub	sp, #8
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
 8005bea:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	885b      	ldrh	r3, [r3, #2]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d106      	bne.n	8005c02 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 f929 	bl	8005e54 <USBD_CtlSendStatus>
  }
}
 8005c02:	bf00      	nop
 8005c04:	3708      	adds	r7, #8
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b082      	sub	sp, #8
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
 8005c12:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d80b      	bhi.n	8005c38 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	885b      	ldrh	r3, [r3, #2]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d10c      	bne.n	8005c42 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 f90f 	bl	8005e54 <USBD_CtlSendStatus>
      }
      break;
 8005c36:	e004      	b.n	8005c42 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005c38:	6839      	ldr	r1, [r7, #0]
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f842 	bl	8005cc4 <USBD_CtlError>
      break;
 8005c40:	e000      	b.n	8005c44 <USBD_ClrFeature+0x3a>
      break;
 8005c42:	bf00      	nop
  }
}
 8005c44:	bf00      	nop
 8005c46:	3708      	adds	r7, #8
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	781a      	ldrb	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	785a      	ldrb	r2, [r3, #1]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	3302      	adds	r3, #2
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	3303      	adds	r3, #3
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	021b      	lsls	r3, r3, #8
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	4413      	add	r3, r2
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	3304      	adds	r3, #4
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	3305      	adds	r3, #5
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	021b      	lsls	r3, r3, #8
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	4413      	add	r3, r2
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	3306      	adds	r3, #6
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	3307      	adds	r3, #7
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	021b      	lsls	r3, r3, #8
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	4413      	add	r3, r2
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	80da      	strh	r2, [r3, #6]

}
 8005cba:	bf00      	nop
 8005cbc:	370c      	adds	r7, #12
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bc80      	pop	{r7}
 8005cc2:	4770      	bx	lr

08005cc4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005cce:	2180      	movs	r1, #128	; 0x80
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 fc31 	bl	8006538 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 fc2d 	bl	8006538 <USBD_LL_StallEP>
}
 8005cde:	bf00      	nop
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b086      	sub	sp, #24
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	60f8      	str	r0, [r7, #12]
 8005cee:	60b9      	str	r1, [r7, #8]
 8005cf0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d032      	beq.n	8005d62 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f000 f834 	bl	8005d6a <USBD_GetLen>
 8005d02:	4603      	mov	r3, r0
 8005d04:	3301      	adds	r3, #1
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005d10:	7dfb      	ldrb	r3, [r7, #23]
 8005d12:	1c5a      	adds	r2, r3, #1
 8005d14:	75fa      	strb	r2, [r7, #23]
 8005d16:	461a      	mov	r2, r3
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	7812      	ldrb	r2, [r2, #0]
 8005d20:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005d22:	7dfb      	ldrb	r3, [r7, #23]
 8005d24:	1c5a      	adds	r2, r3, #1
 8005d26:	75fa      	strb	r2, [r7, #23]
 8005d28:	461a      	mov	r2, r3
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	2203      	movs	r2, #3
 8005d30:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8005d32:	e012      	b.n	8005d5a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	1c5a      	adds	r2, r3, #1
 8005d38:	60fa      	str	r2, [r7, #12]
 8005d3a:	7dfa      	ldrb	r2, [r7, #23]
 8005d3c:	1c51      	adds	r1, r2, #1
 8005d3e:	75f9      	strb	r1, [r7, #23]
 8005d40:	4611      	mov	r1, r2
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	440a      	add	r2, r1
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005d4a:	7dfb      	ldrb	r3, [r7, #23]
 8005d4c:	1c5a      	adds	r2, r3, #1
 8005d4e:	75fa      	strb	r2, [r7, #23]
 8005d50:	461a      	mov	r2, r3
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	4413      	add	r3, r2
 8005d56:	2200      	movs	r2, #0
 8005d58:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1e8      	bne.n	8005d34 <USBD_GetString+0x4e>
    }
  }
}
 8005d62:	bf00      	nop
 8005d64:	3718      	adds	r7, #24
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b085      	sub	sp, #20
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8005d76:	e005      	b.n	8005d84 <USBD_GetLen+0x1a>
  {
    len++;
 8005d78:	7bfb      	ldrb	r3, [r7, #15]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	73fb      	strb	r3, [r7, #15]
    buf++;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	3301      	adds	r3, #1
 8005d82:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1f5      	bne.n	8005d78 <USBD_GetLen+0xe>
  }

  return len;
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bc80      	pop	{r7}
 8005d96:	4770      	bx	lr

08005d98 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	4613      	mov	r3, r2
 8005da4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2202      	movs	r2, #2
 8005daa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005dae:	88fa      	ldrh	r2, [r7, #6]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005db4:	88fa      	ldrh	r2, [r7, #6]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005dba:	88fb      	ldrh	r3, [r7, #6]
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f000 fc42 	bl	800664a <USBD_LL_Transmit>

  return USBD_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005dde:	88fb      	ldrh	r3, [r7, #6]
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	2100      	movs	r1, #0
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 fc30 	bl	800664a <USBD_LL_Transmit>

  return USBD_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2203      	movs	r2, #3
 8005e06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005e0a:	88fa      	ldrh	r2, [r7, #6]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8005e12:	88fa      	ldrh	r2, [r7, #6]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005e1a:	88fb      	ldrh	r3, [r7, #6]
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	2100      	movs	r1, #0
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f000 fc35 	bl	8006690 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005e3e:	88fb      	ldrh	r3, [r7, #6]
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	2100      	movs	r1, #0
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f000 fc23 	bl	8006690 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2204      	movs	r2, #4
 8005e60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005e64:	2300      	movs	r3, #0
 8005e66:	2200      	movs	r2, #0
 8005e68:	2100      	movs	r1, #0
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fbed 	bl	800664a <USBD_LL_Transmit>

  return USBD_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3708      	adds	r7, #8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b082      	sub	sp, #8
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2205      	movs	r2, #5
 8005e86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	2100      	movs	r1, #0
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 fbfd 	bl	8006690 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	4912      	ldr	r1, [pc, #72]	; (8005ef0 <MX_USB_DEVICE_Init+0x50>)
 8005ea8:	4812      	ldr	r0, [pc, #72]	; (8005ef4 <MX_USB_DEVICE_Init+0x54>)
 8005eaa:	f7fe ff6d 	bl	8004d88 <USBD_Init>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d001      	beq.n	8005eb8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005eb4:	f7fa f9e8 	bl	8000288 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005eb8:	490f      	ldr	r1, [pc, #60]	; (8005ef8 <MX_USB_DEVICE_Init+0x58>)
 8005eba:	480e      	ldr	r0, [pc, #56]	; (8005ef4 <MX_USB_DEVICE_Init+0x54>)
 8005ebc:	f7fe ff8f 	bl	8004dde <USBD_RegisterClass>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005ec6:	f7fa f9df 	bl	8000288 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005eca:	490c      	ldr	r1, [pc, #48]	; (8005efc <MX_USB_DEVICE_Init+0x5c>)
 8005ecc:	4809      	ldr	r0, [pc, #36]	; (8005ef4 <MX_USB_DEVICE_Init+0x54>)
 8005ece:	f7fe feef 	bl	8004cb0 <USBD_CDC_RegisterInterface>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d001      	beq.n	8005edc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005ed8:	f7fa f9d6 	bl	8000288 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005edc:	4805      	ldr	r0, [pc, #20]	; (8005ef4 <MX_USB_DEVICE_Init+0x54>)
 8005ede:	f7fe ff97 	bl	8004e10 <USBD_Start>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d001      	beq.n	8005eec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005ee8:	f7fa f9ce 	bl	8000288 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005eec:	bf00      	nop
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	2000012c 	.word	0x2000012c
 8005ef4:	200003c0 	.word	0x200003c0
 8005ef8:	20000018 	.word	0x20000018
 8005efc:	2000011c 	.word	0x2000011c

08005f00 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005f04:	2200      	movs	r2, #0
 8005f06:	4905      	ldr	r1, [pc, #20]	; (8005f1c <CDC_Init_FS+0x1c>)
 8005f08:	4805      	ldr	r0, [pc, #20]	; (8005f20 <CDC_Init_FS+0x20>)
 8005f0a:	f7fe fee7 	bl	8004cdc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005f0e:	4905      	ldr	r1, [pc, #20]	; (8005f24 <CDC_Init_FS+0x24>)
 8005f10:	4803      	ldr	r0, [pc, #12]	; (8005f20 <CDC_Init_FS+0x20>)
 8005f12:	f7fe fefc 	bl	8004d0e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005f16:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	2000068c 	.word	0x2000068c
 8005f20:	200003c0 	.word	0x200003c0
 8005f24:	20000684 	.word	0x20000684

08005f28 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005f2c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bc80      	pop	{r7}
 8005f34:	4770      	bx	lr
	...

08005f38 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	4603      	mov	r3, r0
 8005f40:	6039      	str	r1, [r7, #0]
 8005f42:	71fb      	strb	r3, [r7, #7]
 8005f44:	4613      	mov	r3, r2
 8005f46:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005f48:	79fb      	ldrb	r3, [r7, #7]
 8005f4a:	2b23      	cmp	r3, #35	; 0x23
 8005f4c:	d84a      	bhi.n	8005fe4 <CDC_Control_FS+0xac>
 8005f4e:	a201      	add	r2, pc, #4	; (adr r2, 8005f54 <CDC_Control_FS+0x1c>)
 8005f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f54:	08005fe5 	.word	0x08005fe5
 8005f58:	08005fe5 	.word	0x08005fe5
 8005f5c:	08005fe5 	.word	0x08005fe5
 8005f60:	08005fe5 	.word	0x08005fe5
 8005f64:	08005fe5 	.word	0x08005fe5
 8005f68:	08005fe5 	.word	0x08005fe5
 8005f6c:	08005fe5 	.word	0x08005fe5
 8005f70:	08005fe5 	.word	0x08005fe5
 8005f74:	08005fe5 	.word	0x08005fe5
 8005f78:	08005fe5 	.word	0x08005fe5
 8005f7c:	08005fe5 	.word	0x08005fe5
 8005f80:	08005fe5 	.word	0x08005fe5
 8005f84:	08005fe5 	.word	0x08005fe5
 8005f88:	08005fe5 	.word	0x08005fe5
 8005f8c:	08005fe5 	.word	0x08005fe5
 8005f90:	08005fe5 	.word	0x08005fe5
 8005f94:	08005fe5 	.word	0x08005fe5
 8005f98:	08005fe5 	.word	0x08005fe5
 8005f9c:	08005fe5 	.word	0x08005fe5
 8005fa0:	08005fe5 	.word	0x08005fe5
 8005fa4:	08005fe5 	.word	0x08005fe5
 8005fa8:	08005fe5 	.word	0x08005fe5
 8005fac:	08005fe5 	.word	0x08005fe5
 8005fb0:	08005fe5 	.word	0x08005fe5
 8005fb4:	08005fe5 	.word	0x08005fe5
 8005fb8:	08005fe5 	.word	0x08005fe5
 8005fbc:	08005fe5 	.word	0x08005fe5
 8005fc0:	08005fe5 	.word	0x08005fe5
 8005fc4:	08005fe5 	.word	0x08005fe5
 8005fc8:	08005fe5 	.word	0x08005fe5
 8005fcc:	08005fe5 	.word	0x08005fe5
 8005fd0:	08005fe5 	.word	0x08005fe5
 8005fd4:	08005fe5 	.word	0x08005fe5
 8005fd8:	08005fe5 	.word	0x08005fe5
 8005fdc:	08005fe5 	.word	0x08005fe5
 8005fe0:	08005fe5 	.word	0x08005fe5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005fe4:	bf00      	nop
  }

  return (USBD_OK);
 8005fe6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bc80      	pop	{r7}
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop

08005ff4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005ffe:	6879      	ldr	r1, [r7, #4]
 8006000:	4807      	ldr	r0, [pc, #28]	; (8006020 <CDC_Receive_FS+0x2c>)
 8006002:	f7fe fe84 	bl	8004d0e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006006:	4806      	ldr	r0, [pc, #24]	; (8006020 <CDC_Receive_FS+0x2c>)
 8006008:	f7fe fe94 	bl	8004d34 <USBD_CDC_ReceivePacket>
  CDC_Recive_Callback(Buf, Len);
 800600c:	6839      	ldr	r1, [r7, #0]
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7fa f930 	bl	8000274 <CDC_Recive_Callback>
  return (USBD_OK);
 8006014:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006016:	4618      	mov	r0, r3
 8006018:	3708      	adds	r7, #8
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	200003c0 	.word	0x200003c0

08006024 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	4603      	mov	r3, r0
 800602c:	6039      	str	r1, [r7, #0]
 800602e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	2212      	movs	r2, #18
 8006034:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006036:	4b03      	ldr	r3, [pc, #12]	; (8006044 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006038:	4618      	mov	r0, r3
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	bc80      	pop	{r7}
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	20000148 	.word	0x20000148

08006048 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	4603      	mov	r3, r0
 8006050:	6039      	str	r1, [r7, #0]
 8006052:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	2204      	movs	r2, #4
 8006058:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800605a:	4b03      	ldr	r3, [pc, #12]	; (8006068 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800605c:	4618      	mov	r0, r3
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	bc80      	pop	{r7}
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	2000015c 	.word	0x2000015c

0800606c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	4603      	mov	r3, r0
 8006074:	6039      	str	r1, [r7, #0]
 8006076:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006078:	79fb      	ldrb	r3, [r7, #7]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d105      	bne.n	800608a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	4907      	ldr	r1, [pc, #28]	; (80060a0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006082:	4808      	ldr	r0, [pc, #32]	; (80060a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006084:	f7ff fe2f 	bl	8005ce6 <USBD_GetString>
 8006088:	e004      	b.n	8006094 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	4904      	ldr	r1, [pc, #16]	; (80060a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800608e:	4805      	ldr	r0, [pc, #20]	; (80060a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006090:	f7ff fe29 	bl	8005ce6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006094:	4b02      	ldr	r3, [pc, #8]	; (80060a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006096:	4618      	mov	r0, r3
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	20000690 	.word	0x20000690
 80060a4:	08006818 	.word	0x08006818

080060a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	4603      	mov	r3, r0
 80060b0:	6039      	str	r1, [r7, #0]
 80060b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80060b4:	683a      	ldr	r2, [r7, #0]
 80060b6:	4904      	ldr	r1, [pc, #16]	; (80060c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80060b8:	4804      	ldr	r0, [pc, #16]	; (80060cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80060ba:	f7ff fe14 	bl	8005ce6 <USBD_GetString>
  return USBD_StrDesc;
 80060be:	4b02      	ldr	r3, [pc, #8]	; (80060c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3708      	adds	r7, #8
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	20000690 	.word	0x20000690
 80060cc:	08006830 	.word	0x08006830

080060d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	4603      	mov	r3, r0
 80060d8:	6039      	str	r1, [r7, #0]
 80060da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	221a      	movs	r2, #26
 80060e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80060e2:	f000 f843 	bl	800616c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80060e6:	4b02      	ldr	r3, [pc, #8]	; (80060f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3708      	adds	r7, #8
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	20000160 	.word	0x20000160

080060f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	4603      	mov	r3, r0
 80060fc:	6039      	str	r1, [r7, #0]
 80060fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006100:	79fb      	ldrb	r3, [r7, #7]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d105      	bne.n	8006112 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	4907      	ldr	r1, [pc, #28]	; (8006128 <USBD_FS_ConfigStrDescriptor+0x34>)
 800610a:	4808      	ldr	r0, [pc, #32]	; (800612c <USBD_FS_ConfigStrDescriptor+0x38>)
 800610c:	f7ff fdeb 	bl	8005ce6 <USBD_GetString>
 8006110:	e004      	b.n	800611c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006112:	683a      	ldr	r2, [r7, #0]
 8006114:	4904      	ldr	r1, [pc, #16]	; (8006128 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006116:	4805      	ldr	r0, [pc, #20]	; (800612c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006118:	f7ff fde5 	bl	8005ce6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800611c:	4b02      	ldr	r3, [pc, #8]	; (8006128 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800611e:	4618      	mov	r0, r3
 8006120:	3708      	adds	r7, #8
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	20000690 	.word	0x20000690
 800612c:	08006844 	.word	0x08006844

08006130 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	4603      	mov	r3, r0
 8006138:	6039      	str	r1, [r7, #0]
 800613a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800613c:	79fb      	ldrb	r3, [r7, #7]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d105      	bne.n	800614e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	4907      	ldr	r1, [pc, #28]	; (8006164 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006146:	4808      	ldr	r0, [pc, #32]	; (8006168 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006148:	f7ff fdcd 	bl	8005ce6 <USBD_GetString>
 800614c:	e004      	b.n	8006158 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	4904      	ldr	r1, [pc, #16]	; (8006164 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006152:	4805      	ldr	r0, [pc, #20]	; (8006168 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006154:	f7ff fdc7 	bl	8005ce6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006158:	4b02      	ldr	r3, [pc, #8]	; (8006164 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800615a:	4618      	mov	r0, r3
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	20000690 	.word	0x20000690
 8006168:	08006850 	.word	0x08006850

0800616c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006172:	4b0f      	ldr	r3, [pc, #60]	; (80061b0 <Get_SerialNum+0x44>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006178:	4b0e      	ldr	r3, [pc, #56]	; (80061b4 <Get_SerialNum+0x48>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800617e:	4b0e      	ldr	r3, [pc, #56]	; (80061b8 <Get_SerialNum+0x4c>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4413      	add	r3, r2
 800618a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d009      	beq.n	80061a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006192:	2208      	movs	r2, #8
 8006194:	4909      	ldr	r1, [pc, #36]	; (80061bc <Get_SerialNum+0x50>)
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 f814 	bl	80061c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800619c:	2204      	movs	r2, #4
 800619e:	4908      	ldr	r1, [pc, #32]	; (80061c0 <Get_SerialNum+0x54>)
 80061a0:	68b8      	ldr	r0, [r7, #8]
 80061a2:	f000 f80f 	bl	80061c4 <IntToUnicode>
  }
}
 80061a6:	bf00      	nop
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	1ffff7e8 	.word	0x1ffff7e8
 80061b4:	1ffff7ec 	.word	0x1ffff7ec
 80061b8:	1ffff7f0 	.word	0x1ffff7f0
 80061bc:	20000162 	.word	0x20000162
 80061c0:	20000172 	.word	0x20000172

080061c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	4613      	mov	r3, r2
 80061d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80061d2:	2300      	movs	r3, #0
 80061d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80061d6:	2300      	movs	r3, #0
 80061d8:	75fb      	strb	r3, [r7, #23]
 80061da:	e027      	b.n	800622c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	0f1b      	lsrs	r3, r3, #28
 80061e0:	2b09      	cmp	r3, #9
 80061e2:	d80b      	bhi.n	80061fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	0f1b      	lsrs	r3, r3, #28
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	7dfb      	ldrb	r3, [r7, #23]
 80061ec:	005b      	lsls	r3, r3, #1
 80061ee:	4619      	mov	r1, r3
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	440b      	add	r3, r1
 80061f4:	3230      	adds	r2, #48	; 0x30
 80061f6:	b2d2      	uxtb	r2, r2
 80061f8:	701a      	strb	r2, [r3, #0]
 80061fa:	e00a      	b.n	8006212 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	0f1b      	lsrs	r3, r3, #28
 8006200:	b2da      	uxtb	r2, r3
 8006202:	7dfb      	ldrb	r3, [r7, #23]
 8006204:	005b      	lsls	r3, r3, #1
 8006206:	4619      	mov	r1, r3
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	440b      	add	r3, r1
 800620c:	3237      	adds	r2, #55	; 0x37
 800620e:	b2d2      	uxtb	r2, r2
 8006210:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	011b      	lsls	r3, r3, #4
 8006216:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006218:	7dfb      	ldrb	r3, [r7, #23]
 800621a:	005b      	lsls	r3, r3, #1
 800621c:	3301      	adds	r3, #1
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	4413      	add	r3, r2
 8006222:	2200      	movs	r2, #0
 8006224:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006226:	7dfb      	ldrb	r3, [r7, #23]
 8006228:	3301      	adds	r3, #1
 800622a:	75fb      	strb	r3, [r7, #23]
 800622c:	7dfa      	ldrb	r2, [r7, #23]
 800622e:	79fb      	ldrb	r3, [r7, #7]
 8006230:	429a      	cmp	r2, r3
 8006232:	d3d3      	bcc.n	80061dc <IntToUnicode+0x18>
  }
}
 8006234:	bf00      	nop
 8006236:	371c      	adds	r7, #28
 8006238:	46bd      	mov	sp, r7
 800623a:	bc80      	pop	{r7}
 800623c:	4770      	bx	lr
	...

08006240 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a0d      	ldr	r2, [pc, #52]	; (8006284 <HAL_PCD_MspInit+0x44>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d113      	bne.n	800627a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006252:	4b0d      	ldr	r3, [pc, #52]	; (8006288 <HAL_PCD_MspInit+0x48>)
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	4a0c      	ldr	r2, [pc, #48]	; (8006288 <HAL_PCD_MspInit+0x48>)
 8006258:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800625c:	61d3      	str	r3, [r2, #28]
 800625e:	4b0a      	ldr	r3, [pc, #40]	; (8006288 <HAL_PCD_MspInit+0x48>)
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006266:	60fb      	str	r3, [r7, #12]
 8006268:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800626a:	2200      	movs	r2, #0
 800626c:	2100      	movs	r1, #0
 800626e:	2014      	movs	r0, #20
 8006270:	f7fa f9db 	bl	800062a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006274:	2014      	movs	r0, #20
 8006276:	f7fa f9f4 	bl	8000662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800627a:	bf00      	nop
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	40005c00 	.word	0x40005c00
 8006288:	40021000 	.word	0x40021000

0800628c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80062a0:	4619      	mov	r1, r3
 80062a2:	4610      	mov	r0, r2
 80062a4:	f7fe fdfc 	bl	8004ea0 <USBD_LL_SetupStage>
}
 80062a8:	bf00      	nop
 80062aa:	3708      	adds	r7, #8
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	460b      	mov	r3, r1
 80062ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80062c2:	78fa      	ldrb	r2, [r7, #3]
 80062c4:	6879      	ldr	r1, [r7, #4]
 80062c6:	4613      	mov	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4413      	add	r3, r2
 80062cc:	00db      	lsls	r3, r3, #3
 80062ce:	440b      	add	r3, r1
 80062d0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	78fb      	ldrb	r3, [r7, #3]
 80062d8:	4619      	mov	r1, r3
 80062da:	f7fe fe2c 	bl	8004f36 <USBD_LL_DataOutStage>
}
 80062de:	bf00      	nop
 80062e0:	3708      	adds	r7, #8
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b082      	sub	sp, #8
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
 80062ee:	460b      	mov	r3, r1
 80062f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80062f8:	78fa      	ldrb	r2, [r7, #3]
 80062fa:	6879      	ldr	r1, [r7, #4]
 80062fc:	4613      	mov	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4413      	add	r3, r2
 8006302:	00db      	lsls	r3, r3, #3
 8006304:	440b      	add	r3, r1
 8006306:	333c      	adds	r3, #60	; 0x3c
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	78fb      	ldrb	r3, [r7, #3]
 800630c:	4619      	mov	r1, r3
 800630e:	f7fe fe83 	bl	8005018 <USBD_LL_DataInStage>
}
 8006312:	bf00      	nop
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b082      	sub	sp, #8
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006328:	4618      	mov	r0, r3
 800632a:	f7fe ff93 	bl	8005254 <USBD_LL_SOF>
}
 800632e:	bf00      	nop
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b084      	sub	sp, #16
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800633e:	2301      	movs	r3, #1
 8006340:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	2b02      	cmp	r3, #2
 8006348:	d001      	beq.n	800634e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800634a:	f7f9 ff9d 	bl	8000288 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006354:	7bfa      	ldrb	r2, [r7, #15]
 8006356:	4611      	mov	r1, r2
 8006358:	4618      	mov	r0, r3
 800635a:	f7fe ff43 	bl	80051e4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006364:	4618      	mov	r0, r3
 8006366:	f7fe fefc 	bl	8005162 <USBD_LL_Reset>
}
 800636a:	bf00      	nop
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
	...

08006374 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006382:	4618      	mov	r0, r3
 8006384:	f7fe ff3d 	bl	8005202 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d005      	beq.n	800639c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006390:	4b04      	ldr	r3, [pc, #16]	; (80063a4 <HAL_PCD_SuspendCallback+0x30>)
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	4a03      	ldr	r2, [pc, #12]	; (80063a4 <HAL_PCD_SuspendCallback+0x30>)
 8006396:	f043 0306 	orr.w	r3, r3, #6
 800639a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800639c:	bf00      	nop
 800639e:	3708      	adds	r7, #8
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	e000ed00 	.word	0xe000ed00

080063a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7fe ff37 	bl	800522a <USBD_LL_Resume>
}
 80063bc:	bf00      	nop
 80063be:	3708      	adds	r7, #8
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80063cc:	4a28      	ldr	r2, [pc, #160]	; (8006470 <USBD_LL_Init+0xac>)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a26      	ldr	r2, [pc, #152]	; (8006470 <USBD_LL_Init+0xac>)
 80063d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80063dc:	4b24      	ldr	r3, [pc, #144]	; (8006470 <USBD_LL_Init+0xac>)
 80063de:	4a25      	ldr	r2, [pc, #148]	; (8006474 <USBD_LL_Init+0xb0>)
 80063e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80063e2:	4b23      	ldr	r3, [pc, #140]	; (8006470 <USBD_LL_Init+0xac>)
 80063e4:	2208      	movs	r2, #8
 80063e6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80063e8:	4b21      	ldr	r3, [pc, #132]	; (8006470 <USBD_LL_Init+0xac>)
 80063ea:	2202      	movs	r2, #2
 80063ec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80063ee:	4b20      	ldr	r3, [pc, #128]	; (8006470 <USBD_LL_Init+0xac>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80063f4:	4b1e      	ldr	r3, [pc, #120]	; (8006470 <USBD_LL_Init+0xac>)
 80063f6:	2200      	movs	r2, #0
 80063f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80063fa:	4b1d      	ldr	r3, [pc, #116]	; (8006470 <USBD_LL_Init+0xac>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006400:	481b      	ldr	r0, [pc, #108]	; (8006470 <USBD_LL_Init+0xac>)
 8006402:	f7fa f948 	bl	8000696 <HAL_PCD_Init>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d001      	beq.n	8006410 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800640c:	f7f9 ff3c 	bl	8000288 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006416:	2318      	movs	r3, #24
 8006418:	2200      	movs	r2, #0
 800641a:	2100      	movs	r1, #0
 800641c:	f7fb fc7c 	bl	8001d18 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006426:	2358      	movs	r3, #88	; 0x58
 8006428:	2200      	movs	r2, #0
 800642a:	2180      	movs	r1, #128	; 0x80
 800642c:	f7fb fc74 	bl	8001d18 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006436:	23c0      	movs	r3, #192	; 0xc0
 8006438:	2200      	movs	r2, #0
 800643a:	2181      	movs	r1, #129	; 0x81
 800643c:	f7fb fc6c 	bl	8001d18 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006446:	f44f 7388 	mov.w	r3, #272	; 0x110
 800644a:	2200      	movs	r2, #0
 800644c:	2101      	movs	r1, #1
 800644e:	f7fb fc63 	bl	8001d18 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006458:	f44f 7380 	mov.w	r3, #256	; 0x100
 800645c:	2200      	movs	r2, #0
 800645e:	2182      	movs	r1, #130	; 0x82
 8006460:	f7fb fc5a 	bl	8001d18 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	20000790 	.word	0x20000790
 8006474:	40005c00 	.word	0x40005c00

08006478 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006480:	2300      	movs	r3, #0
 8006482:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006484:	2300      	movs	r3, #0
 8006486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800648e:	4618      	mov	r0, r3
 8006490:	f7fa fa0c 	bl	80008ac <HAL_PCD_Start>
 8006494:	4603      	mov	r3, r0
 8006496:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006498:	7bfb      	ldrb	r3, [r7, #15]
 800649a:	4618      	mov	r0, r3
 800649c:	f000 f94e 	bl	800673c <USBD_Get_USB_Status>
 80064a0:	4603      	mov	r3, r0
 80064a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80064a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b084      	sub	sp, #16
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
 80064b6:	4608      	mov	r0, r1
 80064b8:	4611      	mov	r1, r2
 80064ba:	461a      	mov	r2, r3
 80064bc:	4603      	mov	r3, r0
 80064be:	70fb      	strb	r3, [r7, #3]
 80064c0:	460b      	mov	r3, r1
 80064c2:	70bb      	strb	r3, [r7, #2]
 80064c4:	4613      	mov	r3, r2
 80064c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064c8:	2300      	movs	r3, #0
 80064ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064cc:	2300      	movs	r3, #0
 80064ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80064d6:	78bb      	ldrb	r3, [r7, #2]
 80064d8:	883a      	ldrh	r2, [r7, #0]
 80064da:	78f9      	ldrb	r1, [r7, #3]
 80064dc:	f7fa fb86 	bl	8000bec <HAL_PCD_EP_Open>
 80064e0:	4603      	mov	r3, r0
 80064e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 f928 	bl	800673c <USBD_Get_USB_Status>
 80064ec:	4603      	mov	r3, r0
 80064ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80064f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b084      	sub	sp, #16
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	460b      	mov	r3, r1
 8006504:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800650a:	2300      	movs	r3, #0
 800650c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006514:	78fa      	ldrb	r2, [r7, #3]
 8006516:	4611      	mov	r1, r2
 8006518:	4618      	mov	r0, r3
 800651a:	f7fa fbcd 	bl	8000cb8 <HAL_PCD_EP_Close>
 800651e:	4603      	mov	r3, r0
 8006520:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006522:	7bfb      	ldrb	r3, [r7, #15]
 8006524:	4618      	mov	r0, r3
 8006526:	f000 f909 	bl	800673c <USBD_Get_USB_Status>
 800652a:	4603      	mov	r3, r0
 800652c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800652e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006530:	4618      	mov	r0, r3
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	460b      	mov	r3, r1
 8006542:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006544:	2300      	movs	r3, #0
 8006546:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006548:	2300      	movs	r3, #0
 800654a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006552:	78fa      	ldrb	r2, [r7, #3]
 8006554:	4611      	mov	r1, r2
 8006556:	4618      	mov	r0, r3
 8006558:	f7fa fc8d 	bl	8000e76 <HAL_PCD_EP_SetStall>
 800655c:	4603      	mov	r3, r0
 800655e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006560:	7bfb      	ldrb	r3, [r7, #15]
 8006562:	4618      	mov	r0, r3
 8006564:	f000 f8ea 	bl	800673c <USBD_Get_USB_Status>
 8006568:	4603      	mov	r3, r0
 800656a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800656c:	7bbb      	ldrb	r3, [r7, #14]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b084      	sub	sp, #16
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
 800657e:	460b      	mov	r3, r1
 8006580:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006582:	2300      	movs	r3, #0
 8006584:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006586:	2300      	movs	r3, #0
 8006588:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006590:	78fa      	ldrb	r2, [r7, #3]
 8006592:	4611      	mov	r1, r2
 8006594:	4618      	mov	r0, r3
 8006596:	f7fa fcce 	bl	8000f36 <HAL_PCD_EP_ClrStall>
 800659a:	4603      	mov	r3, r0
 800659c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800659e:	7bfb      	ldrb	r3, [r7, #15]
 80065a0:	4618      	mov	r0, r3
 80065a2:	f000 f8cb 	bl	800673c <USBD_Get_USB_Status>
 80065a6:	4603      	mov	r3, r0
 80065a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80065aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	460b      	mov	r3, r1
 80065be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80065c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	da0c      	bge.n	80065ea <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80065d0:	78fb      	ldrb	r3, [r7, #3]
 80065d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065d6:	68f9      	ldr	r1, [r7, #12]
 80065d8:	1c5a      	adds	r2, r3, #1
 80065da:	4613      	mov	r3, r2
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	4413      	add	r3, r2
 80065e0:	00db      	lsls	r3, r3, #3
 80065e2:	440b      	add	r3, r1
 80065e4:	3302      	adds	r3, #2
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	e00b      	b.n	8006602 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80065ea:	78fb      	ldrb	r3, [r7, #3]
 80065ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065f0:	68f9      	ldr	r1, [r7, #12]
 80065f2:	4613      	mov	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4413      	add	r3, r2
 80065f8:	00db      	lsls	r3, r3, #3
 80065fa:	440b      	add	r3, r1
 80065fc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8006600:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006602:	4618      	mov	r0, r3
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	bc80      	pop	{r7}
 800660a:	4770      	bx	lr

0800660c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	460b      	mov	r3, r1
 8006616:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006618:	2300      	movs	r3, #0
 800661a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800661c:	2300      	movs	r3, #0
 800661e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006626:	78fa      	ldrb	r2, [r7, #3]
 8006628:	4611      	mov	r1, r2
 800662a:	4618      	mov	r0, r3
 800662c:	f7fa fab9 	bl	8000ba2 <HAL_PCD_SetAddress>
 8006630:	4603      	mov	r3, r0
 8006632:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006634:	7bfb      	ldrb	r3, [r7, #15]
 8006636:	4618      	mov	r0, r3
 8006638:	f000 f880 	bl	800673c <USBD_Get_USB_Status>
 800663c:	4603      	mov	r3, r0
 800663e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006640:	7bbb      	ldrb	r3, [r7, #14]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b086      	sub	sp, #24
 800664e:	af00      	add	r7, sp, #0
 8006650:	60f8      	str	r0, [r7, #12]
 8006652:	607a      	str	r2, [r7, #4]
 8006654:	461a      	mov	r2, r3
 8006656:	460b      	mov	r3, r1
 8006658:	72fb      	strb	r3, [r7, #11]
 800665a:	4613      	mov	r3, r2
 800665c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800665e:	2300      	movs	r3, #0
 8006660:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006662:	2300      	movs	r3, #0
 8006664:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800666c:	893b      	ldrh	r3, [r7, #8]
 800666e:	7af9      	ldrb	r1, [r7, #11]
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	f7fa fbbd 	bl	8000df0 <HAL_PCD_EP_Transmit>
 8006676:	4603      	mov	r3, r0
 8006678:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800667a:	7dfb      	ldrb	r3, [r7, #23]
 800667c:	4618      	mov	r0, r3
 800667e:	f000 f85d 	bl	800673c <USBD_Get_USB_Status>
 8006682:	4603      	mov	r3, r0
 8006684:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006686:	7dbb      	ldrb	r3, [r7, #22]
}
 8006688:	4618      	mov	r0, r3
 800668a:	3718      	adds	r7, #24
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	607a      	str	r2, [r7, #4]
 800669a:	461a      	mov	r2, r3
 800669c:	460b      	mov	r3, r1
 800669e:	72fb      	strb	r3, [r7, #11]
 80066a0:	4613      	mov	r3, r2
 80066a2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066a4:	2300      	movs	r3, #0
 80066a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066a8:	2300      	movs	r3, #0
 80066aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80066b2:	893b      	ldrh	r3, [r7, #8]
 80066b4:	7af9      	ldrb	r1, [r7, #11]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	f7fa fb46 	bl	8000d48 <HAL_PCD_EP_Receive>
 80066bc:	4603      	mov	r3, r0
 80066be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066c0:	7dfb      	ldrb	r3, [r7, #23]
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 f83a 	bl	800673c <USBD_Get_USB_Status>
 80066c8:	4603      	mov	r3, r0
 80066ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80066cc:	7dbb      	ldrb	r3, [r7, #22]
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3718      	adds	r7, #24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b082      	sub	sp, #8
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
 80066de:	460b      	mov	r3, r1
 80066e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066e8:	78fa      	ldrb	r2, [r7, #3]
 80066ea:	4611      	mov	r1, r2
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7fa fb68 	bl	8000dc2 <HAL_PCD_EP_GetRxCount>
 80066f2:	4603      	mov	r3, r0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3708      	adds	r7, #8
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006704:	4b02      	ldr	r3, [pc, #8]	; (8006710 <USBD_static_malloc+0x14>)
}
 8006706:	4618      	mov	r0, r3
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	bc80      	pop	{r7}
 800670e:	4770      	bx	lr
 8006710:	2000019c 	.word	0x2000019c

08006714 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]

}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	bc80      	pop	{r7}
 8006724:	4770      	bx	lr

08006726 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006726:	b480      	push	{r7}
 8006728:	b083      	sub	sp, #12
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
 800672e:	460b      	mov	r3, r1
 8006730:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8006732:	bf00      	nop
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	bc80      	pop	{r7}
 800673a:	4770      	bx	lr

0800673c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	4603      	mov	r3, r0
 8006744:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006746:	2300      	movs	r3, #0
 8006748:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800674a:	79fb      	ldrb	r3, [r7, #7]
 800674c:	2b03      	cmp	r3, #3
 800674e:	d817      	bhi.n	8006780 <USBD_Get_USB_Status+0x44>
 8006750:	a201      	add	r2, pc, #4	; (adr r2, 8006758 <USBD_Get_USB_Status+0x1c>)
 8006752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006756:	bf00      	nop
 8006758:	08006769 	.word	0x08006769
 800675c:	0800676f 	.word	0x0800676f
 8006760:	08006775 	.word	0x08006775
 8006764:	0800677b 	.word	0x0800677b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006768:	2300      	movs	r3, #0
 800676a:	73fb      	strb	r3, [r7, #15]
    break;
 800676c:	e00b      	b.n	8006786 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800676e:	2302      	movs	r3, #2
 8006770:	73fb      	strb	r3, [r7, #15]
    break;
 8006772:	e008      	b.n	8006786 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006774:	2301      	movs	r3, #1
 8006776:	73fb      	strb	r3, [r7, #15]
    break;
 8006778:	e005      	b.n	8006786 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800677a:	2302      	movs	r3, #2
 800677c:	73fb      	strb	r3, [r7, #15]
    break;
 800677e:	e002      	b.n	8006786 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006780:	2302      	movs	r3, #2
 8006782:	73fb      	strb	r3, [r7, #15]
    break;
 8006784:	bf00      	nop
  }
  return usb_status;
 8006786:	7bfb      	ldrb	r3, [r7, #15]
}
 8006788:	4618      	mov	r0, r3
 800678a:	3714      	adds	r7, #20
 800678c:	46bd      	mov	sp, r7
 800678e:	bc80      	pop	{r7}
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop

08006794 <__libc_init_array>:
 8006794:	b570      	push	{r4, r5, r6, lr}
 8006796:	2500      	movs	r5, #0
 8006798:	4e0c      	ldr	r6, [pc, #48]	; (80067cc <__libc_init_array+0x38>)
 800679a:	4c0d      	ldr	r4, [pc, #52]	; (80067d0 <__libc_init_array+0x3c>)
 800679c:	1ba4      	subs	r4, r4, r6
 800679e:	10a4      	asrs	r4, r4, #2
 80067a0:	42a5      	cmp	r5, r4
 80067a2:	d109      	bne.n	80067b8 <__libc_init_array+0x24>
 80067a4:	f000 f822 	bl	80067ec <_init>
 80067a8:	2500      	movs	r5, #0
 80067aa:	4e0a      	ldr	r6, [pc, #40]	; (80067d4 <__libc_init_array+0x40>)
 80067ac:	4c0a      	ldr	r4, [pc, #40]	; (80067d8 <__libc_init_array+0x44>)
 80067ae:	1ba4      	subs	r4, r4, r6
 80067b0:	10a4      	asrs	r4, r4, #2
 80067b2:	42a5      	cmp	r5, r4
 80067b4:	d105      	bne.n	80067c2 <__libc_init_array+0x2e>
 80067b6:	bd70      	pop	{r4, r5, r6, pc}
 80067b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067bc:	4798      	blx	r3
 80067be:	3501      	adds	r5, #1
 80067c0:	e7ee      	b.n	80067a0 <__libc_init_array+0xc>
 80067c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067c6:	4798      	blx	r3
 80067c8:	3501      	adds	r5, #1
 80067ca:	e7f2      	b.n	80067b2 <__libc_init_array+0x1e>
 80067cc:	08006870 	.word	0x08006870
 80067d0:	08006870 	.word	0x08006870
 80067d4:	08006870 	.word	0x08006870
 80067d8:	08006874 	.word	0x08006874

080067dc <memset>:
 80067dc:	4603      	mov	r3, r0
 80067de:	4402      	add	r2, r0
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d100      	bne.n	80067e6 <memset+0xa>
 80067e4:	4770      	bx	lr
 80067e6:	f803 1b01 	strb.w	r1, [r3], #1
 80067ea:	e7f9      	b.n	80067e0 <memset+0x4>

080067ec <_init>:
 80067ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ee:	bf00      	nop
 80067f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067f2:	bc08      	pop	{r3}
 80067f4:	469e      	mov	lr, r3
 80067f6:	4770      	bx	lr

080067f8 <_fini>:
 80067f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fa:	bf00      	nop
 80067fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067fe:	bc08      	pop	{r3}
 8006800:	469e      	mov	lr, r3
 8006802:	4770      	bx	lr
