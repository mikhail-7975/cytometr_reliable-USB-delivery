
USB_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007974  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08007a88  08007a88  00017a88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b28  08007b28  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08007b28  08007b28  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b28  08007b28  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b28  08007b28  00017b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b2c  08007b2c  00017b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08007b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cf8  200001e8  08007d18  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ee0  08007d18  00020ee0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000105e5  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000297a  00000000  00000000  000307f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a78  00000000  00000000  00033170  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000930  00000000  00000000  00033be8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019556  00000000  00000000  00034518  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bf0b  00000000  00000000  0004da6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008475f  00000000  00000000  00059979  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000de0d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ae0  00000000  00000000  000de154  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08007a6c 	.word	0x08007a6c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08007a6c 	.word	0x08007a6c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	0000      	movs	r0, r0
	...

08000a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a50:	b5b0      	push	{r4, r5, r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	for(int x = 0; x < 1000; x++) {
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	e04d      	b.n	8000af8 <main+0xa8>
		  data[x] = (int) (150 * (exp(-(x - 100) * (x - 100) / 50 ) + exp(-(x - 700) * (x - 700) / 20000  ) ));
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	3a64      	subs	r2, #100	; 0x64
 8000a66:	fb02 f303 	mul.w	r3, r2, r3
 8000a6a:	4a4d      	ldr	r2, [pc, #308]	; (8000ba0 <main+0x150>)
 8000a6c:	fb82 1203 	smull	r1, r2, r2, r3
 8000a70:	1112      	asrs	r2, r2, #4
 8000a72:	17db      	asrs	r3, r3, #31
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fcbc 	bl	80003f4 <__aeabi_i2d>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	460c      	mov	r4, r1
 8000a80:	4618      	mov	r0, r3
 8000a82:	4621      	mov	r1, r4
 8000a84:	f006 fe0c 	bl	80076a0 <exp>
 8000a88:	4604      	mov	r4, r0
 8000a8a:	460d      	mov	r5, r1
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f5c3 732f 	rsb	r3, r3, #700	; 0x2bc
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	f5a2 722f 	sub.w	r2, r2, #700	; 0x2bc
 8000a98:	fb02 f303 	mul.w	r3, r2, r3
 8000a9c:	4a41      	ldr	r2, [pc, #260]	; (8000ba4 <main+0x154>)
 8000a9e:	fb82 1203 	smull	r1, r2, r2, r3
 8000aa2:	1352      	asrs	r2, r2, #13
 8000aa4:	17db      	asrs	r3, r3, #31
 8000aa6:	1ad3      	subs	r3, r2, r3
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fca3 	bl	80003f4 <__aeabi_i2d>
 8000aae:	4602      	mov	r2, r0
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f006 fdf3 	bl	80076a0 <exp>
 8000aba:	4602      	mov	r2, r0
 8000abc:	460b      	mov	r3, r1
 8000abe:	4620      	mov	r0, r4
 8000ac0:	4629      	mov	r1, r5
 8000ac2:	f7ff fb4b 	bl	800015c <__adddf3>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	460c      	mov	r4, r1
 8000aca:	4618      	mov	r0, r3
 8000acc:	4621      	mov	r1, r4
 8000ace:	a332      	add	r3, pc, #200	; (adr r3, 8000b98 <main+0x148>)
 8000ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ad4:	f7ff fcf8 	bl	80004c8 <__aeabi_dmul>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	460c      	mov	r4, r1
 8000adc:	4618      	mov	r0, r3
 8000ade:	4621      	mov	r1, r4
 8000ae0:	f7ff ff8c 	bl	80009fc <__aeabi_d2iz>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	b2d9      	uxtb	r1, r3
 8000ae8:	4a2f      	ldr	r2, [pc, #188]	; (8000ba8 <main+0x158>)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	4413      	add	r3, r2
 8000aee:	460a      	mov	r2, r1
 8000af0:	701a      	strb	r2, [r3, #0]
	for(int x = 0; x < 1000; x++) {
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	3301      	adds	r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000afe:	dbad      	blt.n	8000a5c <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b00:	f000 f9c4 	bl	8000e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b04:	f000 f85c 	bl	8000bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b08:	f000 f8b6 	bl	8000c78 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000b0c:	f006 f8ee 	bl	8006cec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint8_t count = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	72fb      	strb	r3, [r7, #11]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_Delay(0 + rand() % 3);
	  if(haveDataToParse) {
 8000b14:	4b25      	ldr	r3, [pc, #148]	; (8000bac <main+0x15c>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d0fb      	beq.n	8000b14 <main+0xc4>

		  if(UserRXbuffer[0] == 'r') {
 8000b1c:	4b24      	ldr	r3, [pc, #144]	; (8000bb0 <main+0x160>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b72      	cmp	r3, #114	; 0x72
 8000b22:	d118      	bne.n	8000b56 <main+0x106>
			  while(CDC_Transmit_FS(&startSymbol, 1) == USBD_BUSY);
 8000b24:	bf00      	nop
 8000b26:	2101      	movs	r1, #1
 8000b28:	4822      	ldr	r0, [pc, #136]	; (8000bb4 <main+0x164>)
 8000b2a:	f006 f9a1 	bl	8006e70 <CDC_Transmit_FS>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d0f8      	beq.n	8000b26 <main+0xd6>
			  //HAL_Delay(0 + rand() % 3);
			  while(CDC_Transmit_FS(&data, 1000) == USBD_BUSY);
 8000b34:	bf00      	nop
 8000b36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b3a:	481b      	ldr	r0, [pc, #108]	; (8000ba8 <main+0x158>)
 8000b3c:	f006 f998 	bl	8006e70 <CDC_Transmit_FS>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d0f7      	beq.n	8000b36 <main+0xe6>
			  //HAL_Delay(0 + rand() % 3);
			  while(CDC_Transmit_FS(&stopSymbol, 1) == USBD_BUSY);
 8000b46:	bf00      	nop
 8000b48:	2101      	movs	r1, #1
 8000b4a:	481b      	ldr	r0, [pc, #108]	; (8000bb8 <main+0x168>)
 8000b4c:	f006 f990 	bl	8006e70 <CDC_Transmit_FS>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d0f8      	beq.n	8000b48 <main+0xf8>
		  }

		  if(UserRXbuffer[0] == 'a') {
 8000b56:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <main+0x160>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b61      	cmp	r3, #97	; 0x61
 8000b5c:	d116      	bne.n	8000b8c <main+0x13c>
			  //HAL_Delay(0 + rand() % 3);
			  for(int x = 0; x < 1000; x++) {
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	e007      	b.n	8000b74 <main+0x124>
			 		  data[x] = count;//(int) (1 + rand() % 10 + 150 * (exp(-(x - 100) * (x - 100) / 50 ) + exp(-(x - 700) * (x - 700) / 20000  ) ));
 8000b64:	4a10      	ldr	r2, [pc, #64]	; (8000ba8 <main+0x158>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	7afa      	ldrb	r2, [r7, #11]
 8000b6c:	701a      	strb	r2, [r3, #0]
			  for(int x = 0; x < 1000; x++) {
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	3301      	adds	r3, #1
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b7a:	dbf3      	blt.n	8000b64 <main+0x114>
			 	  }
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000b7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b80:	480e      	ldr	r0, [pc, #56]	; (8000bbc <main+0x16c>)
 8000b82:	f000 fc65 	bl	8001450 <HAL_GPIO_TogglePin>
			  count++;
 8000b86:	7afb      	ldrb	r3, [r7, #11]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	72fb      	strb	r3, [r7, #11]
		  }

		  haveDataToParse = 0;
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <main+0x15c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]
	  if(haveDataToParse) {
 8000b92:	e7bf      	b.n	8000b14 <main+0xc4>
 8000b94:	f3af 8000 	nop.w
 8000b98:	00000000 	.word	0x00000000
 8000b9c:	4062c000 	.word	0x4062c000
 8000ba0:	51eb851f 	.word	0x51eb851f
 8000ba4:	68db8bad 	.word	0x68db8bad
 8000ba8:	20000428 	.word	0x20000428
 8000bac:	20000204 	.word	0x20000204
 8000bb0:	20000810 	.word	0x20000810
 8000bb4:	20000000 	.word	0x20000000
 8000bb8:	20000001 	.word	0x20000001
 8000bbc:	40011000 	.word	0x40011000

08000bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b094      	sub	sp, #80	; 0x50
 8000bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bca:	2228      	movs	r2, #40	; 0x28
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f006 fd5e 	bl	8007690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c02:	2302      	movs	r3, #2
 8000c04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000c0c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c10:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c16:	4618      	mov	r0, r3
 8000c18:	f001 ffb6 	bl	8002b88 <HAL_RCC_OscConfig>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c22:	f000 f891 	bl	8000d48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c26:	230f      	movs	r3, #15
 8000c28:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c36:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2101      	movs	r1, #1
 8000c42:	4618      	mov	r0, r3
 8000c44:	f002 fa20 	bl	8003088 <HAL_RCC_ClockConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c4e:	f000 f87b 	bl	8000d48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c52:	2310      	movs	r3, #16
 8000c54:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000c56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c5a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f002 fb7c 	bl	800335c <HAL_RCCEx_PeriphCLKConfig>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c6a:	f000 f86d 	bl	8000d48 <Error_Handler>
  }
}
 8000c6e:	bf00      	nop
 8000c70:	3750      	adds	r7, #80	; 0x50
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	f107 0310 	add.w	r3, r7, #16
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8c:	4b1e      	ldr	r3, [pc, #120]	; (8000d08 <MX_GPIO_Init+0x90>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	4a1d      	ldr	r2, [pc, #116]	; (8000d08 <MX_GPIO_Init+0x90>)
 8000c92:	f043 0310 	orr.w	r3, r3, #16
 8000c96:	6193      	str	r3, [r2, #24]
 8000c98:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <MX_GPIO_Init+0x90>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	f003 0310 	and.w	r3, r3, #16
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca4:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <MX_GPIO_Init+0x90>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	4a17      	ldr	r2, [pc, #92]	; (8000d08 <MX_GPIO_Init+0x90>)
 8000caa:	f043 0320 	orr.w	r3, r3, #32
 8000cae:	6193      	str	r3, [r2, #24]
 8000cb0:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <MX_GPIO_Init+0x90>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	f003 0320 	and.w	r3, r3, #32
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <MX_GPIO_Init+0x90>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	4a11      	ldr	r2, [pc, #68]	; (8000d08 <MX_GPIO_Init+0x90>)
 8000cc2:	f043 0304 	orr.w	r3, r3, #4
 8000cc6:	6193      	str	r3, [r2, #24]
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <MX_GPIO_Init+0x90>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	f003 0304 	and.w	r3, r3, #4
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cda:	480c      	ldr	r0, [pc, #48]	; (8000d0c <MX_GPIO_Init+0x94>)
 8000cdc:	f000 fba0 	bl	8001420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ce0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf2:	f107 0310 	add.w	r3, r7, #16
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4804      	ldr	r0, [pc, #16]	; (8000d0c <MX_GPIO_Init+0x94>)
 8000cfa:	f000 fa37 	bl	800116c <HAL_GPIO_Init>

}
 8000cfe:	bf00      	nop
 8000d00:	3720      	adds	r7, #32
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40011000 	.word	0x40011000

08000d10 <CDC_Recive_Callback>:

/* USER CODE BEGIN 4 */
void CDC_Recive_Callback(uint8_t* Buf, uint16_t* len) {
 8000d10:	b490      	push	{r4, r7}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
	memcpy(&UserRXbuffer, Buf, 16);
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <CDC_Recive_Callback+0x30>)
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	6814      	ldr	r4, [r2, #0]
 8000d20:	6850      	ldr	r0, [r2, #4]
 8000d22:	6891      	ldr	r1, [r2, #8]
 8000d24:	68d2      	ldr	r2, [r2, #12]
 8000d26:	601c      	str	r4, [r3, #0]
 8000d28:	6058      	str	r0, [r3, #4]
 8000d2a:	6099      	str	r1, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]

	haveDataToParse = 1;
 8000d2e:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <CDC_Recive_Callback+0x34>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	701a      	strb	r2, [r3, #0]
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc90      	pop	{r4, r7}
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	20000810 	.word	0x20000810
 8000d44:	20000204 	.word	0x20000204

08000d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr

08000d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <HAL_MspInit+0x5c>)
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	4a14      	ldr	r2, [pc, #80]	; (8000db0 <HAL_MspInit+0x5c>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6193      	str	r3, [r2, #24]
 8000d66:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_MspInit+0x5c>)
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d72:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <HAL_MspInit+0x5c>)
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	4a0e      	ldr	r2, [pc, #56]	; (8000db0 <HAL_MspInit+0x5c>)
 8000d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7c:	61d3      	str	r3, [r2, #28]
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <HAL_MspInit+0x5c>)
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <HAL_MspInit+0x60>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <HAL_MspInit+0x60>)
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da6:	bf00      	nop
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40010000 	.word	0x40010000

08000db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr

08000dc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <HardFault_Handler+0x4>

08000dca <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <MemManage_Handler+0x4>

08000dd0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <BusFault_Handler+0x4>

08000dd6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <UsageFault_Handler+0x4>

08000ddc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr

08000de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr

08000e00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e04:	f000 f888 	bl	8000f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e10:	4802      	ldr	r0, [pc, #8]	; (8000e1c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000e12:	f000 fc67 	bl	80016e4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000bf4 	.word	0x20000bf4

08000e20 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e24:	4802      	ldr	r0, [pc, #8]	; (8000e30 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000e26:	f000 fc5d 	bl	80016e4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000bf4 	.word	0x20000bf4

08000e34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr

08000e40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e40:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e42:	e003      	b.n	8000e4c <LoopCopyDataInit>

08000e44 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000e46:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e48:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e4a:	3104      	adds	r1, #4

08000e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e4c:	480a      	ldr	r0, [pc, #40]	; (8000e78 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000e50:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e52:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e54:	d3f6      	bcc.n	8000e44 <CopyDataInit>
  ldr r2, =_sbss
 8000e56:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000e58:	e002      	b.n	8000e60 <LoopFillZerobss>

08000e5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000e5c:	f842 3b04 	str.w	r3, [r2], #4

08000e60 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000e62:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e64:	d3f9      	bcc.n	8000e5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e66:	f7ff ffe5 	bl	8000e34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e6a:	f006 fbed 	bl	8007648 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e6e:	f7ff fdef 	bl	8000a50 <main>
  bx lr
 8000e72:	4770      	bx	lr
  ldr r3, =_sidata
 8000e74:	08007b30 	.word	0x08007b30
  ldr r0, =_sdata
 8000e78:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e7c:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 8000e80:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 8000e84:	20000ee0 	.word	0x20000ee0

08000e88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e88:	e7fe      	b.n	8000e88 <ADC1_2_IRQHandler>
	...

08000e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <HAL_Init+0x28>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a07      	ldr	r2, [pc, #28]	; (8000eb4 <HAL_Init+0x28>)
 8000e96:	f043 0310 	orr.w	r3, r3, #16
 8000e9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f000 f923 	bl	80010e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f000 f808 	bl	8000eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea8:	f7ff ff54 	bl	8000d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40022000 	.word	0x40022000

08000eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_InitTick+0x54>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_InitTick+0x58>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 f93b 	bl	8001152 <HAL_SYSTICK_Config>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00e      	b.n	8000f04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b0f      	cmp	r3, #15
 8000eea:	d80a      	bhi.n	8000f02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eec:	2200      	movs	r2, #0
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef4:	f000 f903 	bl	80010fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef8:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <HAL_InitTick+0x5c>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	e000      	b.n	8000f04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000004 	.word	0x20000004
 8000f10:	2000000c 	.word	0x2000000c
 8000f14:	20000008 	.word	0x20000008

08000f18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <HAL_IncTick+0x1c>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <HAL_IncTick+0x20>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	4a03      	ldr	r2, [pc, #12]	; (8000f38 <HAL_IncTick+0x20>)
 8000f2a:	6013      	str	r3, [r2, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	2000000c 	.word	0x2000000c
 8000f38:	20000820 	.word	0x20000820

08000f3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f40:	4b02      	ldr	r3, [pc, #8]	; (8000f4c <HAL_GetTick+0x10>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	20000820 	.word	0x20000820

08000f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f82:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	60d3      	str	r3, [r2, #12]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	f003 0307 	and.w	r3, r3, #7
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	db0b      	blt.n	8000fde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	f003 021f 	and.w	r2, r3, #31
 8000fcc:	4906      	ldr	r1, [pc, #24]	; (8000fe8 <__NVIC_EnableIRQ+0x34>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	095b      	lsrs	r3, r3, #5
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	e000e100 	.word	0xe000e100

08000fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	db0a      	blt.n	8001016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	b2da      	uxtb	r2, r3
 8001004:	490c      	ldr	r1, [pc, #48]	; (8001038 <__NVIC_SetPriority+0x4c>)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	0112      	lsls	r2, r2, #4
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	440b      	add	r3, r1
 8001010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001014:	e00a      	b.n	800102c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4908      	ldr	r1, [pc, #32]	; (800103c <__NVIC_SetPriority+0x50>)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	3b04      	subs	r3, #4
 8001024:	0112      	lsls	r2, r2, #4
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	440b      	add	r3, r1
 800102a:	761a      	strb	r2, [r3, #24]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000e100 	.word	0xe000e100
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	; 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f1c3 0307 	rsb	r3, r3, #7
 800105a:	2b04      	cmp	r3, #4
 800105c:	bf28      	it	cs
 800105e:	2304      	movcs	r3, #4
 8001060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3304      	adds	r3, #4
 8001066:	2b06      	cmp	r3, #6
 8001068:	d902      	bls.n	8001070 <NVIC_EncodePriority+0x30>
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3b03      	subs	r3, #3
 800106e:	e000      	b.n	8001072 <NVIC_EncodePriority+0x32>
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	f04f 32ff 	mov.w	r2, #4294967295
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43da      	mvns	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	401a      	ands	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001088:	f04f 31ff 	mov.w	r1, #4294967295
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa01 f303 	lsl.w	r3, r1, r3
 8001092:	43d9      	mvns	r1, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	4313      	orrs	r3, r2
         );
}
 800109a:	4618      	mov	r0, r3
 800109c:	3724      	adds	r7, #36	; 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010b4:	d301      	bcc.n	80010ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00f      	b.n	80010da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <SysTick_Config+0x40>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c2:	210f      	movs	r1, #15
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f7ff ff90 	bl	8000fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <SysTick_Config+0x40>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d2:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <SysTick_Config+0x40>)
 80010d4:	2207      	movs	r2, #7
 80010d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	e000e010 	.word	0xe000e010

080010e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff2d 	bl	8000f50 <__NVIC_SetPriorityGrouping>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001110:	f7ff ff42 	bl	8000f98 <__NVIC_GetPriorityGrouping>
 8001114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	6978      	ldr	r0, [r7, #20]
 800111c:	f7ff ff90 	bl	8001040 <NVIC_EncodePriority>
 8001120:	4602      	mov	r2, r0
 8001122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff5f 	bl	8000fec <__NVIC_SetPriority>
}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff35 	bl	8000fb4 <__NVIC_EnableIRQ>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ffa2 	bl	80010a4 <SysTick_Config>
 8001160:	4603      	mov	r3, r0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800116c:	b480      	push	{r7}
 800116e:	b08b      	sub	sp, #44	; 0x2c
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001176:	2300      	movs	r3, #0
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117e:	e127      	b.n	80013d0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001180:	2201      	movs	r2, #1
 8001182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	69fa      	ldr	r2, [r7, #28]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	429a      	cmp	r2, r3
 800119a:	f040 8116 	bne.w	80013ca <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b12      	cmp	r3, #18
 80011a4:	d034      	beq.n	8001210 <HAL_GPIO_Init+0xa4>
 80011a6:	2b12      	cmp	r3, #18
 80011a8:	d80d      	bhi.n	80011c6 <HAL_GPIO_Init+0x5a>
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d02b      	beq.n	8001206 <HAL_GPIO_Init+0x9a>
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d804      	bhi.n	80011bc <HAL_GPIO_Init+0x50>
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d031      	beq.n	800121a <HAL_GPIO_Init+0xae>
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d01c      	beq.n	80011f4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011ba:	e048      	b.n	800124e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011bc:	2b03      	cmp	r3, #3
 80011be:	d043      	beq.n	8001248 <HAL_GPIO_Init+0xdc>
 80011c0:	2b11      	cmp	r3, #17
 80011c2:	d01b      	beq.n	80011fc <HAL_GPIO_Init+0x90>
          break;
 80011c4:	e043      	b.n	800124e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011c6:	4a89      	ldr	r2, [pc, #548]	; (80013ec <HAL_GPIO_Init+0x280>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d026      	beq.n	800121a <HAL_GPIO_Init+0xae>
 80011cc:	4a87      	ldr	r2, [pc, #540]	; (80013ec <HAL_GPIO_Init+0x280>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d806      	bhi.n	80011e0 <HAL_GPIO_Init+0x74>
 80011d2:	4a87      	ldr	r2, [pc, #540]	; (80013f0 <HAL_GPIO_Init+0x284>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d020      	beq.n	800121a <HAL_GPIO_Init+0xae>
 80011d8:	4a86      	ldr	r2, [pc, #536]	; (80013f4 <HAL_GPIO_Init+0x288>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d01d      	beq.n	800121a <HAL_GPIO_Init+0xae>
          break;
 80011de:	e036      	b.n	800124e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011e0:	4a85      	ldr	r2, [pc, #532]	; (80013f8 <HAL_GPIO_Init+0x28c>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d019      	beq.n	800121a <HAL_GPIO_Init+0xae>
 80011e6:	4a85      	ldr	r2, [pc, #532]	; (80013fc <HAL_GPIO_Init+0x290>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d016      	beq.n	800121a <HAL_GPIO_Init+0xae>
 80011ec:	4a84      	ldr	r2, [pc, #528]	; (8001400 <HAL_GPIO_Init+0x294>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d013      	beq.n	800121a <HAL_GPIO_Init+0xae>
          break;
 80011f2:	e02c      	b.n	800124e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	623b      	str	r3, [r7, #32]
          break;
 80011fa:	e028      	b.n	800124e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	3304      	adds	r3, #4
 8001202:	623b      	str	r3, [r7, #32]
          break;
 8001204:	e023      	b.n	800124e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	3308      	adds	r3, #8
 800120c:	623b      	str	r3, [r7, #32]
          break;
 800120e:	e01e      	b.n	800124e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	330c      	adds	r3, #12
 8001216:	623b      	str	r3, [r7, #32]
          break;
 8001218:	e019      	b.n	800124e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d102      	bne.n	8001228 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001222:	2304      	movs	r3, #4
 8001224:	623b      	str	r3, [r7, #32]
          break;
 8001226:	e012      	b.n	800124e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d105      	bne.n	800123c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001230:	2308      	movs	r3, #8
 8001232:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	69fa      	ldr	r2, [r7, #28]
 8001238:	611a      	str	r2, [r3, #16]
          break;
 800123a:	e008      	b.n	800124e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800123c:	2308      	movs	r3, #8
 800123e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	615a      	str	r2, [r3, #20]
          break;
 8001246:	e002      	b.n	800124e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001248:	2300      	movs	r3, #0
 800124a:	623b      	str	r3, [r7, #32]
          break;
 800124c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	2bff      	cmp	r3, #255	; 0xff
 8001252:	d801      	bhi.n	8001258 <HAL_GPIO_Init+0xec>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	e001      	b.n	800125c <HAL_GPIO_Init+0xf0>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3304      	adds	r3, #4
 800125c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	2bff      	cmp	r3, #255	; 0xff
 8001262:	d802      	bhi.n	800126a <HAL_GPIO_Init+0xfe>
 8001264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	e002      	b.n	8001270 <HAL_GPIO_Init+0x104>
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	3b08      	subs	r3, #8
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	210f      	movs	r1, #15
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	401a      	ands	r2, r3
 8001282:	6a39      	ldr	r1, [r7, #32]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	431a      	orrs	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 8096 	beq.w	80013ca <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800129e:	4b59      	ldr	r3, [pc, #356]	; (8001404 <HAL_GPIO_Init+0x298>)
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	4a58      	ldr	r2, [pc, #352]	; (8001404 <HAL_GPIO_Init+0x298>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6193      	str	r3, [r2, #24]
 80012aa:	4b56      	ldr	r3, [pc, #344]	; (8001404 <HAL_GPIO_Init+0x298>)
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012b6:	4a54      	ldr	r2, [pc, #336]	; (8001408 <HAL_GPIO_Init+0x29c>)
 80012b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ba:	089b      	lsrs	r3, r3, #2
 80012bc:	3302      	adds	r3, #2
 80012be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	f003 0303 	and.w	r3, r3, #3
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	220f      	movs	r2, #15
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	4013      	ands	r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a4b      	ldr	r2, [pc, #300]	; (800140c <HAL_GPIO_Init+0x2a0>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d013      	beq.n	800130a <HAL_GPIO_Init+0x19e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4a      	ldr	r2, [pc, #296]	; (8001410 <HAL_GPIO_Init+0x2a4>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d00d      	beq.n	8001306 <HAL_GPIO_Init+0x19a>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a49      	ldr	r2, [pc, #292]	; (8001414 <HAL_GPIO_Init+0x2a8>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d007      	beq.n	8001302 <HAL_GPIO_Init+0x196>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a48      	ldr	r2, [pc, #288]	; (8001418 <HAL_GPIO_Init+0x2ac>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d101      	bne.n	80012fe <HAL_GPIO_Init+0x192>
 80012fa:	2303      	movs	r3, #3
 80012fc:	e006      	b.n	800130c <HAL_GPIO_Init+0x1a0>
 80012fe:	2304      	movs	r3, #4
 8001300:	e004      	b.n	800130c <HAL_GPIO_Init+0x1a0>
 8001302:	2302      	movs	r3, #2
 8001304:	e002      	b.n	800130c <HAL_GPIO_Init+0x1a0>
 8001306:	2301      	movs	r3, #1
 8001308:	e000      	b.n	800130c <HAL_GPIO_Init+0x1a0>
 800130a:	2300      	movs	r3, #0
 800130c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800130e:	f002 0203 	and.w	r2, r2, #3
 8001312:	0092      	lsls	r2, r2, #2
 8001314:	4093      	lsls	r3, r2
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	4313      	orrs	r3, r2
 800131a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800131c:	493a      	ldr	r1, [pc, #232]	; (8001408 <HAL_GPIO_Init+0x29c>)
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	089b      	lsrs	r3, r3, #2
 8001322:	3302      	adds	r3, #2
 8001324:	68fa      	ldr	r2, [r7, #12]
 8001326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d006      	beq.n	8001344 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001336:	4b39      	ldr	r3, [pc, #228]	; (800141c <HAL_GPIO_Init+0x2b0>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	4938      	ldr	r1, [pc, #224]	; (800141c <HAL_GPIO_Init+0x2b0>)
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	600b      	str	r3, [r1, #0]
 8001342:	e006      	b.n	8001352 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001344:	4b35      	ldr	r3, [pc, #212]	; (800141c <HAL_GPIO_Init+0x2b0>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	43db      	mvns	r3, r3
 800134c:	4933      	ldr	r1, [pc, #204]	; (800141c <HAL_GPIO_Init+0x2b0>)
 800134e:	4013      	ands	r3, r2
 8001350:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d006      	beq.n	800136c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800135e:	4b2f      	ldr	r3, [pc, #188]	; (800141c <HAL_GPIO_Init+0x2b0>)
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	492e      	ldr	r1, [pc, #184]	; (800141c <HAL_GPIO_Init+0x2b0>)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	604b      	str	r3, [r1, #4]
 800136a:	e006      	b.n	800137a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800136c:	4b2b      	ldr	r3, [pc, #172]	; (800141c <HAL_GPIO_Init+0x2b0>)
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	43db      	mvns	r3, r3
 8001374:	4929      	ldr	r1, [pc, #164]	; (800141c <HAL_GPIO_Init+0x2b0>)
 8001376:	4013      	ands	r3, r2
 8001378:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d006      	beq.n	8001394 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001386:	4b25      	ldr	r3, [pc, #148]	; (800141c <HAL_GPIO_Init+0x2b0>)
 8001388:	689a      	ldr	r2, [r3, #8]
 800138a:	4924      	ldr	r1, [pc, #144]	; (800141c <HAL_GPIO_Init+0x2b0>)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	4313      	orrs	r3, r2
 8001390:	608b      	str	r3, [r1, #8]
 8001392:	e006      	b.n	80013a2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001394:	4b21      	ldr	r3, [pc, #132]	; (800141c <HAL_GPIO_Init+0x2b0>)
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	43db      	mvns	r3, r3
 800139c:	491f      	ldr	r1, [pc, #124]	; (800141c <HAL_GPIO_Init+0x2b0>)
 800139e:	4013      	ands	r3, r2
 80013a0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d006      	beq.n	80013bc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013ae:	4b1b      	ldr	r3, [pc, #108]	; (800141c <HAL_GPIO_Init+0x2b0>)
 80013b0:	68da      	ldr	r2, [r3, #12]
 80013b2:	491a      	ldr	r1, [pc, #104]	; (800141c <HAL_GPIO_Init+0x2b0>)
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	60cb      	str	r3, [r1, #12]
 80013ba:	e006      	b.n	80013ca <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013bc:	4b17      	ldr	r3, [pc, #92]	; (800141c <HAL_GPIO_Init+0x2b0>)
 80013be:	68da      	ldr	r2, [r3, #12]
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	4915      	ldr	r1, [pc, #84]	; (800141c <HAL_GPIO_Init+0x2b0>)
 80013c6:	4013      	ands	r3, r2
 80013c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013cc:	3301      	adds	r3, #1
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	fa22 f303 	lsr.w	r3, r2, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f47f aed0 	bne.w	8001180 <HAL_GPIO_Init+0x14>
  }
}
 80013e0:	bf00      	nop
 80013e2:	372c      	adds	r7, #44	; 0x2c
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	10210000 	.word	0x10210000
 80013f0:	10110000 	.word	0x10110000
 80013f4:	10120000 	.word	0x10120000
 80013f8:	10310000 	.word	0x10310000
 80013fc:	10320000 	.word	0x10320000
 8001400:	10220000 	.word	0x10220000
 8001404:	40021000 	.word	0x40021000
 8001408:	40010000 	.word	0x40010000
 800140c:	40010800 	.word	0x40010800
 8001410:	40010c00 	.word	0x40010c00
 8001414:	40011000 	.word	0x40011000
 8001418:	40011400 	.word	0x40011400
 800141c:	40010400 	.word	0x40010400

08001420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	807b      	strh	r3, [r7, #2]
 800142c:	4613      	mov	r3, r2
 800142e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001430:	787b      	ldrb	r3, [r7, #1]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001436:	887a      	ldrh	r2, [r7, #2]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800143c:	e003      	b.n	8001446 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800143e:	887b      	ldrh	r3, [r7, #2]
 8001440:	041a      	lsls	r2, r3, #16
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	611a      	str	r2, [r3, #16]
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001462:	887a      	ldrh	r2, [r7, #2]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4013      	ands	r3, r2
 8001468:	041a      	lsls	r2, r3, #16
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	43d9      	mvns	r1, r3
 800146e:	887b      	ldrh	r3, [r7, #2]
 8001470:	400b      	ands	r3, r1
 8001472:	431a      	orrs	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	611a      	str	r2, [r3, #16]
}
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr

08001482 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001482:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001484:	b08b      	sub	sp, #44	; 0x2c
 8001486:	af06      	add	r7, sp, #24
 8001488:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e0fd      	b.n	8001690 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b00      	cmp	r3, #0
 800149e:	d106      	bne.n	80014ae <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f005 fe15 	bl	80070d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2203      	movs	r2, #3
 80014b2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f002 f82a 	bl	8003514 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	687e      	ldr	r6, [r7, #4]
 80014c8:	466d      	mov	r5, sp
 80014ca:	f106 0410 	add.w	r4, r6, #16
 80014ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014d2:	6823      	ldr	r3, [r4, #0]
 80014d4:	602b      	str	r3, [r5, #0]
 80014d6:	1d33      	adds	r3, r6, #4
 80014d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014da:	6838      	ldr	r0, [r7, #0]
 80014dc:	f001 fff4 	bl	80034c8 <USB_CoreInit>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d005      	beq.n	80014f2 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2202      	movs	r2, #2
 80014ea:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e0ce      	b.n	8001690 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f002 f825 	bl	8003548 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014fe:	2300      	movs	r3, #0
 8001500:	73fb      	strb	r3, [r7, #15]
 8001502:	e04c      	b.n	800159e <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001504:	7bfb      	ldrb	r3, [r7, #15]
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	1c5a      	adds	r2, r3, #1
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	440b      	add	r3, r1
 8001514:	3301      	adds	r3, #1
 8001516:	2201      	movs	r2, #1
 8001518:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800151a:	7bfb      	ldrb	r3, [r7, #15]
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	1c5a      	adds	r2, r3, #1
 8001520:	4613      	mov	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	440b      	add	r3, r1
 800152a:	7bfa      	ldrb	r2, [r7, #15]
 800152c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800152e:	7bfa      	ldrb	r2, [r7, #15]
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	b298      	uxth	r0, r3
 8001534:	6879      	ldr	r1, [r7, #4]
 8001536:	4613      	mov	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	440b      	add	r3, r1
 8001540:	3336      	adds	r3, #54	; 0x36
 8001542:	4602      	mov	r2, r0
 8001544:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	1c5a      	adds	r2, r3, #1
 800154c:	4613      	mov	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	440b      	add	r3, r1
 8001556:	3303      	adds	r3, #3
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800155c:	7bfa      	ldrb	r2, [r7, #15]
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	440b      	add	r3, r1
 800156a:	3338      	adds	r3, #56	; 0x38
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001570:	7bfa      	ldrb	r2, [r7, #15]
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	4613      	mov	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	440b      	add	r3, r1
 800157e:	333c      	adds	r3, #60	; 0x3c
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001584:	7bfa      	ldrb	r2, [r7, #15]
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	440b      	add	r3, r1
 8001592:	3340      	adds	r3, #64	; 0x40
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	3301      	adds	r3, #1
 800159c:	73fb      	strb	r3, [r7, #15]
 800159e:	7bfa      	ldrb	r2, [r7, #15]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d3ad      	bcc.n	8001504 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015a8:	2300      	movs	r3, #0
 80015aa:	73fb      	strb	r3, [r7, #15]
 80015ac:	e044      	b.n	8001638 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015ae:	7bfa      	ldrb	r2, [r7, #15]
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	440b      	add	r3, r1
 80015bc:	f203 1369 	addw	r3, r3, #361	; 0x169
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015c4:	7bfa      	ldrb	r2, [r7, #15]
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	4613      	mov	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	440b      	add	r3, r1
 80015d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015d6:	7bfa      	ldrb	r2, [r7, #15]
 80015d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015da:	7bfa      	ldrb	r2, [r7, #15]
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	440b      	add	r3, r1
 80015e8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015f0:	7bfa      	ldrb	r2, [r7, #15]
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	440b      	add	r3, r1
 80015fe:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001606:	7bfa      	ldrb	r2, [r7, #15]
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	4613      	mov	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	440b      	add	r3, r1
 8001614:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800161c:	7bfa      	ldrb	r2, [r7, #15]
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	440b      	add	r3, r1
 800162a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	3301      	adds	r3, #1
 8001636:	73fb      	strb	r3, [r7, #15]
 8001638:	7bfa      	ldrb	r2, [r7, #15]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	429a      	cmp	r2, r3
 8001640:	d3b5      	bcc.n	80015ae <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	687e      	ldr	r6, [r7, #4]
 800164a:	466d      	mov	r5, sp
 800164c:	f106 0410 	add.w	r4, r6, #16
 8001650:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001652:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001654:	6823      	ldr	r3, [r4, #0]
 8001656:	602b      	str	r3, [r5, #0]
 8001658:	1d33      	adds	r3, r6, #4
 800165a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800165c:	6838      	ldr	r0, [r7, #0]
 800165e:	f001 ff7f 	bl	8003560 <USB_DevInit>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d005      	beq.n	8001674 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2202      	movs	r2, #2
 800166c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e00d      	b.n	8001690 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f003 ff19 	bl	80054c0 <USB_DevDisconnect>

  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001698 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d101      	bne.n	80016ae <HAL_PCD_Start+0x16>
 80016aa:	2302      	movs	r3, #2
 80016ac:	e016      	b.n	80016dc <HAL_PCD_Start+0x44>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2201      	movs	r2, #1
 80016b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f001 ff14 	bl	80034e8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80016c0:	2101      	movs	r1, #1
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f005 ff83 	bl	80075ce <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f003 feed 	bl	80054ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f003 feef 	bl	80054d4 <USB_ReadInterrupts>
 80016f6:	4603      	mov	r3, r0
 80016f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001700:	d102      	bne.n	8001708 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 fb61 	bl	8001dca <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f003 fee1 	bl	80054d4 <USB_ReadInterrupts>
 8001712:	4603      	mov	r3, r0
 8001714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800171c:	d112      	bne.n	8001744 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001726:	b29a      	uxth	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001730:	b292      	uxth	r2, r2
 8001732:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f005 fd51 	bl	80071de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800173c:	2100      	movs	r1, #0
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 f925 	bl	800198e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f003 fec3 	bl	80054d4 <USB_ReadInterrupts>
 800174e:	4603      	mov	r3, r0
 8001750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001754:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001758:	d10b      	bne.n	8001772 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001762:	b29a      	uxth	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800176c:	b292      	uxth	r2, r2
 800176e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f003 feac 	bl	80054d4 <USB_ReadInterrupts>
 800177c:	4603      	mov	r3, r0
 800177e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001786:	d10b      	bne.n	80017a0 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001790:	b29a      	uxth	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800179a:	b292      	uxth	r2, r2
 800179c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f003 fe95 	bl	80054d4 <USB_ReadInterrupts>
 80017aa:	4603      	mov	r3, r0
 80017ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017b4:	d126      	bne.n	8001804 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017be:	b29a      	uxth	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 0204 	bic.w	r2, r2, #4
 80017c8:	b292      	uxth	r2, r2
 80017ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 0208 	bic.w	r2, r2, #8
 80017e0:	b292      	uxth	r2, r2
 80017e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f005 fd32 	bl	8007250 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017fe:	b292      	uxth	r2, r2
 8001800:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f003 fe63 	bl	80054d4 <USB_ReadInterrupts>
 800180e:	4603      	mov	r3, r0
 8001810:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001814:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001818:	f040 8084 	bne.w	8001924 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800181c:	2300      	movs	r3, #0
 800181e:	77fb      	strb	r3, [r7, #31]
 8001820:	e011      	b.n	8001846 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	7ffb      	ldrb	r3, [r7, #31]
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	441a      	add	r2, r3
 800182e:	7ffb      	ldrb	r3, [r7, #31]
 8001830:	8812      	ldrh	r2, [r2, #0]
 8001832:	b292      	uxth	r2, r2
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	f107 0120 	add.w	r1, r7, #32
 800183a:	440b      	add	r3, r1
 800183c:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001840:	7ffb      	ldrb	r3, [r7, #31]
 8001842:	3301      	adds	r3, #1
 8001844:	77fb      	strb	r3, [r7, #31]
 8001846:	7ffb      	ldrb	r3, [r7, #31]
 8001848:	2b07      	cmp	r3, #7
 800184a:	d9ea      	bls.n	8001822 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001854:	b29a      	uxth	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 0201 	orr.w	r2, r2, #1
 800185e:	b292      	uxth	r2, r2
 8001860:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800186c:	b29a      	uxth	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 0201 	bic.w	r2, r2, #1
 8001876:	b292      	uxth	r2, r2
 8001878:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800187c:	bf00      	nop
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001886:	b29b      	uxth	r3, r3
 8001888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0f6      	beq.n	800187e <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001898:	b29a      	uxth	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018a2:	b292      	uxth	r2, r2
 80018a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80018a8:	2300      	movs	r3, #0
 80018aa:	77fb      	strb	r3, [r7, #31]
 80018ac:	e010      	b.n	80018d0 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80018ae:	7ffb      	ldrb	r3, [r7, #31]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	4611      	mov	r1, r2
 80018b6:	7ffa      	ldrb	r2, [r7, #31]
 80018b8:	0092      	lsls	r2, r2, #2
 80018ba:	440a      	add	r2, r1
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	f107 0120 	add.w	r1, r7, #32
 80018c2:	440b      	add	r3, r1
 80018c4:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80018c8:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80018ca:	7ffb      	ldrb	r3, [r7, #31]
 80018cc:	3301      	adds	r3, #1
 80018ce:	77fb      	strb	r3, [r7, #31]
 80018d0:	7ffb      	ldrb	r3, [r7, #31]
 80018d2:	2b07      	cmp	r3, #7
 80018d4:	d9eb      	bls.n	80018ae <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018de:	b29a      	uxth	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f042 0208 	orr.w	r2, r2, #8
 80018e8:	b292      	uxth	r2, r2
 80018ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001900:	b292      	uxth	r2, r2
 8001902:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800190e:	b29a      	uxth	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f042 0204 	orr.w	r2, r2, #4
 8001918:	b292      	uxth	r2, r2
 800191a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f005 fc7c 	bl	800721c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f003 fdd3 	bl	80054d4 <USB_ReadInterrupts>
 800192e:	4603      	mov	r3, r0
 8001930:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001938:	d10e      	bne.n	8001958 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001942:	b29a      	uxth	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800194c:	b292      	uxth	r2, r2
 800194e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f005 fc35 	bl	80071c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f003 fdb9 	bl	80054d4 <USB_ReadInterrupts>
 8001962:	4603      	mov	r3, r0
 8001964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800196c:	d10b      	bne.n	8001986 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001976:	b29a      	uxth	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001980:	b292      	uxth	r2, r2
 8001982:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001986:	bf00      	nop
 8001988:	3720      	adds	r7, #32
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	460b      	mov	r3, r1
 8001998:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d101      	bne.n	80019a8 <HAL_PCD_SetAddress+0x1a>
 80019a4:	2302      	movs	r3, #2
 80019a6:	e013      	b.n	80019d0 <HAL_PCD_SetAddress+0x42>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	78fa      	ldrb	r2, [r7, #3]
 80019b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	78fa      	ldrb	r2, [r7, #3]
 80019be:	4611      	mov	r1, r2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f003 fd60 	bl	8005486 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	4608      	mov	r0, r1
 80019e2:	4611      	mov	r1, r2
 80019e4:	461a      	mov	r2, r3
 80019e6:	4603      	mov	r3, r0
 80019e8:	70fb      	strb	r3, [r7, #3]
 80019ea:	460b      	mov	r3, r1
 80019ec:	803b      	strh	r3, [r7, #0]
 80019ee:	4613      	mov	r3, r2
 80019f0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	da0e      	bge.n	8001a1c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019fe:	78fb      	ldrb	r3, [r7, #3]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	1c5a      	adds	r2, r3, #1
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2201      	movs	r2, #1
 8001a18:	705a      	strb	r2, [r3, #1]
 8001a1a:	e00e      	b.n	8001a3a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	f003 0207 	and.w	r2, r3, #7
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2200      	movs	r2, #0
 8001a38:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a3a:	78fb      	ldrb	r3, [r7, #3]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a46:	883a      	ldrh	r2, [r7, #0]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	78ba      	ldrb	r2, [r7, #2]
 8001a50:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	785b      	ldrb	r3, [r3, #1]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d004      	beq.n	8001a64 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a64:	78bb      	ldrb	r3, [r7, #2]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d102      	bne.n	8001a70 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d101      	bne.n	8001a7e <HAL_PCD_EP_Open+0xa6>
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	e00e      	b.n	8001a9c <HAL_PCD_EP_Open+0xc4>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68f9      	ldr	r1, [r7, #12]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f001 fd87 	bl	80035a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001a9a:	7afb      	ldrb	r3, [r7, #11]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ab0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	da0e      	bge.n	8001ad6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ab8:	78fb      	ldrb	r3, [r7, #3]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	4413      	add	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	705a      	strb	r2, [r3, #1]
 8001ad4:	e00e      	b.n	8001af4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ad6:	78fb      	ldrb	r3, [r7, #3]
 8001ad8:	f003 0207 	and.w	r2, r3, #7
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	4413      	add	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001af4:	78fb      	ldrb	r3, [r7, #3]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d101      	bne.n	8001b0e <HAL_PCD_EP_Close+0x6a>
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	e00e      	b.n	8001b2c <HAL_PCD_EP_Close+0x88>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68f9      	ldr	r1, [r7, #12]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f002 f8a9 	bl	8003c74 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	607a      	str	r2, [r7, #4]
 8001b3e:	603b      	str	r3, [r7, #0]
 8001b40:	460b      	mov	r3, r1
 8001b42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b44:	7afb      	ldrb	r3, [r7, #11]
 8001b46:	f003 0207 	and.w	r2, r3, #7
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	4413      	add	r3, r2
 8001b5a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	2200      	movs	r2, #0
 8001b72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b74:	7afb      	ldrb	r3, [r7, #11]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b80:	7afb      	ldrb	r3, [r7, #11]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d106      	bne.n	8001b98 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6979      	ldr	r1, [r7, #20]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f002 fa5b 	bl	800404c <USB_EPStartXfer>
 8001b96:	e005      	b.n	8001ba4 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6979      	ldr	r1, [r7, #20]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f002 fa54 	bl	800404c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	f003 0207 	and.w	r2, r3, #7
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	440b      	add	r3, r1
 8001bcc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001bd0:	681b      	ldr	r3, [r3, #0]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr

08001bdc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	607a      	str	r2, [r7, #4]
 8001be6:	603b      	str	r3, [r7, #0]
 8001be8:	460b      	mov	r3, r1
 8001bea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bec:	7afb      	ldrb	r3, [r7, #11]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	1c5a      	adds	r2, r3, #1
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	4413      	add	r3, r2
 8001c00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	2201      	movs	r2, #1
 8001c26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c28:	7afb      	ldrb	r3, [r7, #11]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c34:	7afb      	ldrb	r3, [r7, #11]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d106      	bne.n	8001c4c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6979      	ldr	r1, [r7, #20]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f002 fa01 	bl	800404c <USB_EPStartXfer>
 8001c4a:	e005      	b.n	8001c58 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6979      	ldr	r1, [r7, #20]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f002 f9fa 	bl	800404c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b084      	sub	sp, #16
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c6e:	78fb      	ldrb	r3, [r7, #3]
 8001c70:	f003 0207 	and.w	r2, r3, #7
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d901      	bls.n	8001c80 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e04c      	b.n	8001d1a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	da0e      	bge.n	8001ca6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	1c5a      	adds	r2, r3, #1
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	705a      	strb	r2, [r3, #1]
 8001ca4:	e00c      	b.n	8001cc0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ca6:	78fa      	ldrb	r2, [r7, #3]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cc6:	78fb      	ldrb	r3, [r7, #3]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <HAL_PCD_EP_SetStall+0x7e>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e01c      	b.n	8001d1a <HAL_PCD_EP_SetStall+0xb8>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68f9      	ldr	r1, [r7, #12]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f003 facc 	bl	800528c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cf4:	78fb      	ldrb	r3, [r7, #3]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d108      	bne.n	8001d10 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	f003 fbf1 	bl	80054f2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b084      	sub	sp, #16
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d2e:	78fb      	ldrb	r3, [r7, #3]
 8001d30:	f003 020f 	and.w	r2, r3, #15
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d901      	bls.n	8001d40 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e040      	b.n	8001dc2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	da0e      	bge.n	8001d66 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	1c5a      	adds	r2, r3, #1
 8001d50:	4613      	mov	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2201      	movs	r2, #1
 8001d62:	705a      	strb	r2, [r3, #1]
 8001d64:	e00e      	b.n	8001d84 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d66:	78fb      	ldrb	r3, [r7, #3]
 8001d68:	f003 0207 	and.w	r2, r3, #7
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d8a:	78fb      	ldrb	r3, [r7, #3]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d101      	bne.n	8001da4 <HAL_PCD_EP_ClrStall+0x82>
 8001da0:	2302      	movs	r3, #2
 8001da2:	e00e      	b.n	8001dc2 <HAL_PCD_EP_ClrStall+0xa0>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68f9      	ldr	r1, [r7, #12]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f003 faba 	bl	800532c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b08e      	sub	sp, #56	; 0x38
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001dd2:	e2df      	b.n	8002394 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ddc:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001dde:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001dea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f040 8158 	bne.w	80020a4 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001df4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001df6:	f003 0310 	and.w	r3, r3, #16
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d152      	bne.n	8001ea4 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e0e:	81fb      	strh	r3, [r7, #14]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	89fb      	ldrh	r3, [r7, #14]
 8001e16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3328      	adds	r3, #40	; 0x28
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	461a      	mov	r2, r3
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	4413      	add	r3, r2
 8001e3c:	3302      	adds	r3, #2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	4413      	add	r3, r2
 8001e46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e4a:	881b      	ldrh	r3, [r3, #0]
 8001e4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	695a      	ldr	r2, [r3, #20]
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	441a      	add	r2, r3
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001e62:	2100      	movs	r1, #0
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f005 f992 	bl	800718e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 828e 	beq.w	8002394 <PCD_EP_ISR_Handler+0x5ca>
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f040 8289 	bne.w	8002394 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	b292      	uxth	r2, r2
 8001e96:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ea2:	e277      	b.n	8002394 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001eb4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001eb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d034      	beq.n	8001f28 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	461a      	mov	r2, r3
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3306      	adds	r3, #6
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6812      	ldr	r2, [r2, #0]
 8001eda:	4413      	add	r3, r2
 8001edc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6818      	ldr	r0, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	f003 fb47 	bl	8005590 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f0e:	4013      	ands	r3, r2
 8001f10:	823b      	strh	r3, [r7, #16]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	8a3a      	ldrh	r2, [r7, #16]
 8001f18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f1c:	b292      	uxth	r2, r2
 8001f1e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f005 f907 	bl	8007134 <HAL_PCD_SetupStageCallback>
 8001f26:	e235      	b.n	8002394 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f28:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f280 8231 	bge.w	8002394 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f3e:	4013      	ands	r3, r2
 8001f40:	83bb      	strh	r3, [r7, #28]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	8bba      	ldrh	r2, [r7, #28]
 8001f48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f4c:	b292      	uxth	r2, r2
 8001f4e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	4413      	add	r3, r2
 8001f64:	3306      	adds	r3, #6
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	6812      	ldr	r2, [r2, #0]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d019      	beq.n	8001fb8 <PCD_EP_ISR_Handler+0x1ee>
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d015      	beq.n	8001fb8 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6818      	ldr	r0, [r3, #0]
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	6959      	ldr	r1, [r3, #20]
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	f003 faf7 	bl	8005590 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	695a      	ldr	r2, [r3, #20]
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	441a      	add	r2, r3
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f005 f8d0 	bl	8007158 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	61bb      	str	r3, [r7, #24]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	4413      	add	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d112      	bne.n	8002006 <PCD_EP_ISR_Handler+0x23c>
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	801a      	strh	r2, [r3, #0]
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	801a      	strh	r2, [r3, #0]
 8002004:	e02f      	b.n	8002066 <PCD_EP_ISR_Handler+0x29c>
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	2b3e      	cmp	r3, #62	; 0x3e
 800200c:	d813      	bhi.n	8002036 <PCD_EP_ISR_Handler+0x26c>
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	085b      	lsrs	r3, r3, #1
 8002014:	633b      	str	r3, [r7, #48]	; 0x30
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d002      	beq.n	8002028 <PCD_EP_ISR_Handler+0x25e>
 8002022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002024:	3301      	adds	r3, #1
 8002026:	633b      	str	r3, [r7, #48]	; 0x30
 8002028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800202a:	b29b      	uxth	r3, r3
 800202c:	029b      	lsls	r3, r3, #10
 800202e:	b29a      	uxth	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	801a      	strh	r2, [r3, #0]
 8002034:	e017      	b.n	8002066 <PCD_EP_ISR_Handler+0x29c>
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	095b      	lsrs	r3, r3, #5
 800203c:	633b      	str	r3, [r7, #48]	; 0x30
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	f003 031f 	and.w	r3, r3, #31
 8002046:	2b00      	cmp	r3, #0
 8002048:	d102      	bne.n	8002050 <PCD_EP_ISR_Handler+0x286>
 800204a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800204c:	3b01      	subs	r3, #1
 800204e:	633b      	str	r3, [r7, #48]	; 0x30
 8002050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002052:	b29b      	uxth	r3, r3
 8002054:	029b      	lsls	r3, r3, #10
 8002056:	b29b      	uxth	r3, r3
 8002058:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800205c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002060:	b29a      	uxth	r2, r3
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	b29b      	uxth	r3, r3
 800206e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002076:	827b      	strh	r3, [r7, #18]
 8002078:	8a7b      	ldrh	r3, [r7, #18]
 800207a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800207e:	827b      	strh	r3, [r7, #18]
 8002080:	8a7b      	ldrh	r3, [r7, #18]
 8002082:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002086:	827b      	strh	r3, [r7, #18]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	8a7b      	ldrh	r3, [r7, #18]
 800208e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002092:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800209a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800209e:	b29b      	uxth	r3, r3
 80020a0:	8013      	strh	r3, [r2, #0]
 80020a2:	e177      	b.n	8002394 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80020b6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f280 80ea 	bge.w	8002294 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	461a      	mov	r2, r3
 80020c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80020d6:	4013      	ands	r3, r2
 80020d8:	853b      	strh	r3, [r7, #40]	; 0x28
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80020ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020ee:	b292      	uxth	r2, r2
 80020f0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80020f2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	7b1b      	ldrb	r3, [r3, #12]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d122      	bne.n	8002156 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002118:	b29b      	uxth	r3, r3
 800211a:	461a      	mov	r2, r3
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4413      	add	r3, r2
 8002124:	3306      	adds	r3, #6
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6812      	ldr	r2, [r2, #0]
 800212c:	4413      	add	r3, r2
 800212e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002138:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800213a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 8087 	beq.w	8002250 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6818      	ldr	r0, [r3, #0]
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	6959      	ldr	r1, [r3, #20]
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	88da      	ldrh	r2, [r3, #6]
 800214e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002150:	f003 fa1e 	bl	8005590 <USB_ReadPMA>
 8002154:	e07c      	b.n	8002250 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	78db      	ldrb	r3, [r3, #3]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d108      	bne.n	8002170 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800215e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002160:	461a      	mov	r2, r3
 8002162:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f923 	bl	80023b0 <HAL_PCD_EP_DB_Receive>
 800216a:	4603      	mov	r3, r0
 800216c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800216e:	e06f      	b.n	8002250 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	b29b      	uxth	r3, r3
 8002182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800218a:	847b      	strh	r3, [r7, #34]	; 0x22
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	461a      	mov	r2, r3
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	441a      	add	r2, r3
 800219a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800219c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	461a      	mov	r2, r3
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d021      	beq.n	800220e <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	461a      	mov	r2, r3
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4413      	add	r3, r2
 80021de:	3302      	adds	r3, #2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6812      	ldr	r2, [r2, #0]
 80021e6:	4413      	add	r3, r2
 80021e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021f2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80021f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d02a      	beq.n	8002250 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	6959      	ldr	r1, [r3, #20]
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	891a      	ldrh	r2, [r3, #8]
 8002206:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002208:	f003 f9c2 	bl	8005590 <USB_ReadPMA>
 800220c:	e020      	b.n	8002250 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002216:	b29b      	uxth	r3, r3
 8002218:	461a      	mov	r2, r3
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	4413      	add	r3, r2
 8002222:	3306      	adds	r3, #6
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6812      	ldr	r2, [r2, #0]
 800222a:	4413      	add	r3, r2
 800222c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002236:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002238:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800223a:	2b00      	cmp	r3, #0
 800223c:	d008      	beq.n	8002250 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6818      	ldr	r0, [r3, #0]
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	6959      	ldr	r1, [r3, #20]
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	895a      	ldrh	r2, [r3, #10]
 800224a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800224c:	f003 f9a0 	bl	8005590 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	69da      	ldr	r2, [r3, #28]
 8002254:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002256:	441a      	add	r2, r3
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	695a      	ldr	r2, [r3, #20]
 8002260:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002262:	441a      	add	r2, r3
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d004      	beq.n	800227a <PCD_EP_ISR_Handler+0x4b0>
 8002270:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	429a      	cmp	r2, r3
 8002278:	d206      	bcs.n	8002288 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	4619      	mov	r1, r3
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f004 ff69 	bl	8007158 <HAL_PCD_DataOutStageCallback>
 8002286:	e005      	b.n	8002294 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800228e:	4618      	mov	r0, r3
 8002290:	f001 fedc 	bl	800404c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002294:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800229a:	2b00      	cmp	r3, #0
 800229c:	d07a      	beq.n	8002394 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 800229e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	4613      	mov	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	4413      	add	r3, r2
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	461a      	mov	r2, r3
 80022b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80022c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022cc:	843b      	strh	r3, [r7, #32]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	441a      	add	r2, r3
 80022dc:	8c3b      	ldrh	r3, [r7, #32]
 80022de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	78db      	ldrb	r3, [r3, #3]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d108      	bne.n	8002304 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d146      	bne.n	8002388 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80022fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002300:	2b00      	cmp	r3, #0
 8002302:	d141      	bne.n	8002388 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800230c:	b29b      	uxth	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4413      	add	r3, r2
 8002318:	3302      	adds	r3, #2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	4413      	add	r3, r2
 8002322:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800232c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	699a      	ldr	r2, [r3, #24]
 8002332:	8bfb      	ldrh	r3, [r7, #30]
 8002334:	429a      	cmp	r2, r3
 8002336:	d906      	bls.n	8002346 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	699a      	ldr	r2, [r3, #24]
 800233c:	8bfb      	ldrh	r3, [r7, #30]
 800233e:	1ad2      	subs	r2, r2, r3
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	619a      	str	r2, [r3, #24]
 8002344:	e002      	b.n	800234c <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	2200      	movs	r2, #0
 800234a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d106      	bne.n	8002362 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	4619      	mov	r1, r3
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f004 ff17 	bl	800718e <HAL_PCD_DataInStageCallback>
 8002360:	e018      	b.n	8002394 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	8bfb      	ldrh	r3, [r7, #30]
 8002368:	441a      	add	r2, r3
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	69da      	ldr	r2, [r3, #28]
 8002372:	8bfb      	ldrh	r3, [r7, #30]
 8002374:	441a      	add	r2, r3
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002380:	4618      	mov	r0, r3
 8002382:	f001 fe63 	bl	800404c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002386:	e005      	b.n	8002394 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002388:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800238a:	461a      	mov	r2, r3
 800238c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f91b 	bl	80025ca <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800239c:	b29b      	uxth	r3, r3
 800239e:	b21b      	sxth	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f6ff ad17 	blt.w	8001dd4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3738      	adds	r7, #56	; 0x38
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	4613      	mov	r3, r2
 80023bc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023be:	88fb      	ldrh	r3, [r7, #6]
 80023c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d07e      	beq.n	80024c6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	461a      	mov	r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4413      	add	r3, r2
 80023dc:	3302      	adds	r3, #2
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	6812      	ldr	r2, [r2, #0]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023f0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	699a      	ldr	r2, [r3, #24]
 80023f6:	8b7b      	ldrh	r3, [r7, #26]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d306      	bcc.n	800240a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	699a      	ldr	r2, [r3, #24]
 8002400:	8b7b      	ldrh	r3, [r7, #26]
 8002402:	1ad2      	subs	r2, r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	619a      	str	r2, [r3, #24]
 8002408:	e002      	b.n	8002410 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2200      	movs	r2, #0
 800240e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d123      	bne.n	8002460 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	461a      	mov	r2, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	881b      	ldrh	r3, [r3, #0]
 8002428:	b29b      	uxth	r3, r3
 800242a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800242e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002432:	833b      	strh	r3, [r7, #24]
 8002434:	8b3b      	ldrh	r3, [r7, #24]
 8002436:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800243a:	833b      	strh	r3, [r7, #24]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	461a      	mov	r2, r3
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	441a      	add	r2, r3
 800244a:	8b3b      	ldrh	r3, [r7, #24]
 800244c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002450:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800245c:	b29b      	uxth	r3, r3
 800245e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002460:	88fb      	ldrh	r3, [r7, #6]
 8002462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002466:	2b00      	cmp	r3, #0
 8002468:	d01f      	beq.n	80024aa <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	461a      	mov	r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	b29b      	uxth	r3, r3
 800247c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002484:	82fb      	strh	r3, [r7, #22]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	441a      	add	r2, r3
 8002494:	8afb      	ldrh	r3, [r7, #22]
 8002496:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800249a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800249e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80024aa:	8b7b      	ldrh	r3, [r7, #26]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 8087 	beq.w	80025c0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6818      	ldr	r0, [r3, #0]
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	6959      	ldr	r1, [r3, #20]
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	891a      	ldrh	r2, [r3, #8]
 80024be:	8b7b      	ldrh	r3, [r7, #26]
 80024c0:	f003 f866 	bl	8005590 <USB_ReadPMA>
 80024c4:	e07c      	b.n	80025c0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	461a      	mov	r2, r3
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4413      	add	r3, r2
 80024da:	3306      	adds	r3, #6
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	6812      	ldr	r2, [r2, #0]
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024ee:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	699a      	ldr	r2, [r3, #24]
 80024f4:	8b7b      	ldrh	r3, [r7, #26]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d306      	bcc.n	8002508 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	699a      	ldr	r2, [r3, #24]
 80024fe:	8b7b      	ldrh	r3, [r7, #26]
 8002500:	1ad2      	subs	r2, r2, r3
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	619a      	str	r2, [r3, #24]
 8002506:	e002      	b.n	800250e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2200      	movs	r2, #0
 800250c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d123      	bne.n	800255e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	b29b      	uxth	r3, r3
 8002528:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800252c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002530:	83fb      	strh	r3, [r7, #30]
 8002532:	8bfb      	ldrh	r3, [r7, #30]
 8002534:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002538:	83fb      	strh	r3, [r7, #30]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	461a      	mov	r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	441a      	add	r2, r3
 8002548:	8bfb      	ldrh	r3, [r7, #30]
 800254a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800254e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800255a:	b29b      	uxth	r3, r3
 800255c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002564:	2b00      	cmp	r3, #0
 8002566:	d11f      	bne.n	80025a8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	461a      	mov	r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	b29b      	uxth	r3, r3
 800257a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800257e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002582:	83bb      	strh	r3, [r7, #28]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	441a      	add	r2, r3
 8002592:	8bbb      	ldrh	r3, [r7, #28]
 8002594:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002598:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800259c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80025a8:	8b7b      	ldrh	r3, [r7, #26]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d008      	beq.n	80025c0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6818      	ldr	r0, [r3, #0]
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	6959      	ldr	r1, [r3, #20]
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	895a      	ldrh	r2, [r3, #10]
 80025ba:	8b7b      	ldrh	r3, [r7, #26]
 80025bc:	f002 ffe8 	bl	8005590 <USB_ReadPMA>
    }
  }

  return count;
 80025c0:	8b7b      	ldrh	r3, [r7, #26]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3720      	adds	r7, #32
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b092      	sub	sp, #72	; 0x48
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	60f8      	str	r0, [r7, #12]
 80025d2:	60b9      	str	r1, [r7, #8]
 80025d4:	4613      	mov	r3, r2
 80025d6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 8132 	beq.w	8002848 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	461a      	mov	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	4413      	add	r3, r2
 80025f8:	3302      	adds	r3, #2
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	4413      	add	r3, r2
 8002602:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800260c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	699a      	ldr	r2, [r3, #24]
 8002612:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002614:	429a      	cmp	r2, r3
 8002616:	d906      	bls.n	8002626 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	699a      	ldr	r2, [r3, #24]
 800261c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800261e:	1ad2      	subs	r2, r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	619a      	str	r2, [r3, #24]
 8002624:	e002      	b.n	800262c <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2200      	movs	r2, #0
 800262a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d12c      	bne.n	800268e <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	4619      	mov	r1, r3
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f004 fda7 	bl	800718e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002640:	88fb      	ldrh	r3, [r7, #6]
 8002642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 822f 	beq.w	8002aaa <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	461a      	mov	r2, r3
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	b29b      	uxth	r3, r3
 800265e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002666:	827b      	strh	r3, [r7, #18]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	461a      	mov	r2, r3
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	441a      	add	r2, r3
 8002676:	8a7b      	ldrh	r3, [r7, #18]
 8002678:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800267c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002680:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002688:	b29b      	uxth	r3, r3
 800268a:	8013      	strh	r3, [r2, #0]
 800268c:	e20d      	b.n	8002aaa <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800268e:	88fb      	ldrh	r3, [r7, #6]
 8002690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d01f      	beq.n	80026d8 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	461a      	mov	r2, r3
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	441a      	add	r2, r3
 80026c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026de:	2b01      	cmp	r3, #1
 80026e0:	f040 81e3 	bne.w	8002aaa <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	695a      	ldr	r2, [r3, #20]
 80026e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80026ea:	441a      	add	r2, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	69da      	ldr	r2, [r3, #28]
 80026f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80026f6:	441a      	add	r2, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	6a1a      	ldr	r2, [r3, #32]
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	429a      	cmp	r2, r3
 8002706:	d309      	bcc.n	800271c <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	6a1a      	ldr	r2, [r3, #32]
 8002712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002714:	1ad2      	subs	r2, r2, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	621a      	str	r2, [r3, #32]
 800271a:	e014      	b.n	8002746 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d106      	bne.n	8002732 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8002724:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002726:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002730:	e009      	b.n	8002746 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2200      	movs	r2, #0
 8002744:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	785b      	ldrb	r3, [r3, #1]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d155      	bne.n	80027fa <HAL_PCD_EP_DB_Transmit+0x230>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	61bb      	str	r3, [r7, #24]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800275c:	b29b      	uxth	r3, r3
 800275e:	461a      	mov	r2, r3
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	4413      	add	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	011a      	lsls	r2, r3, #4
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	4413      	add	r3, r2
 8002770:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002778:	2b00      	cmp	r3, #0
 800277a:	d112      	bne.n	80027a2 <HAL_PCD_EP_DB_Transmit+0x1d8>
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	b29b      	uxth	r3, r3
 8002782:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002786:	b29a      	uxth	r2, r3
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	801a      	strh	r2, [r3, #0]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	b29b      	uxth	r3, r3
 8002792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800279a:	b29a      	uxth	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	801a      	strh	r2, [r3, #0]
 80027a0:	e047      	b.n	8002832 <HAL_PCD_EP_DB_Transmit+0x268>
 80027a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a4:	2b3e      	cmp	r3, #62	; 0x3e
 80027a6:	d811      	bhi.n	80027cc <HAL_PCD_EP_DB_Transmit+0x202>
 80027a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027aa:	085b      	lsrs	r3, r3, #1
 80027ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d002      	beq.n	80027be <HAL_PCD_EP_DB_Transmit+0x1f4>
 80027b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ba:	3301      	adds	r3, #1
 80027bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80027be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	029b      	lsls	r3, r3, #10
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	801a      	strh	r2, [r3, #0]
 80027ca:	e032      	b.n	8002832 <HAL_PCD_EP_DB_Transmit+0x268>
 80027cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ce:	095b      	lsrs	r3, r3, #5
 80027d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80027d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d4:	f003 031f 	and.w	r3, r3, #31
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d102      	bne.n	80027e2 <HAL_PCD_EP_DB_Transmit+0x218>
 80027dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027de:	3b01      	subs	r3, #1
 80027e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80027e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	029b      	lsls	r3, r3, #10
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	801a      	strh	r2, [r3, #0]
 80027f8:	e01b      	b.n	8002832 <HAL_PCD_EP_DB_Transmit+0x268>
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	785b      	ldrb	r3, [r3, #1]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d117      	bne.n	8002832 <HAL_PCD_EP_DB_Transmit+0x268>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	623b      	str	r3, [r7, #32]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002810:	b29b      	uxth	r3, r3
 8002812:	461a      	mov	r2, r3
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	4413      	add	r3, r2
 8002818:	623b      	str	r3, [r7, #32]
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	011a      	lsls	r2, r3, #4
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	4413      	add	r3, r2
 8002824:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002828:	61fb      	str	r3, [r7, #28]
 800282a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800282c:	b29a      	uxth	r2, r3
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6818      	ldr	r0, [r3, #0]
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	6959      	ldr	r1, [r3, #20]
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	891a      	ldrh	r2, [r3, #8]
 800283e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002840:	b29b      	uxth	r3, r3
 8002842:	f002 fe61 	bl	8005508 <USB_WritePMA>
 8002846:	e130      	b.n	8002aaa <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002850:	b29b      	uxth	r3, r3
 8002852:	461a      	mov	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4413      	add	r3, r2
 800285c:	3306      	adds	r3, #6
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	4413      	add	r3, r2
 8002866:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800286a:	881b      	ldrh	r3, [r3, #0]
 800286c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002870:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	699a      	ldr	r2, [r3, #24]
 8002876:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002878:	429a      	cmp	r2, r3
 800287a:	d306      	bcc.n	800288a <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	699a      	ldr	r2, [r3, #24]
 8002880:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002882:	1ad2      	subs	r2, r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	619a      	str	r2, [r3, #24]
 8002888:	e002      	b.n	8002890 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2200      	movs	r2, #0
 800288e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d12c      	bne.n	80028f2 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	4619      	mov	r1, r3
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f004 fc75 	bl	800718e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028a4:	88fb      	ldrh	r3, [r7, #6]
 80028a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f040 80fd 	bne.w	8002aaa <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	461a      	mov	r2, r3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ca:	84fb      	strh	r3, [r7, #38]	; 0x26
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	461a      	mov	r2, r3
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	441a      	add	r2, r3
 80028da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80028dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	8013      	strh	r3, [r2, #0]
 80028f0:	e0db      	b.n	8002aaa <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028f2:	88fb      	ldrh	r3, [r7, #6]
 80028f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d11f      	bne.n	800293c <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	b29b      	uxth	r3, r3
 800290e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002916:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	461a      	mov	r2, r3
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	441a      	add	r2, r3
 8002926:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002928:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800292c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002930:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002938:	b29b      	uxth	r3, r3
 800293a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002942:	2b01      	cmp	r3, #1
 8002944:	f040 80b1 	bne.w	8002aaa <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	695a      	ldr	r2, [r3, #20]
 800294c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800294e:	441a      	add	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	69da      	ldr	r2, [r3, #28]
 8002958:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800295a:	441a      	add	r2, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	6a1a      	ldr	r2, [r3, #32]
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	429a      	cmp	r2, r3
 800296a:	d309      	bcc.n	8002980 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	6a1a      	ldr	r2, [r3, #32]
 8002976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002978:	1ad2      	subs	r2, r2, r3
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	621a      	str	r2, [r3, #32]
 800297e:	e014      	b.n	80029aa <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d106      	bne.n	8002996 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002988:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800298a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002994:	e009      	b.n	80029aa <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2200      	movs	r2, #0
 80029a0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	637b      	str	r3, [r7, #52]	; 0x34
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	785b      	ldrb	r3, [r3, #1]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d155      	bne.n	8002a64 <HAL_PCD_EP_DB_Transmit+0x49a>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	647b      	str	r3, [r7, #68]	; 0x44
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	461a      	mov	r2, r3
 80029ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029cc:	4413      	add	r3, r2
 80029ce:	647b      	str	r3, [r7, #68]	; 0x44
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	011a      	lsls	r2, r3, #4
 80029d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029d8:	4413      	add	r3, r2
 80029da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029de:	643b      	str	r3, [r7, #64]	; 0x40
 80029e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d112      	bne.n	8002a0c <HAL_PCD_EP_DB_Transmit+0x442>
 80029e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029f4:	801a      	strh	r2, [r3, #0]
 80029f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029f8:	881b      	ldrh	r3, [r3, #0]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a08:	801a      	strh	r2, [r3, #0]
 8002a0a:	e044      	b.n	8002a96 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0e:	2b3e      	cmp	r3, #62	; 0x3e
 8002a10:	d811      	bhi.n	8002a36 <HAL_PCD_EP_DB_Transmit+0x46c>
 8002a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a14:	085b      	lsrs	r3, r3, #1
 8002a16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <HAL_PCD_EP_DB_Transmit+0x45e>
 8002a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a24:	3301      	adds	r3, #1
 8002a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	029b      	lsls	r3, r3, #10
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a32:	801a      	strh	r2, [r3, #0]
 8002a34:	e02f      	b.n	8002a96 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a38:	095b      	lsrs	r3, r3, #5
 8002a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3e:	f003 031f 	and.w	r3, r3, #31
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d102      	bne.n	8002a4c <HAL_PCD_EP_DB_Transmit+0x482>
 8002a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	029b      	lsls	r3, r3, #10
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a60:	801a      	strh	r2, [r3, #0]
 8002a62:	e018      	b.n	8002a96 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	785b      	ldrb	r3, [r3, #1]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d114      	bne.n	8002a96 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	461a      	mov	r2, r3
 8002a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7a:	4413      	add	r3, r2
 8002a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	011a      	lsls	r2, r3, #4
 8002a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a86:	4413      	add	r3, r2
 8002a88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a8c:	633b      	str	r3, [r7, #48]	; 0x30
 8002a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6818      	ldr	r0, [r3, #0]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	6959      	ldr	r1, [r3, #20]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	895a      	ldrh	r2, [r3, #10]
 8002aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	f002 fd2f 	bl	8005508 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ac0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ac4:	823b      	strh	r3, [r7, #16]
 8002ac6:	8a3b      	ldrh	r3, [r7, #16]
 8002ac8:	f083 0310 	eor.w	r3, r3, #16
 8002acc:	823b      	strh	r3, [r7, #16]
 8002ace:	8a3b      	ldrh	r3, [r7, #16]
 8002ad0:	f083 0320 	eor.w	r3, r3, #32
 8002ad4:	823b      	strh	r3, [r7, #16]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	441a      	add	r2, r3
 8002ae4:	8a3b      	ldrh	r3, [r7, #16]
 8002ae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002aea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3748      	adds	r7, #72	; 0x48
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b087      	sub	sp, #28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	607b      	str	r3, [r7, #4]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	817b      	strh	r3, [r7, #10]
 8002b12:	4613      	mov	r3, r2
 8002b14:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b16:	897b      	ldrh	r3, [r7, #10]
 8002b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00b      	beq.n	8002b3a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b22:	897b      	ldrh	r3, [r7, #10]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	1c5a      	adds	r2, r3, #1
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4413      	add	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	e009      	b.n	8002b4e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b3a:	897a      	ldrh	r2, [r7, #10]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002b4e:	893b      	ldrh	r3, [r7, #8]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d107      	bne.n	8002b64 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2200      	movs	r2, #0
 8002b58:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	80da      	strh	r2, [r3, #6]
 8002b62:	e00b      	b.n	8002b7c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2201      	movs	r2, #1
 8002b68:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	0c1b      	lsrs	r3, r3, #16
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	371c      	adds	r7, #28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr

08002b88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e26c      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 8087 	beq.w	8002cb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ba8:	4b92      	ldr	r3, [pc, #584]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 030c 	and.w	r3, r3, #12
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d00c      	beq.n	8002bce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bb4:	4b8f      	ldr	r3, [pc, #572]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 030c 	and.w	r3, r3, #12
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d112      	bne.n	8002be6 <HAL_RCC_OscConfig+0x5e>
 8002bc0:	4b8c      	ldr	r3, [pc, #560]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bcc:	d10b      	bne.n	8002be6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bce:	4b89      	ldr	r3, [pc, #548]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d06c      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x12c>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d168      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e246      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bee:	d106      	bne.n	8002bfe <HAL_RCC_OscConfig+0x76>
 8002bf0:	4b80      	ldr	r3, [pc, #512]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a7f      	ldr	r2, [pc, #508]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfa:	6013      	str	r3, [r2, #0]
 8002bfc:	e02e      	b.n	8002c5c <HAL_RCC_OscConfig+0xd4>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10c      	bne.n	8002c20 <HAL_RCC_OscConfig+0x98>
 8002c06:	4b7b      	ldr	r3, [pc, #492]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a7a      	ldr	r2, [pc, #488]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	4b78      	ldr	r3, [pc, #480]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a77      	ldr	r2, [pc, #476]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	e01d      	b.n	8002c5c <HAL_RCC_OscConfig+0xd4>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c28:	d10c      	bne.n	8002c44 <HAL_RCC_OscConfig+0xbc>
 8002c2a:	4b72      	ldr	r3, [pc, #456]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a71      	ldr	r2, [pc, #452]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	4b6f      	ldr	r3, [pc, #444]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a6e      	ldr	r2, [pc, #440]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e00b      	b.n	8002c5c <HAL_RCC_OscConfig+0xd4>
 8002c44:	4b6b      	ldr	r3, [pc, #428]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a6a      	ldr	r2, [pc, #424]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c4e:	6013      	str	r3, [r2, #0]
 8002c50:	4b68      	ldr	r3, [pc, #416]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a67      	ldr	r2, [pc, #412]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d013      	beq.n	8002c8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c64:	f7fe f96a 	bl	8000f3c <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c6c:	f7fe f966 	bl	8000f3c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b64      	cmp	r3, #100	; 0x64
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e1fa      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7e:	4b5d      	ldr	r3, [pc, #372]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <HAL_RCC_OscConfig+0xe4>
 8002c8a:	e014      	b.n	8002cb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8c:	f7fe f956 	bl	8000f3c <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c94:	f7fe f952 	bl	8000f3c <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b64      	cmp	r3, #100	; 0x64
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e1e6      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca6:	4b53      	ldr	r3, [pc, #332]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0x10c>
 8002cb2:	e000      	b.n	8002cb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d063      	beq.n	8002d8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cc2:	4b4c      	ldr	r3, [pc, #304]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00b      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cce:	4b49      	ldr	r3, [pc, #292]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d11c      	bne.n	8002d14 <HAL_RCC_OscConfig+0x18c>
 8002cda:	4b46      	ldr	r3, [pc, #280]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d116      	bne.n	8002d14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce6:	4b43      	ldr	r3, [pc, #268]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d005      	beq.n	8002cfe <HAL_RCC_OscConfig+0x176>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d001      	beq.n	8002cfe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e1ba      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfe:	4b3d      	ldr	r3, [pc, #244]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	4939      	ldr	r1, [pc, #228]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d12:	e03a      	b.n	8002d8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d020      	beq.n	8002d5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d1c:	4b36      	ldr	r3, [pc, #216]	; (8002df8 <HAL_RCC_OscConfig+0x270>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d22:	f7fe f90b 	bl	8000f3c <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d2a:	f7fe f907 	bl	8000f3c <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e19b      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3c:	4b2d      	ldr	r3, [pc, #180]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0f0      	beq.n	8002d2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d48:	4b2a      	ldr	r3, [pc, #168]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	4927      	ldr	r1, [pc, #156]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	600b      	str	r3, [r1, #0]
 8002d5c:	e015      	b.n	8002d8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d5e:	4b26      	ldr	r3, [pc, #152]	; (8002df8 <HAL_RCC_OscConfig+0x270>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7fe f8ea 	bl	8000f3c <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d6c:	f7fe f8e6 	bl	8000f3c <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e17a      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7e:	4b1d      	ldr	r3, [pc, #116]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d03a      	beq.n	8002e0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d019      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d9e:	4b17      	ldr	r3, [pc, #92]	; (8002dfc <HAL_RCC_OscConfig+0x274>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da4:	f7fe f8ca 	bl	8000f3c <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dac:	f7fe f8c6 	bl	8000f3c <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e15a      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dbe:	4b0d      	ldr	r3, [pc, #52]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0f0      	beq.n	8002dac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dca:	2001      	movs	r0, #1
 8002dcc:	f000 faa8 	bl	8003320 <RCC_Delay>
 8002dd0:	e01c      	b.n	8002e0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd2:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <HAL_RCC_OscConfig+0x274>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd8:	f7fe f8b0 	bl	8000f3c <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dde:	e00f      	b.n	8002e00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de0:	f7fe f8ac 	bl	8000f3c <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d908      	bls.n	8002e00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e140      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>
 8002df2:	bf00      	nop
 8002df4:	40021000 	.word	0x40021000
 8002df8:	42420000 	.word	0x42420000
 8002dfc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e00:	4b9e      	ldr	r3, [pc, #632]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1e9      	bne.n	8002de0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 80a6 	beq.w	8002f66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1e:	4b97      	ldr	r3, [pc, #604]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10d      	bne.n	8002e46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e2a:	4b94      	ldr	r3, [pc, #592]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	4a93      	ldr	r2, [pc, #588]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e34:	61d3      	str	r3, [r2, #28]
 8002e36:	4b91      	ldr	r3, [pc, #580]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e42:	2301      	movs	r3, #1
 8002e44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e46:	4b8e      	ldr	r3, [pc, #568]	; (8003080 <HAL_RCC_OscConfig+0x4f8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d118      	bne.n	8002e84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e52:	4b8b      	ldr	r3, [pc, #556]	; (8003080 <HAL_RCC_OscConfig+0x4f8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a8a      	ldr	r2, [pc, #552]	; (8003080 <HAL_RCC_OscConfig+0x4f8>)
 8002e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e5e:	f7fe f86d 	bl	8000f3c <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e66:	f7fe f869 	bl	8000f3c <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b64      	cmp	r3, #100	; 0x64
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e0fd      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e78:	4b81      	ldr	r3, [pc, #516]	; (8003080 <HAL_RCC_OscConfig+0x4f8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d106      	bne.n	8002e9a <HAL_RCC_OscConfig+0x312>
 8002e8c:	4b7b      	ldr	r3, [pc, #492]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	4a7a      	ldr	r2, [pc, #488]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002e92:	f043 0301 	orr.w	r3, r3, #1
 8002e96:	6213      	str	r3, [r2, #32]
 8002e98:	e02d      	b.n	8002ef6 <HAL_RCC_OscConfig+0x36e>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10c      	bne.n	8002ebc <HAL_RCC_OscConfig+0x334>
 8002ea2:	4b76      	ldr	r3, [pc, #472]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	4a75      	ldr	r2, [pc, #468]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002ea8:	f023 0301 	bic.w	r3, r3, #1
 8002eac:	6213      	str	r3, [r2, #32]
 8002eae:	4b73      	ldr	r3, [pc, #460]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	4a72      	ldr	r2, [pc, #456]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002eb4:	f023 0304 	bic.w	r3, r3, #4
 8002eb8:	6213      	str	r3, [r2, #32]
 8002eba:	e01c      	b.n	8002ef6 <HAL_RCC_OscConfig+0x36e>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	2b05      	cmp	r3, #5
 8002ec2:	d10c      	bne.n	8002ede <HAL_RCC_OscConfig+0x356>
 8002ec4:	4b6d      	ldr	r3, [pc, #436]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	4a6c      	ldr	r2, [pc, #432]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002eca:	f043 0304 	orr.w	r3, r3, #4
 8002ece:	6213      	str	r3, [r2, #32]
 8002ed0:	4b6a      	ldr	r3, [pc, #424]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	4a69      	ldr	r2, [pc, #420]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	6213      	str	r3, [r2, #32]
 8002edc:	e00b      	b.n	8002ef6 <HAL_RCC_OscConfig+0x36e>
 8002ede:	4b67      	ldr	r3, [pc, #412]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	4a66      	ldr	r2, [pc, #408]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002ee4:	f023 0301 	bic.w	r3, r3, #1
 8002ee8:	6213      	str	r3, [r2, #32]
 8002eea:	4b64      	ldr	r3, [pc, #400]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	4a63      	ldr	r2, [pc, #396]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002ef0:	f023 0304 	bic.w	r3, r3, #4
 8002ef4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d015      	beq.n	8002f2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efe:	f7fe f81d 	bl	8000f3c <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f04:	e00a      	b.n	8002f1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f06:	f7fe f819 	bl	8000f3c <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e0ab      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1c:	4b57      	ldr	r3, [pc, #348]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0ee      	beq.n	8002f06 <HAL_RCC_OscConfig+0x37e>
 8002f28:	e014      	b.n	8002f54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2a:	f7fe f807 	bl	8000f3c <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f30:	e00a      	b.n	8002f48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f32:	f7fe f803 	bl	8000f3c <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e095      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f48:	4b4c      	ldr	r3, [pc, #304]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1ee      	bne.n	8002f32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f54:	7dfb      	ldrb	r3, [r7, #23]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d105      	bne.n	8002f66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f5a:	4b48      	ldr	r3, [pc, #288]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	4a47      	ldr	r2, [pc, #284]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002f60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 8081 	beq.w	8003072 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f70:	4b42      	ldr	r3, [pc, #264]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 030c 	and.w	r3, r3, #12
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d061      	beq.n	8003040 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d146      	bne.n	8003012 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f84:	4b3f      	ldr	r3, [pc, #252]	; (8003084 <HAL_RCC_OscConfig+0x4fc>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8a:	f7fd ffd7 	bl	8000f3c <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f92:	f7fd ffd3 	bl	8000f3c <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e067      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa4:	4b35      	ldr	r3, [pc, #212]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1f0      	bne.n	8002f92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb8:	d108      	bne.n	8002fcc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fba:	4b30      	ldr	r3, [pc, #192]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	492d      	ldr	r1, [pc, #180]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fcc:	4b2b      	ldr	r3, [pc, #172]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a19      	ldr	r1, [r3, #32]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	430b      	orrs	r3, r1
 8002fde:	4927      	ldr	r1, [pc, #156]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe4:	4b27      	ldr	r3, [pc, #156]	; (8003084 <HAL_RCC_OscConfig+0x4fc>)
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fea:	f7fd ffa7 	bl	8000f3c <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff2:	f7fd ffa3 	bl	8000f3c <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e037      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003004:	4b1d      	ldr	r3, [pc, #116]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0f0      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x46a>
 8003010:	e02f      	b.n	8003072 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003012:	4b1c      	ldr	r3, [pc, #112]	; (8003084 <HAL_RCC_OscConfig+0x4fc>)
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003018:	f7fd ff90 	bl	8000f3c <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003020:	f7fd ff8c 	bl	8000f3c <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e020      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003032:	4b12      	ldr	r3, [pc, #72]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f0      	bne.n	8003020 <HAL_RCC_OscConfig+0x498>
 800303e:	e018      	b.n	8003072 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e013      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800304c:	4b0b      	ldr	r3, [pc, #44]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	429a      	cmp	r2, r3
 800305e:	d106      	bne.n	800306e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306a:	429a      	cmp	r2, r3
 800306c:	d001      	beq.n	8003072 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40021000 	.word	0x40021000
 8003080:	40007000 	.word	0x40007000
 8003084:	42420060 	.word	0x42420060

08003088 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e0d0      	b.n	800323e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800309c:	4b6a      	ldr	r3, [pc, #424]	; (8003248 <HAL_RCC_ClockConfig+0x1c0>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d910      	bls.n	80030cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030aa:	4b67      	ldr	r3, [pc, #412]	; (8003248 <HAL_RCC_ClockConfig+0x1c0>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 0207 	bic.w	r2, r3, #7
 80030b2:	4965      	ldr	r1, [pc, #404]	; (8003248 <HAL_RCC_ClockConfig+0x1c0>)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	4b63      	ldr	r3, [pc, #396]	; (8003248 <HAL_RCC_ClockConfig+0x1c0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0b8      	b.n	800323e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d020      	beq.n	800311a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d005      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030e4:	4b59      	ldr	r3, [pc, #356]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	4a58      	ldr	r2, [pc, #352]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 80030ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030fc:	4b53      	ldr	r3, [pc, #332]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	4a52      	ldr	r2, [pc, #328]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 8003102:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003106:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003108:	4b50      	ldr	r3, [pc, #320]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	494d      	ldr	r1, [pc, #308]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 8003116:	4313      	orrs	r3, r2
 8003118:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d040      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d107      	bne.n	800313e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312e:	4b47      	ldr	r3, [pc, #284]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d115      	bne.n	8003166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e07f      	b.n	800323e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d107      	bne.n	8003156 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003146:	4b41      	ldr	r3, [pc, #260]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d109      	bne.n	8003166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e073      	b.n	800323e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003156:	4b3d      	ldr	r3, [pc, #244]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e06b      	b.n	800323e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003166:	4b39      	ldr	r3, [pc, #228]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f023 0203 	bic.w	r2, r3, #3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	4936      	ldr	r1, [pc, #216]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 8003174:	4313      	orrs	r3, r2
 8003176:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003178:	f7fd fee0 	bl	8000f3c <HAL_GetTick>
 800317c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317e:	e00a      	b.n	8003196 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003180:	f7fd fedc 	bl	8000f3c <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	f241 3288 	movw	r2, #5000	; 0x1388
 800318e:	4293      	cmp	r3, r2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e053      	b.n	800323e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003196:	4b2d      	ldr	r3, [pc, #180]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f003 020c 	and.w	r2, r3, #12
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d1eb      	bne.n	8003180 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031a8:	4b27      	ldr	r3, [pc, #156]	; (8003248 <HAL_RCC_ClockConfig+0x1c0>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d210      	bcs.n	80031d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b6:	4b24      	ldr	r3, [pc, #144]	; (8003248 <HAL_RCC_ClockConfig+0x1c0>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f023 0207 	bic.w	r2, r3, #7
 80031be:	4922      	ldr	r1, [pc, #136]	; (8003248 <HAL_RCC_ClockConfig+0x1c0>)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c6:	4b20      	ldr	r3, [pc, #128]	; (8003248 <HAL_RCC_ClockConfig+0x1c0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d001      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e032      	b.n	800323e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d008      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e4:	4b19      	ldr	r3, [pc, #100]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	4916      	ldr	r1, [pc, #88]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d009      	beq.n	8003216 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003202:	4b12      	ldr	r3, [pc, #72]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	490e      	ldr	r1, [pc, #56]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 8003212:	4313      	orrs	r3, r2
 8003214:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003216:	f000 f821 	bl	800325c <HAL_RCC_GetSysClockFreq>
 800321a:	4601      	mov	r1, r0
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	091b      	lsrs	r3, r3, #4
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	4a0a      	ldr	r2, [pc, #40]	; (8003250 <HAL_RCC_ClockConfig+0x1c8>)
 8003228:	5cd3      	ldrb	r3, [r2, r3]
 800322a:	fa21 f303 	lsr.w	r3, r1, r3
 800322e:	4a09      	ldr	r2, [pc, #36]	; (8003254 <HAL_RCC_ClockConfig+0x1cc>)
 8003230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003232:	4b09      	ldr	r3, [pc, #36]	; (8003258 <HAL_RCC_ClockConfig+0x1d0>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7fd fe3e 	bl	8000eb8 <HAL_InitTick>

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40022000 	.word	0x40022000
 800324c:	40021000 	.word	0x40021000
 8003250:	08007ae4 	.word	0x08007ae4
 8003254:	20000004 	.word	0x20000004
 8003258:	20000008 	.word	0x20000008

0800325c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800325c:	b490      	push	{r4, r7}
 800325e:	b08a      	sub	sp, #40	; 0x28
 8003260:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003262:	4b2a      	ldr	r3, [pc, #168]	; (800330c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003264:	1d3c      	adds	r4, r7, #4
 8003266:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003268:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800326c:	4b28      	ldr	r3, [pc, #160]	; (8003310 <HAL_RCC_GetSysClockFreq+0xb4>)
 800326e:	881b      	ldrh	r3, [r3, #0]
 8003270:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003272:	2300      	movs	r3, #0
 8003274:	61fb      	str	r3, [r7, #28]
 8003276:	2300      	movs	r3, #0
 8003278:	61bb      	str	r3, [r7, #24]
 800327a:	2300      	movs	r3, #0
 800327c:	627b      	str	r3, [r7, #36]	; 0x24
 800327e:	2300      	movs	r3, #0
 8003280:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003286:	4b23      	ldr	r3, [pc, #140]	; (8003314 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f003 030c 	and.w	r3, r3, #12
 8003292:	2b04      	cmp	r3, #4
 8003294:	d002      	beq.n	800329c <HAL_RCC_GetSysClockFreq+0x40>
 8003296:	2b08      	cmp	r3, #8
 8003298:	d003      	beq.n	80032a2 <HAL_RCC_GetSysClockFreq+0x46>
 800329a:	e02d      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800329c:	4b1e      	ldr	r3, [pc, #120]	; (8003318 <HAL_RCC_GetSysClockFreq+0xbc>)
 800329e:	623b      	str	r3, [r7, #32]
      break;
 80032a0:	e02d      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	0c9b      	lsrs	r3, r3, #18
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032ae:	4413      	add	r3, r2
 80032b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d013      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032c0:	4b14      	ldr	r3, [pc, #80]	; (8003314 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	0c5b      	lsrs	r3, r3, #17
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032ce:	4413      	add	r3, r2
 80032d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	4a0f      	ldr	r2, [pc, #60]	; (8003318 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032da:	fb02 f203 	mul.w	r2, r2, r3
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
 80032e6:	e004      	b.n	80032f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	4a0c      	ldr	r2, [pc, #48]	; (800331c <HAL_RCC_GetSysClockFreq+0xc0>)
 80032ec:	fb02 f303 	mul.w	r3, r2, r3
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	623b      	str	r3, [r7, #32]
      break;
 80032f6:	e002      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032f8:	4b07      	ldr	r3, [pc, #28]	; (8003318 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032fa:	623b      	str	r3, [r7, #32]
      break;
 80032fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032fe:	6a3b      	ldr	r3, [r7, #32]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3728      	adds	r7, #40	; 0x28
 8003304:	46bd      	mov	sp, r7
 8003306:	bc90      	pop	{r4, r7}
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	08007a88 	.word	0x08007a88
 8003310:	08007a98 	.word	0x08007a98
 8003314:	40021000 	.word	0x40021000
 8003318:	007a1200 	.word	0x007a1200
 800331c:	003d0900 	.word	0x003d0900

08003320 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003328:	4b0a      	ldr	r3, [pc, #40]	; (8003354 <RCC_Delay+0x34>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a0a      	ldr	r2, [pc, #40]	; (8003358 <RCC_Delay+0x38>)
 800332e:	fba2 2303 	umull	r2, r3, r2, r3
 8003332:	0a5b      	lsrs	r3, r3, #9
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	fb02 f303 	mul.w	r3, r2, r3
 800333a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800333c:	bf00      	nop
  }
  while (Delay --);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	1e5a      	subs	r2, r3, #1
 8003342:	60fa      	str	r2, [r7, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1f9      	bne.n	800333c <RCC_Delay+0x1c>
}
 8003348:	bf00      	nop
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	20000004 	.word	0x20000004
 8003358:	10624dd3 	.word	0x10624dd3

0800335c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003364:	2300      	movs	r3, #0
 8003366:	613b      	str	r3, [r7, #16]
 8003368:	2300      	movs	r3, #0
 800336a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b00      	cmp	r3, #0
 8003376:	d07d      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003378:	2300      	movs	r3, #0
 800337a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800337c:	4b4f      	ldr	r3, [pc, #316]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10d      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003388:	4b4c      	ldr	r3, [pc, #304]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	4a4b      	ldr	r2, [pc, #300]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003392:	61d3      	str	r3, [r2, #28]
 8003394:	4b49      	ldr	r3, [pc, #292]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339c:	60bb      	str	r3, [r7, #8]
 800339e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033a0:	2301      	movs	r3, #1
 80033a2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a4:	4b46      	ldr	r3, [pc, #280]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d118      	bne.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033b0:	4b43      	ldr	r3, [pc, #268]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a42      	ldr	r2, [pc, #264]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033bc:	f7fd fdbe 	bl	8000f3c <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c2:	e008      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c4:	f7fd fdba 	bl	8000f3c <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b64      	cmp	r3, #100	; 0x64
 80033d0:	d901      	bls.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e06d      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d6:	4b3a      	ldr	r3, [pc, #232]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0f0      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033e2:	4b36      	ldr	r3, [pc, #216]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d02e      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d027      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003400:	4b2e      	ldr	r3, [pc, #184]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003408:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800340a:	4b2e      	ldr	r3, [pc, #184]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800340c:	2201      	movs	r2, #1
 800340e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003410:	4b2c      	ldr	r3, [pc, #176]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003416:	4a29      	ldr	r2, [pc, #164]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d014      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003426:	f7fd fd89 	bl	8000f3c <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800342c:	e00a      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342e:	f7fd fd85 	bl	8000f3c <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	f241 3288 	movw	r2, #5000	; 0x1388
 800343c:	4293      	cmp	r3, r2
 800343e:	d901      	bls.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e036      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003444:	4b1d      	ldr	r3, [pc, #116]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0ee      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003450:	4b1a      	ldr	r3, [pc, #104]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	4917      	ldr	r1, [pc, #92]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800345e:	4313      	orrs	r3, r2
 8003460:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003462:	7dfb      	ldrb	r3, [r7, #23]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d105      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003468:	4b14      	ldr	r3, [pc, #80]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	4a13      	ldr	r2, [pc, #76]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800346e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003472:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d008      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003480:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	490b      	ldr	r1, [pc, #44]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800348e:	4313      	orrs	r3, r2
 8003490:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0310 	and.w	r3, r3, #16
 800349a:	2b00      	cmp	r3, #0
 800349c:	d008      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800349e:	4b07      	ldr	r3, [pc, #28]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	4904      	ldr	r1, [pc, #16]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3718      	adds	r7, #24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40021000 	.word	0x40021000
 80034c0:	40007000 	.word	0x40007000
 80034c4:	42420440 	.word	0x42420440

080034c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80034c8:	b084      	sub	sp, #16
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	f107 0014 	add.w	r0, r7, #20
 80034d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	b004      	add	sp, #16
 80034e6:	4770      	bx	lr

080034e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80034f8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80034fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	b29a      	uxth	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	bc80      	pop	{r7}
 8003512:	4770      	bx	lr

08003514 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800351c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003520:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003528:	b29a      	uxth	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	b29b      	uxth	r3, r3
 800352e:	43db      	mvns	r3, r3
 8003530:	b29b      	uxth	r3, r3
 8003532:	4013      	ands	r3, r2
 8003534:	b29a      	uxth	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr

08003548 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	460b      	mov	r3, r1
 8003552:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr

08003560 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003560:	b084      	sub	sp, #16
 8003562:	b480      	push	{r7}
 8003564:	b083      	sub	sp, #12
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
 800356a:	f107 0014 	add.w	r0, r7, #20
 800356e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	bc80      	pop	{r7}
 800359c:	b004      	add	sp, #16
 800359e:	4770      	bx	lr

080035a0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b09b      	sub	sp, #108	; 0x6c
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80035aa:	2300      	movs	r3, #0
 80035ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	b29b      	uxth	r3, r3
 80035be:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80035c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	78db      	ldrb	r3, [r3, #3]
 80035ce:	2b03      	cmp	r3, #3
 80035d0:	d81f      	bhi.n	8003612 <USB_ActivateEndpoint+0x72>
 80035d2:	a201      	add	r2, pc, #4	; (adr r2, 80035d8 <USB_ActivateEndpoint+0x38>)
 80035d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d8:	080035e9 	.word	0x080035e9
 80035dc:	08003605 	.word	0x08003605
 80035e0:	0800361b 	.word	0x0800361b
 80035e4:	080035f7 	.word	0x080035f7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80035e8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80035ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035f0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80035f4:	e012      	b.n	800361c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80035f6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80035fa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80035fe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003602:	e00b      	b.n	800361c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003604:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003608:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800360c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003610:	e004      	b.n	800361c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003618:	e000      	b.n	800361c <USB_ActivateEndpoint+0x7c>
      break;
 800361a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	441a      	add	r2, r3
 8003626:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800362a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800362e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800363a:	b29b      	uxth	r3, r3
 800363c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	881b      	ldrh	r3, [r3, #0]
 800364a:	b29b      	uxth	r3, r3
 800364c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003654:	b29a      	uxth	r2, r3
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	b29b      	uxth	r3, r3
 800365c:	4313      	orrs	r3, r2
 800365e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	441a      	add	r2, r3
 800366c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003670:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003674:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003678:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800367c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003680:	b29b      	uxth	r3, r3
 8003682:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	7b1b      	ldrb	r3, [r3, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	f040 8149 	bne.w	8003920 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	785b      	ldrb	r3, [r3, #1]
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 8084 	beq.w	80037a0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	461a      	mov	r2, r3
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	4413      	add	r3, r2
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	011a      	lsls	r2, r3, #4
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036ba:	613b      	str	r3, [r7, #16]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	88db      	ldrh	r3, [r3, #6]
 80036c0:	085b      	lsrs	r3, r3, #1
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	81fb      	strh	r3, [r7, #14]
 80036da:	89fb      	ldrh	r3, [r7, #14]
 80036dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d01b      	beq.n	800371c <USB_ActivateEndpoint+0x17c>
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	881b      	ldrh	r3, [r3, #0]
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fa:	81bb      	strh	r3, [r7, #12]
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	441a      	add	r2, r3
 8003706:	89bb      	ldrh	r3, [r7, #12]
 8003708:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800370c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003710:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003714:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003718:	b29b      	uxth	r3, r3
 800371a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	78db      	ldrb	r3, [r3, #3]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d020      	beq.n	8003766 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	b29b      	uxth	r3, r3
 8003732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003736:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800373a:	813b      	strh	r3, [r7, #8]
 800373c:	893b      	ldrh	r3, [r7, #8]
 800373e:	f083 0320 	eor.w	r3, r3, #32
 8003742:	813b      	strh	r3, [r7, #8]
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	441a      	add	r2, r3
 800374e:	893b      	ldrh	r3, [r7, #8]
 8003750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800375c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003760:	b29b      	uxth	r3, r3
 8003762:	8013      	strh	r3, [r2, #0]
 8003764:	e27f      	b.n	8003c66 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	881b      	ldrh	r3, [r3, #0]
 8003772:	b29b      	uxth	r3, r3
 8003774:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800377c:	817b      	strh	r3, [r7, #10]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	441a      	add	r2, r3
 8003788:	897b      	ldrh	r3, [r7, #10]
 800378a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800378e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800379a:	b29b      	uxth	r3, r3
 800379c:	8013      	strh	r3, [r2, #0]
 800379e:	e262      	b.n	8003c66 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	461a      	mov	r2, r3
 80037ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b0:	4413      	add	r3, r2
 80037b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	011a      	lsls	r2, r3, #4
 80037ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037bc:	4413      	add	r3, r2
 80037be:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80037c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	88db      	ldrh	r3, [r3, #6]
 80037c8:	085b      	lsrs	r3, r3, #1
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	627b      	str	r3, [r7, #36]	; 0x24
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037de:	b29b      	uxth	r3, r3
 80037e0:	461a      	mov	r2, r3
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	4413      	add	r3, r2
 80037e6:	627b      	str	r3, [r7, #36]	; 0x24
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	011a      	lsls	r2, r3, #4
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	4413      	add	r3, r2
 80037f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80037f6:	623b      	str	r3, [r7, #32]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d112      	bne.n	8003826 <USB_ActivateEndpoint+0x286>
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	881b      	ldrh	r3, [r3, #0]
 8003804:	b29b      	uxth	r3, r3
 8003806:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800380a:	b29a      	uxth	r2, r3
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	801a      	strh	r2, [r3, #0]
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	b29b      	uxth	r3, r3
 8003816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800381a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800381e:	b29a      	uxth	r2, r3
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	801a      	strh	r2, [r3, #0]
 8003824:	e02f      	b.n	8003886 <USB_ActivateEndpoint+0x2e6>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	2b3e      	cmp	r3, #62	; 0x3e
 800382c:	d813      	bhi.n	8003856 <USB_ActivateEndpoint+0x2b6>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	085b      	lsrs	r3, r3, #1
 8003834:	663b      	str	r3, [r7, #96]	; 0x60
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d002      	beq.n	8003848 <USB_ActivateEndpoint+0x2a8>
 8003842:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003844:	3301      	adds	r3, #1
 8003846:	663b      	str	r3, [r7, #96]	; 0x60
 8003848:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800384a:	b29b      	uxth	r3, r3
 800384c:	029b      	lsls	r3, r3, #10
 800384e:	b29a      	uxth	r2, r3
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	801a      	strh	r2, [r3, #0]
 8003854:	e017      	b.n	8003886 <USB_ActivateEndpoint+0x2e6>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	663b      	str	r3, [r7, #96]	; 0x60
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f003 031f 	and.w	r3, r3, #31
 8003866:	2b00      	cmp	r3, #0
 8003868:	d102      	bne.n	8003870 <USB_ActivateEndpoint+0x2d0>
 800386a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800386c:	3b01      	subs	r3, #1
 800386e:	663b      	str	r3, [r7, #96]	; 0x60
 8003870:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003872:	b29b      	uxth	r3, r3
 8003874:	029b      	lsls	r3, r3, #10
 8003876:	b29b      	uxth	r3, r3
 8003878:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800387c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003880:	b29a      	uxth	r2, r3
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	83fb      	strh	r3, [r7, #30]
 8003894:	8bfb      	ldrh	r3, [r7, #30]
 8003896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d01b      	beq.n	80038d6 <USB_ActivateEndpoint+0x336>
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b4:	83bb      	strh	r3, [r7, #28]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	441a      	add	r2, r3
 80038c0:	8bbb      	ldrh	r3, [r7, #28]
 80038c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4413      	add	r3, r2
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ec:	837b      	strh	r3, [r7, #26]
 80038ee:	8b7b      	ldrh	r3, [r7, #26]
 80038f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80038f4:	837b      	strh	r3, [r7, #26]
 80038f6:	8b7b      	ldrh	r3, [r7, #26]
 80038f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80038fc:	837b      	strh	r3, [r7, #26]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	441a      	add	r2, r3
 8003908:	8b7b      	ldrh	r3, [r7, #26]
 800390a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800390e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800391a:	b29b      	uxth	r3, r3
 800391c:	8013      	strh	r3, [r2, #0]
 800391e:	e1a2      	b.n	8003c66 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	b29b      	uxth	r3, r3
 800392e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003936:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	441a      	add	r2, r3
 8003944:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003948:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800394c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003950:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003958:	b29b      	uxth	r3, r3
 800395a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003966:	b29b      	uxth	r3, r3
 8003968:	461a      	mov	r2, r3
 800396a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800396c:	4413      	add	r3, r2
 800396e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	011a      	lsls	r2, r3, #4
 8003976:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003978:	4413      	add	r3, r2
 800397a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800397e:	657b      	str	r3, [r7, #84]	; 0x54
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	891b      	ldrh	r3, [r3, #8]
 8003984:	085b      	lsrs	r3, r3, #1
 8003986:	b29b      	uxth	r3, r3
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800398e:	801a      	strh	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	653b      	str	r3, [r7, #80]	; 0x50
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800399a:	b29b      	uxth	r3, r3
 800399c:	461a      	mov	r2, r3
 800399e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039a0:	4413      	add	r3, r2
 80039a2:	653b      	str	r3, [r7, #80]	; 0x50
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	011a      	lsls	r2, r3, #4
 80039aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039ac:	4413      	add	r3, r2
 80039ae:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80039b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	895b      	ldrh	r3, [r3, #10]
 80039b8:	085b      	lsrs	r3, r3, #1
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039c2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	785b      	ldrb	r3, [r3, #1]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f040 8091 	bne.w	8003af0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4413      	add	r3, r2
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80039dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80039de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d01b      	beq.n	8003a1e <USB_ActivateEndpoint+0x47e>
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	881b      	ldrh	r3, [r3, #0]
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039fc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	441a      	add	r2, r3
 8003a08:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003a0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4413      	add	r3, r2
 8003a28:	881b      	ldrh	r3, [r3, #0]
 8003a2a:	873b      	strh	r3, [r7, #56]	; 0x38
 8003a2c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d01b      	beq.n	8003a6e <USB_ActivateEndpoint+0x4ce>
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	441a      	add	r2, r3
 8003a58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a84:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003a86:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003a88:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003a8c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003a8e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003a90:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a94:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	441a      	add	r2, r3
 8003aa0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ac8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003acc:	867b      	strh	r3, [r7, #50]	; 0x32
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	441a      	add	r2, r3
 8003ad8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	8013      	strh	r3, [r2, #0]
 8003aee:	e0ba      	b.n	8003c66 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003b00:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003b04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d01d      	beq.n	8003b48 <USB_ActivateEndpoint+0x5a8>
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b22:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	441a      	add	r2, r3
 8003b30:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	881b      	ldrh	r3, [r3, #0]
 8003b54:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003b58:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d01d      	beq.n	8003ba0 <USB_ActivateEndpoint+0x600>
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	441a      	add	r2, r3
 8003b88:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003b8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	78db      	ldrb	r3, [r3, #3]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d024      	beq.n	8003bf2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	881b      	ldrh	r3, [r3, #0]
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bbe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003bc2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003bc6:	f083 0320 	eor.w	r3, r3, #32
 8003bca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	441a      	add	r2, r3
 8003bd8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003bdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003be0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003be4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	8013      	strh	r3, [r2, #0]
 8003bf0:	e01d      	b.n	8003c2e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c08:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	441a      	add	r2, r3
 8003c16:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	881b      	ldrh	r3, [r3, #0]
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c44:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	441a      	add	r2, r3
 8003c50:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003c66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	376c      	adds	r7, #108	; 0x6c
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr

08003c74 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b08d      	sub	sp, #52	; 0x34
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	7b1b      	ldrb	r3, [r3, #12]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f040 808e 	bne.w	8003da4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	785b      	ldrb	r3, [r3, #1]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d044      	beq.n	8003d1a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	81bb      	strh	r3, [r7, #12]
 8003c9e:	89bb      	ldrh	r3, [r7, #12]
 8003ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d01b      	beq.n	8003ce0 <USB_DeactivateEndpoint+0x6c>
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cbe:	817b      	strh	r3, [r7, #10]
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	441a      	add	r2, r3
 8003cca:	897b      	ldrh	r3, [r7, #10]
 8003ccc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cf6:	813b      	strh	r3, [r7, #8]
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	441a      	add	r2, r3
 8003d02:	893b      	ldrh	r3, [r7, #8]
 8003d04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	8013      	strh	r3, [r2, #0]
 8003d18:	e192      	b.n	8004040 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	827b      	strh	r3, [r7, #18]
 8003d28:	8a7b      	ldrh	r3, [r7, #18]
 8003d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d01b      	beq.n	8003d6a <USB_DeactivateEndpoint+0xf6>
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d48:	823b      	strh	r3, [r7, #16]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	441a      	add	r2, r3
 8003d54:	8a3b      	ldrh	r3, [r7, #16]
 8003d56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4413      	add	r3, r2
 8003d74:	881b      	ldrh	r3, [r3, #0]
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d80:	81fb      	strh	r3, [r7, #14]
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	441a      	add	r2, r3
 8003d8c:	89fb      	ldrh	r3, [r7, #14]
 8003d8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	8013      	strh	r3, [r2, #0]
 8003da2:	e14d      	b.n	8004040 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	785b      	ldrb	r3, [r3, #1]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f040 80a5 	bne.w	8003ef8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	4413      	add	r3, r2
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	843b      	strh	r3, [r7, #32]
 8003dbc:	8c3b      	ldrh	r3, [r7, #32]
 8003dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d01b      	beq.n	8003dfe <USB_DeactivateEndpoint+0x18a>
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	881b      	ldrh	r3, [r3, #0]
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ddc:	83fb      	strh	r3, [r7, #30]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	441a      	add	r2, r3
 8003de8:	8bfb      	ldrh	r3, [r7, #30]
 8003dea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003df2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	83bb      	strh	r3, [r7, #28]
 8003e0c:	8bbb      	ldrh	r3, [r7, #28]
 8003e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d01b      	beq.n	8003e4e <USB_DeactivateEndpoint+0x1da>
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4413      	add	r3, r2
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2c:	837b      	strh	r3, [r7, #26]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	441a      	add	r2, r3
 8003e38:	8b7b      	ldrh	r3, [r7, #26]
 8003e3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4413      	add	r3, r2
 8003e58:	881b      	ldrh	r3, [r3, #0]
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e64:	833b      	strh	r3, [r7, #24]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	441a      	add	r2, r3
 8003e70:	8b3b      	ldrh	r3, [r7, #24]
 8003e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9c:	82fb      	strh	r3, [r7, #22]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	441a      	add	r2, r3
 8003ea8:	8afb      	ldrh	r3, [r7, #22]
 8003eaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ed4:	82bb      	strh	r3, [r7, #20]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	441a      	add	r2, r3
 8003ee0:	8abb      	ldrh	r3, [r7, #20]
 8003ee2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ee6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	8013      	strh	r3, [r2, #0]
 8003ef6:	e0a3      	b.n	8004040 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	881b      	ldrh	r3, [r3, #0]
 8003f04:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003f06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003f08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d01b      	beq.n	8003f48 <USB_DeactivateEndpoint+0x2d4>
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f26:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	441a      	add	r2, r3
 8003f32:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003f34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003f56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d01b      	beq.n	8003f98 <USB_DeactivateEndpoint+0x324>
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	881b      	ldrh	r3, [r3, #0]
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f76:	853b      	strh	r3, [r7, #40]	; 0x28
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	441a      	add	r2, r3
 8003f82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003f84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4413      	add	r3, r2
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fae:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	441a      	add	r2, r3
 8003fba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003fbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fe6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	441a      	add	r2, r3
 8003ff2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ff4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ff8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004004:	b29b      	uxth	r3, r3
 8004006:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	881b      	ldrh	r3, [r3, #0]
 8004014:	b29b      	uxth	r3, r3
 8004016:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800401a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	441a      	add	r2, r3
 800402a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800402c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004030:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004034:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800403c:	b29b      	uxth	r3, r3
 800403e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3734      	adds	r7, #52	; 0x34
 8004046:	46bd      	mov	sp, r7
 8004048:	bc80      	pop	{r7}
 800404a:	4770      	bx	lr

0800404c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b0c4      	sub	sp, #272	; 0x110
 8004050:	af00      	add	r7, sp, #0
 8004052:	1d3b      	adds	r3, r7, #4
 8004054:	6018      	str	r0, [r3, #0]
 8004056:	463b      	mov	r3, r7
 8004058:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800405a:	463b      	mov	r3, r7
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	785b      	ldrb	r3, [r3, #1]
 8004060:	2b01      	cmp	r3, #1
 8004062:	f040 8557 	bne.w	8004b14 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004066:	463b      	mov	r3, r7
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699a      	ldr	r2, [r3, #24]
 800406c:	463b      	mov	r3, r7
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	429a      	cmp	r2, r3
 8004074:	d905      	bls.n	8004082 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004076:	463b      	mov	r3, r7
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004080:	e004      	b.n	800408c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004082:	463b      	mov	r3, r7
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800408c:	463b      	mov	r3, r7
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	7b1b      	ldrb	r3, [r3, #12]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d12c      	bne.n	80040f0 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004096:	463b      	mov	r3, r7
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6959      	ldr	r1, [r3, #20]
 800409c:	463b      	mov	r3, r7
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	88da      	ldrh	r2, [r3, #6]
 80040a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	1d38      	adds	r0, r7, #4
 80040aa:	6800      	ldr	r0, [r0, #0]
 80040ac:	f001 fa2c 	bl	8005508 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80040b0:	1d3b      	adds	r3, r7, #4
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	617b      	str	r3, [r7, #20]
 80040b6:	1d3b      	adds	r3, r7, #4
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040be:	b29b      	uxth	r3, r3
 80040c0:	461a      	mov	r2, r3
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	4413      	add	r3, r2
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	463b      	mov	r3, r7
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	011a      	lsls	r2, r3, #4
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	4413      	add	r3, r2
 80040d4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80040d8:	f107 0310 	add.w	r3, r7, #16
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	f107 0310 	add.w	r3, r7, #16
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	801a      	strh	r2, [r3, #0]
 80040ec:	f000 bcdd 	b.w	8004aaa <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80040f0:	463b      	mov	r3, r7
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	78db      	ldrb	r3, [r3, #3]
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	f040 8347 	bne.w	800478a <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80040fc:	463b      	mov	r3, r7
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6a1a      	ldr	r2, [r3, #32]
 8004102:	463b      	mov	r3, r7
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	429a      	cmp	r2, r3
 800410a:	f240 82eb 	bls.w	80046e4 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800410e:	1d3b      	adds	r3, r7, #4
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	463b      	mov	r3, r7
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4413      	add	r3, r2
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	b29b      	uxth	r3, r3
 8004120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004128:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800412c:	1d3b      	adds	r3, r7, #4
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	463b      	mov	r3, r7
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	441a      	add	r2, r3
 800413a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800413e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004142:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004146:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800414a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800414e:	b29b      	uxth	r3, r3
 8004150:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004152:	463b      	mov	r3, r7
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6a1a      	ldr	r2, [r3, #32]
 8004158:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800415c:	1ad2      	subs	r2, r2, r3
 800415e:	463b      	mov	r3, r7
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004164:	1d3b      	adds	r3, r7, #4
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	463b      	mov	r3, r7
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	b29b      	uxth	r3, r3
 8004176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417a:	2b00      	cmp	r3, #0
 800417c:	f000 8159 	beq.w	8004432 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004180:	1d3b      	adds	r3, r7, #4
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	637b      	str	r3, [r7, #52]	; 0x34
 8004186:	463b      	mov	r3, r7
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	785b      	ldrb	r3, [r3, #1]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d164      	bne.n	800425a <USB_EPStartXfer+0x20e>
 8004190:	1d3b      	adds	r3, r7, #4
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004196:	1d3b      	adds	r3, r7, #4
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800419e:	b29b      	uxth	r3, r3
 80041a0:	461a      	mov	r2, r3
 80041a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a4:	4413      	add	r3, r2
 80041a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041a8:	463b      	mov	r3, r7
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	011a      	lsls	r2, r3, #4
 80041b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b2:	4413      	add	r3, r2
 80041b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80041ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d112      	bne.n	80041e8 <USB_EPStartXfer+0x19c>
 80041c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d0:	801a      	strh	r2, [r3, #0]
 80041d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e4:	801a      	strh	r2, [r3, #0]
 80041e6:	e054      	b.n	8004292 <USB_EPStartXfer+0x246>
 80041e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ec:	2b3e      	cmp	r3, #62	; 0x3e
 80041ee:	d817      	bhi.n	8004220 <USB_EPStartXfer+0x1d4>
 80041f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041f4:	085b      	lsrs	r3, r3, #1
 80041f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80041fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d004      	beq.n	8004210 <USB_EPStartXfer+0x1c4>
 8004206:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800420a:	3301      	adds	r3, #1
 800420c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004214:	b29b      	uxth	r3, r3
 8004216:	029b      	lsls	r3, r3, #10
 8004218:	b29a      	uxth	r2, r3
 800421a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421c:	801a      	strh	r2, [r3, #0]
 800421e:	e038      	b.n	8004292 <USB_EPStartXfer+0x246>
 8004220:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004224:	095b      	lsrs	r3, r3, #5
 8004226:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800422a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800422e:	f003 031f 	and.w	r3, r3, #31
 8004232:	2b00      	cmp	r3, #0
 8004234:	d104      	bne.n	8004240 <USB_EPStartXfer+0x1f4>
 8004236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800423a:	3b01      	subs	r3, #1
 800423c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004244:	b29b      	uxth	r3, r3
 8004246:	029b      	lsls	r3, r3, #10
 8004248:	b29b      	uxth	r3, r3
 800424a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800424e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004252:	b29a      	uxth	r2, r3
 8004254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004256:	801a      	strh	r2, [r3, #0]
 8004258:	e01b      	b.n	8004292 <USB_EPStartXfer+0x246>
 800425a:	463b      	mov	r3, r7
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	785b      	ldrb	r3, [r3, #1]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d116      	bne.n	8004292 <USB_EPStartXfer+0x246>
 8004264:	1d3b      	adds	r3, r7, #4
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800426c:	b29b      	uxth	r3, r3
 800426e:	461a      	mov	r2, r3
 8004270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004272:	4413      	add	r3, r2
 8004274:	637b      	str	r3, [r7, #52]	; 0x34
 8004276:	463b      	mov	r3, r7
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	011a      	lsls	r2, r3, #4
 800427e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004280:	4413      	add	r3, r2
 8004282:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004286:	633b      	str	r3, [r7, #48]	; 0x30
 8004288:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800428c:	b29a      	uxth	r2, r3
 800428e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004290:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004292:	463b      	mov	r3, r7
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	895b      	ldrh	r3, [r3, #10]
 8004298:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800429c:	463b      	mov	r3, r7
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6959      	ldr	r1, [r3, #20]
 80042a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80042ac:	1d38      	adds	r0, r7, #4
 80042ae:	6800      	ldr	r0, [r0, #0]
 80042b0:	f001 f92a 	bl	8005508 <USB_WritePMA>
            ep->xfer_buff += len;
 80042b4:	463b      	mov	r3, r7
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695a      	ldr	r2, [r3, #20]
 80042ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042be:	441a      	add	r2, r3
 80042c0:	463b      	mov	r3, r7
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80042c6:	463b      	mov	r3, r7
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6a1a      	ldr	r2, [r3, #32]
 80042cc:	463b      	mov	r3, r7
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d909      	bls.n	80042ea <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80042d6:	463b      	mov	r3, r7
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6a1a      	ldr	r2, [r3, #32]
 80042dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042e0:	1ad2      	subs	r2, r2, r3
 80042e2:	463b      	mov	r3, r7
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	621a      	str	r2, [r3, #32]
 80042e8:	e008      	b.n	80042fc <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80042ea:	463b      	mov	r3, r7
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80042f4:	463b      	mov	r3, r7
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2200      	movs	r2, #0
 80042fa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80042fc:	463b      	mov	r3, r7
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	785b      	ldrb	r3, [r3, #1]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d164      	bne.n	80043d0 <USB_EPStartXfer+0x384>
 8004306:	1d3b      	adds	r3, r7, #4
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	61fb      	str	r3, [r7, #28]
 800430c:	1d3b      	adds	r3, r7, #4
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004314:	b29b      	uxth	r3, r3
 8004316:	461a      	mov	r2, r3
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	4413      	add	r3, r2
 800431c:	61fb      	str	r3, [r7, #28]
 800431e:	463b      	mov	r3, r7
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	011a      	lsls	r2, r3, #4
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	4413      	add	r3, r2
 800432a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800432e:	61bb      	str	r3, [r7, #24]
 8004330:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004334:	2b00      	cmp	r3, #0
 8004336:	d112      	bne.n	800435e <USB_EPStartXfer+0x312>
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	b29b      	uxth	r3, r3
 800433e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004342:	b29a      	uxth	r2, r3
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	801a      	strh	r2, [r3, #0]
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	b29b      	uxth	r3, r3
 800434e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004356:	b29a      	uxth	r2, r3
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	801a      	strh	r2, [r3, #0]
 800435c:	e057      	b.n	800440e <USB_EPStartXfer+0x3c2>
 800435e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004362:	2b3e      	cmp	r3, #62	; 0x3e
 8004364:	d817      	bhi.n	8004396 <USB_EPStartXfer+0x34a>
 8004366:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800436a:	085b      	lsrs	r3, r3, #1
 800436c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004370:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	d004      	beq.n	8004386 <USB_EPStartXfer+0x33a>
 800437c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004380:	3301      	adds	r3, #1
 8004382:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004386:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800438a:	b29b      	uxth	r3, r3
 800438c:	029b      	lsls	r3, r3, #10
 800438e:	b29a      	uxth	r2, r3
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	801a      	strh	r2, [r3, #0]
 8004394:	e03b      	b.n	800440e <USB_EPStartXfer+0x3c2>
 8004396:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80043a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043a4:	f003 031f 	and.w	r3, r3, #31
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d104      	bne.n	80043b6 <USB_EPStartXfer+0x36a>
 80043ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80043b0:	3b01      	subs	r3, #1
 80043b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80043b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	029b      	lsls	r3, r3, #10
 80043be:	b29b      	uxth	r3, r3
 80043c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	801a      	strh	r2, [r3, #0]
 80043ce:	e01e      	b.n	800440e <USB_EPStartXfer+0x3c2>
 80043d0:	463b      	mov	r3, r7
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	785b      	ldrb	r3, [r3, #1]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d119      	bne.n	800440e <USB_EPStartXfer+0x3c2>
 80043da:	1d3b      	adds	r3, r7, #4
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	627b      	str	r3, [r7, #36]	; 0x24
 80043e0:	1d3b      	adds	r3, r7, #4
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	461a      	mov	r2, r3
 80043ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ee:	4413      	add	r3, r2
 80043f0:	627b      	str	r3, [r7, #36]	; 0x24
 80043f2:	463b      	mov	r3, r7
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	011a      	lsls	r2, r3, #4
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	4413      	add	r3, r2
 80043fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004402:	623b      	str	r3, [r7, #32]
 8004404:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004408:	b29a      	uxth	r2, r3
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800440e:	463b      	mov	r3, r7
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	891b      	ldrh	r3, [r3, #8]
 8004414:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004418:	463b      	mov	r3, r7
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6959      	ldr	r1, [r3, #20]
 800441e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004422:	b29b      	uxth	r3, r3
 8004424:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004428:	1d38      	adds	r0, r7, #4
 800442a:	6800      	ldr	r0, [r0, #0]
 800442c:	f001 f86c 	bl	8005508 <USB_WritePMA>
 8004430:	e33b      	b.n	8004aaa <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004432:	463b      	mov	r3, r7
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	785b      	ldrb	r3, [r3, #1]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d164      	bne.n	8004506 <USB_EPStartXfer+0x4ba>
 800443c:	1d3b      	adds	r3, r7, #4
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004442:	1d3b      	adds	r3, r7, #4
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800444a:	b29b      	uxth	r3, r3
 800444c:	461a      	mov	r2, r3
 800444e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004450:	4413      	add	r3, r2
 8004452:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004454:	463b      	mov	r3, r7
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	011a      	lsls	r2, r3, #4
 800445c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800445e:	4413      	add	r3, r2
 8004460:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004464:	64bb      	str	r3, [r7, #72]	; 0x48
 8004466:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800446a:	2b00      	cmp	r3, #0
 800446c:	d112      	bne.n	8004494 <USB_EPStartXfer+0x448>
 800446e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	b29b      	uxth	r3, r3
 8004474:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004478:	b29a      	uxth	r2, r3
 800447a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800447c:	801a      	strh	r2, [r3, #0]
 800447e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	b29b      	uxth	r3, r3
 8004484:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004488:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800448c:	b29a      	uxth	r2, r3
 800448e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004490:	801a      	strh	r2, [r3, #0]
 8004492:	e057      	b.n	8004544 <USB_EPStartXfer+0x4f8>
 8004494:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004498:	2b3e      	cmp	r3, #62	; 0x3e
 800449a:	d817      	bhi.n	80044cc <USB_EPStartXfer+0x480>
 800449c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044a0:	085b      	lsrs	r3, r3, #1
 80044a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80044a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d004      	beq.n	80044bc <USB_EPStartXfer+0x470>
 80044b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044b6:	3301      	adds	r3, #1
 80044b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80044bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	029b      	lsls	r3, r3, #10
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044c8:	801a      	strh	r2, [r3, #0]
 80044ca:	e03b      	b.n	8004544 <USB_EPStartXfer+0x4f8>
 80044cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044d0:	095b      	lsrs	r3, r3, #5
 80044d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80044d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044da:	f003 031f 	and.w	r3, r3, #31
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d104      	bne.n	80044ec <USB_EPStartXfer+0x4a0>
 80044e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044e6:	3b01      	subs	r3, #1
 80044e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80044ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	029b      	lsls	r3, r3, #10
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044fe:	b29a      	uxth	r2, r3
 8004500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004502:	801a      	strh	r2, [r3, #0]
 8004504:	e01e      	b.n	8004544 <USB_EPStartXfer+0x4f8>
 8004506:	463b      	mov	r3, r7
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	785b      	ldrb	r3, [r3, #1]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d119      	bne.n	8004544 <USB_EPStartXfer+0x4f8>
 8004510:	1d3b      	adds	r3, r7, #4
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	657b      	str	r3, [r7, #84]	; 0x54
 8004516:	1d3b      	adds	r3, r7, #4
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800451e:	b29b      	uxth	r3, r3
 8004520:	461a      	mov	r2, r3
 8004522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004524:	4413      	add	r3, r2
 8004526:	657b      	str	r3, [r7, #84]	; 0x54
 8004528:	463b      	mov	r3, r7
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	011a      	lsls	r2, r3, #4
 8004530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004532:	4413      	add	r3, r2
 8004534:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004538:	653b      	str	r3, [r7, #80]	; 0x50
 800453a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800453e:	b29a      	uxth	r2, r3
 8004540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004542:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004544:	463b      	mov	r3, r7
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	891b      	ldrh	r3, [r3, #8]
 800454a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800454e:	463b      	mov	r3, r7
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6959      	ldr	r1, [r3, #20]
 8004554:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004558:	b29b      	uxth	r3, r3
 800455a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800455e:	1d38      	adds	r0, r7, #4
 8004560:	6800      	ldr	r0, [r0, #0]
 8004562:	f000 ffd1 	bl	8005508 <USB_WritePMA>
            ep->xfer_buff += len;
 8004566:	463b      	mov	r3, r7
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	695a      	ldr	r2, [r3, #20]
 800456c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004570:	441a      	add	r2, r3
 8004572:	463b      	mov	r3, r7
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004578:	463b      	mov	r3, r7
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6a1a      	ldr	r2, [r3, #32]
 800457e:	463b      	mov	r3, r7
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	429a      	cmp	r2, r3
 8004586:	d909      	bls.n	800459c <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8004588:	463b      	mov	r3, r7
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6a1a      	ldr	r2, [r3, #32]
 800458e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004592:	1ad2      	subs	r2, r2, r3
 8004594:	463b      	mov	r3, r7
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	621a      	str	r2, [r3, #32]
 800459a:	e008      	b.n	80045ae <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 800459c:	463b      	mov	r3, r7
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80045a6:	463b      	mov	r3, r7
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2200      	movs	r2, #0
 80045ac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80045ae:	1d3b      	adds	r3, r7, #4
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	647b      	str	r3, [r7, #68]	; 0x44
 80045b4:	463b      	mov	r3, r7
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	785b      	ldrb	r3, [r3, #1]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d164      	bne.n	8004688 <USB_EPStartXfer+0x63c>
 80045be:	1d3b      	adds	r3, r7, #4
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045c4:	1d3b      	adds	r3, r7, #4
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	461a      	mov	r2, r3
 80045d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045d2:	4413      	add	r3, r2
 80045d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045d6:	463b      	mov	r3, r7
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	011a      	lsls	r2, r3, #4
 80045de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045e0:	4413      	add	r3, r2
 80045e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80045e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d112      	bne.n	8004616 <USB_EPStartXfer+0x5ca>
 80045f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f2:	881b      	ldrh	r3, [r3, #0]
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fe:	801a      	strh	r2, [r3, #0]
 8004600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004602:	881b      	ldrh	r3, [r3, #0]
 8004604:	b29b      	uxth	r3, r3
 8004606:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800460a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800460e:	b29a      	uxth	r2, r3
 8004610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004612:	801a      	strh	r2, [r3, #0]
 8004614:	e054      	b.n	80046c0 <USB_EPStartXfer+0x674>
 8004616:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800461a:	2b3e      	cmp	r3, #62	; 0x3e
 800461c:	d817      	bhi.n	800464e <USB_EPStartXfer+0x602>
 800461e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004622:	085b      	lsrs	r3, r3, #1
 8004624:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004628:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	d004      	beq.n	800463e <USB_EPStartXfer+0x5f2>
 8004634:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004638:	3301      	adds	r3, #1
 800463a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800463e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004642:	b29b      	uxth	r3, r3
 8004644:	029b      	lsls	r3, r3, #10
 8004646:	b29a      	uxth	r2, r3
 8004648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800464a:	801a      	strh	r2, [r3, #0]
 800464c:	e038      	b.n	80046c0 <USB_EPStartXfer+0x674>
 800464e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004658:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800465c:	f003 031f 	and.w	r3, r3, #31
 8004660:	2b00      	cmp	r3, #0
 8004662:	d104      	bne.n	800466e <USB_EPStartXfer+0x622>
 8004664:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004668:	3b01      	subs	r3, #1
 800466a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800466e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004672:	b29b      	uxth	r3, r3
 8004674:	029b      	lsls	r3, r3, #10
 8004676:	b29b      	uxth	r3, r3
 8004678:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800467c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004680:	b29a      	uxth	r2, r3
 8004682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004684:	801a      	strh	r2, [r3, #0]
 8004686:	e01b      	b.n	80046c0 <USB_EPStartXfer+0x674>
 8004688:	463b      	mov	r3, r7
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	785b      	ldrb	r3, [r3, #1]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d116      	bne.n	80046c0 <USB_EPStartXfer+0x674>
 8004692:	1d3b      	adds	r3, r7, #4
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800469a:	b29b      	uxth	r3, r3
 800469c:	461a      	mov	r2, r3
 800469e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046a0:	4413      	add	r3, r2
 80046a2:	647b      	str	r3, [r7, #68]	; 0x44
 80046a4:	463b      	mov	r3, r7
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	011a      	lsls	r2, r3, #4
 80046ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046ae:	4413      	add	r3, r2
 80046b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046b4:	643b      	str	r3, [r7, #64]	; 0x40
 80046b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046be:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80046c0:	463b      	mov	r3, r7
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	895b      	ldrh	r3, [r3, #10]
 80046c6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80046ca:	463b      	mov	r3, r7
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6959      	ldr	r1, [r3, #20]
 80046d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80046da:	1d38      	adds	r0, r7, #4
 80046dc:	6800      	ldr	r0, [r0, #0]
 80046de:	f000 ff13 	bl	8005508 <USB_WritePMA>
 80046e2:	e1e2      	b.n	8004aaa <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80046e4:	463b      	mov	r3, r7
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80046ee:	1d3b      	adds	r3, r7, #4
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	463b      	mov	r3, r7
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4413      	add	r3, r2
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	b29b      	uxth	r3, r3
 8004700:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004708:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800470c:	1d3b      	adds	r3, r7, #4
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	463b      	mov	r3, r7
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	441a      	add	r2, r3
 800471a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800471e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004722:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800472a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800472e:	b29b      	uxth	r3, r3
 8004730:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004732:	1d3b      	adds	r3, r7, #4
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	663b      	str	r3, [r7, #96]	; 0x60
 8004738:	1d3b      	adds	r3, r7, #4
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004740:	b29b      	uxth	r3, r3
 8004742:	461a      	mov	r2, r3
 8004744:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004746:	4413      	add	r3, r2
 8004748:	663b      	str	r3, [r7, #96]	; 0x60
 800474a:	463b      	mov	r3, r7
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	011a      	lsls	r2, r3, #4
 8004752:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004754:	4413      	add	r3, r2
 8004756:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800475a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800475c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004760:	b29a      	uxth	r2, r3
 8004762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004764:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004766:	463b      	mov	r3, r7
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	891b      	ldrh	r3, [r3, #8]
 800476c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004770:	463b      	mov	r3, r7
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6959      	ldr	r1, [r3, #20]
 8004776:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800477a:	b29b      	uxth	r3, r3
 800477c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004780:	1d38      	adds	r0, r7, #4
 8004782:	6800      	ldr	r0, [r0, #0]
 8004784:	f000 fec0 	bl	8005508 <USB_WritePMA>
 8004788:	e18f      	b.n	8004aaa <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800478a:	1d3b      	adds	r3, r7, #4
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	463b      	mov	r3, r7
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	b29b      	uxth	r3, r3
 800479c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 808f 	beq.w	80048c4 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80047a6:	1d3b      	adds	r3, r7, #4
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80047ac:	463b      	mov	r3, r7
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	785b      	ldrb	r3, [r3, #1]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d164      	bne.n	8004880 <USB_EPStartXfer+0x834>
 80047b6:	1d3b      	adds	r3, r7, #4
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	673b      	str	r3, [r7, #112]	; 0x70
 80047bc:	1d3b      	adds	r3, r7, #4
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	461a      	mov	r2, r3
 80047c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047ca:	4413      	add	r3, r2
 80047cc:	673b      	str	r3, [r7, #112]	; 0x70
 80047ce:	463b      	mov	r3, r7
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	011a      	lsls	r2, r3, #4
 80047d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047d8:	4413      	add	r3, r2
 80047da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d112      	bne.n	800480e <USB_EPStartXfer+0x7c2>
 80047e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047f6:	801a      	strh	r2, [r3, #0]
 80047f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047fa:	881b      	ldrh	r3, [r3, #0]
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004802:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004806:	b29a      	uxth	r2, r3
 8004808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800480a:	801a      	strh	r2, [r3, #0]
 800480c:	e054      	b.n	80048b8 <USB_EPStartXfer+0x86c>
 800480e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004812:	2b3e      	cmp	r3, #62	; 0x3e
 8004814:	d817      	bhi.n	8004846 <USB_EPStartXfer+0x7fa>
 8004816:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800481a:	085b      	lsrs	r3, r3, #1
 800481c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004820:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b00      	cmp	r3, #0
 800482a:	d004      	beq.n	8004836 <USB_EPStartXfer+0x7ea>
 800482c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004830:	3301      	adds	r3, #1
 8004832:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483a:	b29b      	uxth	r3, r3
 800483c:	029b      	lsls	r3, r3, #10
 800483e:	b29a      	uxth	r2, r3
 8004840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004842:	801a      	strh	r2, [r3, #0]
 8004844:	e038      	b.n	80048b8 <USB_EPStartXfer+0x86c>
 8004846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800484a:	095b      	lsrs	r3, r3, #5
 800484c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004850:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004854:	f003 031f 	and.w	r3, r3, #31
 8004858:	2b00      	cmp	r3, #0
 800485a:	d104      	bne.n	8004866 <USB_EPStartXfer+0x81a>
 800485c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004860:	3b01      	subs	r3, #1
 8004862:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486a:	b29b      	uxth	r3, r3
 800486c:	029b      	lsls	r3, r3, #10
 800486e:	b29b      	uxth	r3, r3
 8004870:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004874:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004878:	b29a      	uxth	r2, r3
 800487a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800487c:	801a      	strh	r2, [r3, #0]
 800487e:	e01b      	b.n	80048b8 <USB_EPStartXfer+0x86c>
 8004880:	463b      	mov	r3, r7
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	785b      	ldrb	r3, [r3, #1]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d116      	bne.n	80048b8 <USB_EPStartXfer+0x86c>
 800488a:	1d3b      	adds	r3, r7, #4
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004892:	b29b      	uxth	r3, r3
 8004894:	461a      	mov	r2, r3
 8004896:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004898:	4413      	add	r3, r2
 800489a:	67bb      	str	r3, [r7, #120]	; 0x78
 800489c:	463b      	mov	r3, r7
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	011a      	lsls	r2, r3, #4
 80048a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048a6:	4413      	add	r3, r2
 80048a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048ac:	677b      	str	r3, [r7, #116]	; 0x74
 80048ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048b6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80048b8:	463b      	mov	r3, r7
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	895b      	ldrh	r3, [r3, #10]
 80048be:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 80048c2:	e097      	b.n	80049f4 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80048c4:	463b      	mov	r3, r7
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	785b      	ldrb	r3, [r3, #1]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d168      	bne.n	80049a0 <USB_EPStartXfer+0x954>
 80048ce:	1d3b      	adds	r3, r7, #4
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048d6:	1d3b      	adds	r3, r7, #4
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048de:	b29b      	uxth	r3, r3
 80048e0:	461a      	mov	r2, r3
 80048e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048e6:	4413      	add	r3, r2
 80048e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048ec:	463b      	mov	r3, r7
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	011a      	lsls	r2, r3, #4
 80048f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048f8:	4413      	add	r3, r2
 80048fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004900:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004904:	2b00      	cmp	r3, #0
 8004906:	d112      	bne.n	800492e <USB_EPStartXfer+0x8e2>
 8004908:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800490a:	881b      	ldrh	r3, [r3, #0]
 800490c:	b29b      	uxth	r3, r3
 800490e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004912:	b29a      	uxth	r2, r3
 8004914:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004916:	801a      	strh	r2, [r3, #0]
 8004918:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	b29b      	uxth	r3, r3
 800491e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004926:	b29a      	uxth	r2, r3
 8004928:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800492a:	801a      	strh	r2, [r3, #0]
 800492c:	e05d      	b.n	80049ea <USB_EPStartXfer+0x99e>
 800492e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004932:	2b3e      	cmp	r3, #62	; 0x3e
 8004934:	d817      	bhi.n	8004966 <USB_EPStartXfer+0x91a>
 8004936:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800493a:	085b      	lsrs	r3, r3, #1
 800493c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004940:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b00      	cmp	r3, #0
 800494a:	d004      	beq.n	8004956 <USB_EPStartXfer+0x90a>
 800494c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004950:	3301      	adds	r3, #1
 8004952:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004956:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800495a:	b29b      	uxth	r3, r3
 800495c:	029b      	lsls	r3, r3, #10
 800495e:	b29a      	uxth	r2, r3
 8004960:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004962:	801a      	strh	r2, [r3, #0]
 8004964:	e041      	b.n	80049ea <USB_EPStartXfer+0x99e>
 8004966:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800496a:	095b      	lsrs	r3, r3, #5
 800496c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004970:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004974:	f003 031f 	and.w	r3, r3, #31
 8004978:	2b00      	cmp	r3, #0
 800497a:	d104      	bne.n	8004986 <USB_EPStartXfer+0x93a>
 800497c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004980:	3b01      	subs	r3, #1
 8004982:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004986:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800498a:	b29b      	uxth	r3, r3
 800498c:	029b      	lsls	r3, r3, #10
 800498e:	b29b      	uxth	r3, r3
 8004990:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004994:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004998:	b29a      	uxth	r2, r3
 800499a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800499c:	801a      	strh	r2, [r3, #0]
 800499e:	e024      	b.n	80049ea <USB_EPStartXfer+0x99e>
 80049a0:	463b      	mov	r3, r7
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	785b      	ldrb	r3, [r3, #1]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d11f      	bne.n	80049ea <USB_EPStartXfer+0x99e>
 80049aa:	1d3b      	adds	r3, r7, #4
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049b2:	1d3b      	adds	r3, r7, #4
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	461a      	mov	r2, r3
 80049be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049c2:	4413      	add	r3, r2
 80049c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049c8:	463b      	mov	r3, r7
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	011a      	lsls	r2, r3, #4
 80049d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049d4:	4413      	add	r3, r2
 80049d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049e8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80049ea:	463b      	mov	r3, r7
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	891b      	ldrh	r3, [r3, #8]
 80049f0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80049f4:	463b      	mov	r3, r7
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6959      	ldr	r1, [r3, #20]
 80049fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004a04:	1d38      	adds	r0, r7, #4
 8004a06:	6800      	ldr	r0, [r0, #0]
 8004a08:	f000 fd7e 	bl	8005508 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004a0c:	463b      	mov	r3, r7
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	785b      	ldrb	r3, [r3, #1]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d122      	bne.n	8004a5c <USB_EPStartXfer+0xa10>
 8004a16:	1d3b      	adds	r3, r7, #4
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	463b      	mov	r3, r7
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4413      	add	r3, r2
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a30:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8004a34:	1d3b      	adds	r3, r7, #4
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	463b      	mov	r3, r7
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	441a      	add	r2, r3
 8004a42:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8004a46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	8013      	strh	r3, [r2, #0]
 8004a5a:	e026      	b.n	8004aaa <USB_EPStartXfer+0xa5e>
 8004a5c:	463b      	mov	r3, r7
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	785b      	ldrb	r3, [r3, #1]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d121      	bne.n	8004aaa <USB_EPStartXfer+0xa5e>
 8004a66:	1d3b      	adds	r3, r7, #4
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	463b      	mov	r3, r7
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	881b      	ldrh	r3, [r3, #0]
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a80:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8004a84:	1d3b      	adds	r3, r7, #4
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	463b      	mov	r3, r7
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	441a      	add	r2, r3
 8004a92:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004aaa:	1d3b      	adds	r3, r7, #4
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	463b      	mov	r3, r7
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	881b      	ldrh	r3, [r3, #0]
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	f107 020e 	add.w	r2, r7, #14
 8004ac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ac8:	8013      	strh	r3, [r2, #0]
 8004aca:	f107 030e 	add.w	r3, r7, #14
 8004ace:	f107 020e 	add.w	r2, r7, #14
 8004ad2:	8812      	ldrh	r2, [r2, #0]
 8004ad4:	f082 0210 	eor.w	r2, r2, #16
 8004ad8:	801a      	strh	r2, [r3, #0]
 8004ada:	f107 030e 	add.w	r3, r7, #14
 8004ade:	f107 020e 	add.w	r2, r7, #14
 8004ae2:	8812      	ldrh	r2, [r2, #0]
 8004ae4:	f082 0220 	eor.w	r2, r2, #32
 8004ae8:	801a      	strh	r2, [r3, #0]
 8004aea:	1d3b      	adds	r3, r7, #4
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	463b      	mov	r3, r7
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	441a      	add	r2, r3
 8004af8:	f107 030e 	add.w	r3, r7, #14
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	8013      	strh	r3, [r2, #0]
 8004b12:	e3b5      	b.n	8005280 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004b14:	463b      	mov	r3, r7
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	7b1b      	ldrb	r3, [r3, #12]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f040 8090 	bne.w	8004c40 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004b20:	463b      	mov	r3, r7
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699a      	ldr	r2, [r3, #24]
 8004b26:	463b      	mov	r3, r7
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d90e      	bls.n	8004b4e <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8004b30:	463b      	mov	r3, r7
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8004b3a:	463b      	mov	r3, r7
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	699a      	ldr	r2, [r3, #24]
 8004b40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b44:	1ad2      	subs	r2, r2, r3
 8004b46:	463b      	mov	r3, r7
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	619a      	str	r2, [r3, #24]
 8004b4c:	e008      	b.n	8004b60 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8004b4e:	463b      	mov	r3, r7
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8004b58:	463b      	mov	r3, r7
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004b60:	1d3b      	adds	r3, r7, #4
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b68:	1d3b      	adds	r3, r7, #4
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	461a      	mov	r2, r3
 8004b74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b78:	4413      	add	r3, r2
 8004b7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b7e:	463b      	mov	r3, r7
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	011a      	lsls	r2, r3, #4
 8004b86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d116      	bne.n	8004bca <USB_EPStartXfer+0xb7e>
 8004b9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bae:	801a      	strh	r2, [r3, #0]
 8004bb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bb4:	881b      	ldrh	r3, [r3, #0]
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bc6:	801a      	strh	r2, [r3, #0]
 8004bc8:	e32c      	b.n	8005224 <USB_EPStartXfer+0x11d8>
 8004bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bce:	2b3e      	cmp	r3, #62	; 0x3e
 8004bd0:	d818      	bhi.n	8004c04 <USB_EPStartXfer+0xbb8>
 8004bd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bd6:	085b      	lsrs	r3, r3, #1
 8004bd8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004bdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d004      	beq.n	8004bf2 <USB_EPStartXfer+0xba6>
 8004be8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004bec:	3301      	adds	r3, #1
 8004bee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004bf2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	029b      	lsls	r3, r3, #10
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c00:	801a      	strh	r2, [r3, #0]
 8004c02:	e30f      	b.n	8005224 <USB_EPStartXfer+0x11d8>
 8004c04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c08:	095b      	lsrs	r3, r3, #5
 8004c0a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c12:	f003 031f 	and.w	r3, r3, #31
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d104      	bne.n	8004c24 <USB_EPStartXfer+0xbd8>
 8004c1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004c24:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	029b      	lsls	r3, r3, #10
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c3c:	801a      	strh	r2, [r3, #0]
 8004c3e:	e2f1      	b.n	8005224 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004c40:	463b      	mov	r3, r7
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	78db      	ldrb	r3, [r3, #3]
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	f040 818f 	bne.w	8004f6a <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004c4c:	463b      	mov	r3, r7
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	785b      	ldrb	r3, [r3, #1]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d175      	bne.n	8004d42 <USB_EPStartXfer+0xcf6>
 8004c56:	1d3b      	adds	r3, r7, #4
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c5e:	1d3b      	adds	r3, r7, #4
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	461a      	mov	r2, r3
 8004c6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c6e:	4413      	add	r3, r2
 8004c70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c74:	463b      	mov	r3, r7
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	011a      	lsls	r2, r3, #4
 8004c7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c80:	4413      	add	r3, r2
 8004c82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c8a:	463b      	mov	r3, r7
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d116      	bne.n	8004cc2 <USB_EPStartXfer+0xc76>
 8004c94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ca6:	801a      	strh	r2, [r3, #0]
 8004ca8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cac:	881b      	ldrh	r3, [r3, #0]
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cbe:	801a      	strh	r2, [r3, #0]
 8004cc0:	e065      	b.n	8004d8e <USB_EPStartXfer+0xd42>
 8004cc2:	463b      	mov	r3, r7
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	2b3e      	cmp	r3, #62	; 0x3e
 8004cca:	d81a      	bhi.n	8004d02 <USB_EPStartXfer+0xcb6>
 8004ccc:	463b      	mov	r3, r7
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	085b      	lsrs	r3, r3, #1
 8004cd4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004cd8:	463b      	mov	r3, r7
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d004      	beq.n	8004cf0 <USB_EPStartXfer+0xca4>
 8004ce6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004cea:	3301      	adds	r3, #1
 8004cec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004cf0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	029b      	lsls	r3, r3, #10
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cfe:	801a      	strh	r2, [r3, #0]
 8004d00:	e045      	b.n	8004d8e <USB_EPStartXfer+0xd42>
 8004d02:	463b      	mov	r3, r7
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	095b      	lsrs	r3, r3, #5
 8004d0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d0e:	463b      	mov	r3, r7
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	f003 031f 	and.w	r3, r3, #31
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d104      	bne.n	8004d26 <USB_EPStartXfer+0xcda>
 8004d1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004d20:	3b01      	subs	r3, #1
 8004d22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	029b      	lsls	r3, r3, #10
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d3e:	801a      	strh	r2, [r3, #0]
 8004d40:	e025      	b.n	8004d8e <USB_EPStartXfer+0xd42>
 8004d42:	463b      	mov	r3, r7
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	785b      	ldrb	r3, [r3, #1]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d120      	bne.n	8004d8e <USB_EPStartXfer+0xd42>
 8004d4c:	1d3b      	adds	r3, r7, #4
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d54:	1d3b      	adds	r3, r7, #4
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	461a      	mov	r2, r3
 8004d60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d64:	4413      	add	r3, r2
 8004d66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d6a:	463b      	mov	r3, r7
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	011a      	lsls	r2, r3, #4
 8004d72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d76:	4413      	add	r3, r2
 8004d78:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d80:	463b      	mov	r3, r7
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004d8c:	801a      	strh	r2, [r3, #0]
 8004d8e:	1d3b      	adds	r3, r7, #4
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d96:	463b      	mov	r3, r7
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	785b      	ldrb	r3, [r3, #1]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d175      	bne.n	8004e8c <USB_EPStartXfer+0xe40>
 8004da0:	1d3b      	adds	r3, r7, #4
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004da8:	1d3b      	adds	r3, r7, #4
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	461a      	mov	r2, r3
 8004db4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004db8:	4413      	add	r3, r2
 8004dba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004dbe:	463b      	mov	r3, r7
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	011a      	lsls	r2, r3, #4
 8004dc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004dca:	4413      	add	r3, r2
 8004dcc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004dd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004dd4:	463b      	mov	r3, r7
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d116      	bne.n	8004e0c <USB_EPStartXfer+0xdc0>
 8004dde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004df0:	801a      	strh	r2, [r3, #0]
 8004df2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004df6:	881b      	ldrh	r3, [r3, #0]
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e08:	801a      	strh	r2, [r3, #0]
 8004e0a:	e061      	b.n	8004ed0 <USB_EPStartXfer+0xe84>
 8004e0c:	463b      	mov	r3, r7
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	2b3e      	cmp	r3, #62	; 0x3e
 8004e14:	d81a      	bhi.n	8004e4c <USB_EPStartXfer+0xe00>
 8004e16:	463b      	mov	r3, r7
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	085b      	lsrs	r3, r3, #1
 8004e1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e22:	463b      	mov	r3, r7
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d004      	beq.n	8004e3a <USB_EPStartXfer+0xdee>
 8004e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e34:	3301      	adds	r3, #1
 8004e36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	029b      	lsls	r3, r3, #10
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e48:	801a      	strh	r2, [r3, #0]
 8004e4a:	e041      	b.n	8004ed0 <USB_EPStartXfer+0xe84>
 8004e4c:	463b      	mov	r3, r7
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	095b      	lsrs	r3, r3, #5
 8004e54:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e58:	463b      	mov	r3, r7
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	f003 031f 	and.w	r3, r3, #31
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d104      	bne.n	8004e70 <USB_EPStartXfer+0xe24>
 8004e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	029b      	lsls	r3, r3, #10
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e88:	801a      	strh	r2, [r3, #0]
 8004e8a:	e021      	b.n	8004ed0 <USB_EPStartXfer+0xe84>
 8004e8c:	463b      	mov	r3, r7
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	785b      	ldrb	r3, [r3, #1]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d11c      	bne.n	8004ed0 <USB_EPStartXfer+0xe84>
 8004e96:	1d3b      	adds	r3, r7, #4
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004eac:	463b      	mov	r3, r7
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	011a      	lsls	r2, r3, #4
 8004eb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004eb8:	4413      	add	r3, r2
 8004eba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ebe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004ec2:	463b      	mov	r3, r7
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004ece:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004ed0:	463b      	mov	r3, r7
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f000 81a4 	beq.w	8005224 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004edc:	1d3b      	adds	r3, r7, #4
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	463b      	mov	r3, r7
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004ef0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004ef4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d005      	beq.n	8004f08 <USB_EPStartXfer+0xebc>
 8004efc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10d      	bne.n	8004f24 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004f08:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004f0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f040 8187 	bne.w	8005224 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004f16:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f040 8180 	bne.w	8005224 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8004f24:	1d3b      	adds	r3, r7, #4
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	463b      	mov	r3, r7
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8004f42:	1d3b      	adds	r3, r7, #4
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	463b      	mov	r3, r7
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	441a      	add	r2, r3
 8004f50:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8004f54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	8013      	strh	r3, [r2, #0]
 8004f68:	e15c      	b.n	8005224 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004f6a:	463b      	mov	r3, r7
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	78db      	ldrb	r3, [r3, #3]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	f040 8155 	bne.w	8005220 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004f76:	463b      	mov	r3, r7
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	699a      	ldr	r2, [r3, #24]
 8004f7c:	463b      	mov	r3, r7
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d90e      	bls.n	8004fa4 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8004f86:	463b      	mov	r3, r7
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8004f90:	463b      	mov	r3, r7
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699a      	ldr	r2, [r3, #24]
 8004f96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f9a:	1ad2      	subs	r2, r2, r3
 8004f9c:	463b      	mov	r3, r7
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	619a      	str	r2, [r3, #24]
 8004fa2:	e008      	b.n	8004fb6 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8004fa4:	463b      	mov	r3, r7
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8004fae:	463b      	mov	r3, r7
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004fb6:	463b      	mov	r3, r7
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	785b      	ldrb	r3, [r3, #1]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d16f      	bne.n	80050a0 <USB_EPStartXfer+0x1054>
 8004fc0:	1d3b      	adds	r3, r7, #4
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fc8:	1d3b      	adds	r3, r7, #4
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004fd8:	4413      	add	r3, r2
 8004fda:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fde:	463b      	mov	r3, r7
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	011a      	lsls	r2, r3, #4
 8004fe6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004fea:	4413      	add	r3, r2
 8004fec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ff0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d116      	bne.n	800502a <USB_EPStartXfer+0xfde>
 8004ffc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	b29b      	uxth	r3, r3
 8005004:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005008:	b29a      	uxth	r2, r3
 800500a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800500e:	801a      	strh	r2, [r3, #0]
 8005010:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	b29b      	uxth	r3, r3
 8005018:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800501c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005020:	b29a      	uxth	r2, r3
 8005022:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005026:	801a      	strh	r2, [r3, #0]
 8005028:	e05f      	b.n	80050ea <USB_EPStartXfer+0x109e>
 800502a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800502e:	2b3e      	cmp	r3, #62	; 0x3e
 8005030:	d818      	bhi.n	8005064 <USB_EPStartXfer+0x1018>
 8005032:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005036:	085b      	lsrs	r3, r3, #1
 8005038:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800503c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d004      	beq.n	8005052 <USB_EPStartXfer+0x1006>
 8005048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800504c:	3301      	adds	r3, #1
 800504e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005056:	b29b      	uxth	r3, r3
 8005058:	029b      	lsls	r3, r3, #10
 800505a:	b29a      	uxth	r2, r3
 800505c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005060:	801a      	strh	r2, [r3, #0]
 8005062:	e042      	b.n	80050ea <USB_EPStartXfer+0x109e>
 8005064:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005068:	095b      	lsrs	r3, r3, #5
 800506a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800506e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005072:	f003 031f 	and.w	r3, r3, #31
 8005076:	2b00      	cmp	r3, #0
 8005078:	d104      	bne.n	8005084 <USB_EPStartXfer+0x1038>
 800507a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800507e:	3b01      	subs	r3, #1
 8005080:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005088:	b29b      	uxth	r3, r3
 800508a:	029b      	lsls	r3, r3, #10
 800508c:	b29b      	uxth	r3, r3
 800508e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005092:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005096:	b29a      	uxth	r2, r3
 8005098:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800509c:	801a      	strh	r2, [r3, #0]
 800509e:	e024      	b.n	80050ea <USB_EPStartXfer+0x109e>
 80050a0:	463b      	mov	r3, r7
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	785b      	ldrb	r3, [r3, #1]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d11f      	bne.n	80050ea <USB_EPStartXfer+0x109e>
 80050aa:	1d3b      	adds	r3, r7, #4
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80050b2:	1d3b      	adds	r3, r7, #4
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	461a      	mov	r2, r3
 80050be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050c2:	4413      	add	r3, r2
 80050c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80050c8:	463b      	mov	r3, r7
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	011a      	lsls	r2, r3, #4
 80050d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050d4:	4413      	add	r3, r2
 80050d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80050de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050e8:	801a      	strh	r2, [r3, #0]
 80050ea:	1d3b      	adds	r3, r7, #4
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050f2:	463b      	mov	r3, r7
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	785b      	ldrb	r3, [r3, #1]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d16f      	bne.n	80051dc <USB_EPStartXfer+0x1190>
 80050fc:	1d3b      	adds	r3, r7, #4
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005104:	1d3b      	adds	r3, r7, #4
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800510c:	b29b      	uxth	r3, r3
 800510e:	461a      	mov	r2, r3
 8005110:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005114:	4413      	add	r3, r2
 8005116:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800511a:	463b      	mov	r3, r7
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	011a      	lsls	r2, r3, #4
 8005122:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005126:	4413      	add	r3, r2
 8005128:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800512c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005130:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005134:	2b00      	cmp	r3, #0
 8005136:	d116      	bne.n	8005166 <USB_EPStartXfer+0x111a>
 8005138:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800513c:	881b      	ldrh	r3, [r3, #0]
 800513e:	b29b      	uxth	r3, r3
 8005140:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005144:	b29a      	uxth	r2, r3
 8005146:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800514a:	801a      	strh	r2, [r3, #0]
 800514c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	b29b      	uxth	r3, r3
 8005154:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005158:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800515c:	b29a      	uxth	r2, r3
 800515e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005162:	801a      	strh	r2, [r3, #0]
 8005164:	e05e      	b.n	8005224 <USB_EPStartXfer+0x11d8>
 8005166:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800516a:	2b3e      	cmp	r3, #62	; 0x3e
 800516c:	d818      	bhi.n	80051a0 <USB_EPStartXfer+0x1154>
 800516e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005172:	085b      	lsrs	r3, r3, #1
 8005174:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005178:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b00      	cmp	r3, #0
 8005182:	d004      	beq.n	800518e <USB_EPStartXfer+0x1142>
 8005184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005188:	3301      	adds	r3, #1
 800518a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800518e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005192:	b29b      	uxth	r3, r3
 8005194:	029b      	lsls	r3, r3, #10
 8005196:	b29a      	uxth	r2, r3
 8005198:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800519c:	801a      	strh	r2, [r3, #0]
 800519e:	e041      	b.n	8005224 <USB_EPStartXfer+0x11d8>
 80051a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051a4:	095b      	lsrs	r3, r3, #5
 80051a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80051aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051ae:	f003 031f 	and.w	r3, r3, #31
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d104      	bne.n	80051c0 <USB_EPStartXfer+0x1174>
 80051b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051ba:	3b01      	subs	r3, #1
 80051bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80051c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	029b      	lsls	r3, r3, #10
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80051d8:	801a      	strh	r2, [r3, #0]
 80051da:	e023      	b.n	8005224 <USB_EPStartXfer+0x11d8>
 80051dc:	463b      	mov	r3, r7
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	785b      	ldrb	r3, [r3, #1]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d11e      	bne.n	8005224 <USB_EPStartXfer+0x11d8>
 80051e6:	1d3b      	adds	r3, r7, #4
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	461a      	mov	r2, r3
 80051f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80051f6:	4413      	add	r3, r2
 80051f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051fc:	463b      	mov	r3, r7
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	011a      	lsls	r2, r3, #4
 8005204:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005208:	4413      	add	r3, r2
 800520a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800520e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005212:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005216:	b29a      	uxth	r2, r3
 8005218:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800521c:	801a      	strh	r2, [r3, #0]
 800521e:	e001      	b.n	8005224 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e02e      	b.n	8005282 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005224:	1d3b      	adds	r3, r7, #4
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	463b      	mov	r3, r7
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	b29b      	uxth	r3, r3
 8005236:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800523a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005242:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005246:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800524a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800524e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005252:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005256:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800525a:	1d3b      	adds	r3, r7, #4
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	463b      	mov	r3, r7
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	441a      	add	r2, r3
 8005268:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800526c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005270:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800527c:	b29b      	uxth	r3, r3
 800527e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	785b      	ldrb	r3, [r3, #1]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d020      	beq.n	80052e0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	881b      	ldrh	r3, [r3, #0]
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052b4:	81bb      	strh	r3, [r7, #12]
 80052b6:	89bb      	ldrh	r3, [r7, #12]
 80052b8:	f083 0310 	eor.w	r3, r3, #16
 80052bc:	81bb      	strh	r3, [r7, #12]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	441a      	add	r2, r3
 80052c8:	89bb      	ldrh	r3, [r7, #12]
 80052ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052da:	b29b      	uxth	r3, r3
 80052dc:	8013      	strh	r3, [r2, #0]
 80052de:	e01f      	b.n	8005320 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f6:	81fb      	strh	r3, [r7, #14]
 80052f8:	89fb      	ldrh	r3, [r7, #14]
 80052fa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80052fe:	81fb      	strh	r3, [r7, #14]
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	441a      	add	r2, r3
 800530a:	89fb      	ldrh	r3, [r7, #14]
 800530c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800531c:	b29b      	uxth	r3, r3
 800531e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	bc80      	pop	{r7}
 800532a:	4770      	bx	lr

0800532c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	7b1b      	ldrb	r3, [r3, #12]
 800533a:	2b00      	cmp	r3, #0
 800533c:	f040 809d 	bne.w	800547a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	785b      	ldrb	r3, [r3, #1]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d04c      	beq.n	80053e2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	881b      	ldrh	r3, [r3, #0]
 8005354:	823b      	strh	r3, [r7, #16]
 8005356:	8a3b      	ldrh	r3, [r7, #16]
 8005358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535c:	2b00      	cmp	r3, #0
 800535e:	d01b      	beq.n	8005398 <USB_EPClearStall+0x6c>
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4413      	add	r3, r2
 800536a:	881b      	ldrh	r3, [r3, #0]
 800536c:	b29b      	uxth	r3, r3
 800536e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005376:	81fb      	strh	r3, [r7, #14]
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	441a      	add	r2, r3
 8005382:	89fb      	ldrh	r3, [r7, #14]
 8005384:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005388:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800538c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005390:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005394:	b29b      	uxth	r3, r3
 8005396:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	78db      	ldrb	r3, [r3, #3]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d06c      	beq.n	800547a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053b6:	81bb      	strh	r3, [r7, #12]
 80053b8:	89bb      	ldrh	r3, [r7, #12]
 80053ba:	f083 0320 	eor.w	r3, r3, #32
 80053be:	81bb      	strh	r3, [r7, #12]
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	441a      	add	r2, r3
 80053ca:	89bb      	ldrh	r3, [r7, #12]
 80053cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053dc:	b29b      	uxth	r3, r3
 80053de:	8013      	strh	r3, [r2, #0]
 80053e0:	e04b      	b.n	800547a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4413      	add	r3, r2
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	82fb      	strh	r3, [r7, #22]
 80053f0:	8afb      	ldrh	r3, [r7, #22]
 80053f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d01b      	beq.n	8005432 <USB_EPClearStall+0x106>
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	4413      	add	r3, r2
 8005404:	881b      	ldrh	r3, [r3, #0]
 8005406:	b29b      	uxth	r3, r3
 8005408:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800540c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005410:	82bb      	strh	r3, [r7, #20]
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	441a      	add	r2, r3
 800541c:	8abb      	ldrh	r3, [r7, #20]
 800541e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005426:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800542a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800542e:	b29b      	uxth	r3, r3
 8005430:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	4413      	add	r3, r2
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	b29b      	uxth	r3, r3
 8005440:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005448:	827b      	strh	r3, [r7, #18]
 800544a:	8a7b      	ldrh	r3, [r7, #18]
 800544c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005450:	827b      	strh	r3, [r7, #18]
 8005452:	8a7b      	ldrh	r3, [r7, #18]
 8005454:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005458:	827b      	strh	r3, [r7, #18]
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	441a      	add	r2, r3
 8005464:	8a7b      	ldrh	r3, [r7, #18]
 8005466:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800546a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800546e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005476:	b29b      	uxth	r3, r3
 8005478:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	371c      	adds	r7, #28
 8005480:	46bd      	mov	sp, r7
 8005482:	bc80      	pop	{r7}
 8005484:	4770      	bx	lr

08005486 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005486:	b480      	push	{r7}
 8005488:	b083      	sub	sp, #12
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	460b      	mov	r3, r1
 8005490:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005492:	78fb      	ldrb	r3, [r7, #3]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d103      	bne.n	80054a0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2280      	movs	r2, #128	; 0x80
 800549c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bc80      	pop	{r7}
 80054aa:	4770      	bx	lr

080054ac <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bc80      	pop	{r7}
 80054be:	4770      	bx	lr

080054c0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bc80      	pop	{r7}
 80054d2:	4770      	bx	lr

080054d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80054e6:	68fb      	ldr	r3, [r7, #12]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bc80      	pop	{r7}
 80054f0:	4770      	bx	lr

080054f2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b083      	sub	sp, #12
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
 80054fa:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	bc80      	pop	{r7}
 8005506:	4770      	bx	lr

08005508 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005508:	b480      	push	{r7}
 800550a:	b08d      	sub	sp, #52	; 0x34
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	4611      	mov	r1, r2
 8005514:	461a      	mov	r2, r3
 8005516:	460b      	mov	r3, r1
 8005518:	80fb      	strh	r3, [r7, #6]
 800551a:	4613      	mov	r3, r2
 800551c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800551e:	88bb      	ldrh	r3, [r7, #4]
 8005520:	3301      	adds	r3, #1
 8005522:	085b      	lsrs	r3, r3, #1
 8005524:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800552e:	88fb      	ldrh	r3, [r7, #6]
 8005530:	005a      	lsls	r2, r3, #1
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	4413      	add	r3, r2
 8005536:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800553a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800553c:	6a3b      	ldr	r3, [r7, #32]
 800553e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005540:	e01e      	b.n	8005580 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	3301      	adds	r3, #1
 800554c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	b29b      	uxth	r3, r3
 8005554:	021b      	lsls	r3, r3, #8
 8005556:	b29b      	uxth	r3, r3
 8005558:	461a      	mov	r2, r3
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	4313      	orrs	r3, r2
 800555e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	b29a      	uxth	r2, r3
 8005564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005566:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556a:	3302      	adds	r3, #2
 800556c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800556e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005570:	3302      	adds	r3, #2
 8005572:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	3301      	adds	r3, #1
 8005578:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800557a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557c:	3b01      	subs	r3, #1
 800557e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1dd      	bne.n	8005542 <USB_WritePMA+0x3a>
  }
}
 8005586:	bf00      	nop
 8005588:	3734      	adds	r7, #52	; 0x34
 800558a:	46bd      	mov	sp, r7
 800558c:	bc80      	pop	{r7}
 800558e:	4770      	bx	lr

08005590 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005590:	b480      	push	{r7}
 8005592:	b08b      	sub	sp, #44	; 0x2c
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	4611      	mov	r1, r2
 800559c:	461a      	mov	r2, r3
 800559e:	460b      	mov	r3, r1
 80055a0:	80fb      	strh	r3, [r7, #6]
 80055a2:	4613      	mov	r3, r2
 80055a4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80055a6:	88bb      	ldrh	r3, [r7, #4]
 80055a8:	085b      	lsrs	r3, r3, #1
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80055b6:	88fb      	ldrh	r3, [r7, #6]
 80055b8:	005a      	lsls	r2, r3, #1
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055c2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	627b      	str	r3, [r7, #36]	; 0x24
 80055c8:	e01b      	b.n	8005602 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	881b      	ldrh	r3, [r3, #0]
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	3302      	adds	r3, #2
 80055d6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	3301      	adds	r3, #1
 80055e4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	0a1b      	lsrs	r3, r3, #8
 80055ea:	b2da      	uxtb	r2, r3
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	3301      	adds	r3, #1
 80055f4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80055f6:	6a3b      	ldr	r3, [r7, #32]
 80055f8:	3302      	adds	r3, #2
 80055fa:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	3b01      	subs	r3, #1
 8005600:	627b      	str	r3, [r7, #36]	; 0x24
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1e0      	bne.n	80055ca <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005608:	88bb      	ldrh	r3, [r7, #4]
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	b29b      	uxth	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d007      	beq.n	8005624 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005614:	6a3b      	ldr	r3, [r7, #32]
 8005616:	881b      	ldrh	r3, [r3, #0]
 8005618:	b29b      	uxth	r3, r3
 800561a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	b2da      	uxtb	r2, r3
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	701a      	strb	r2, [r3, #0]
  }
}
 8005624:	bf00      	nop
 8005626:	372c      	adds	r7, #44	; 0x2c
 8005628:	46bd      	mov	sp, r7
 800562a:	bc80      	pop	{r7}
 800562c:	4770      	bx	lr

0800562e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b084      	sub	sp, #16
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	460b      	mov	r3, r1
 8005638:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800563a:	2300      	movs	r3, #0
 800563c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	7c1b      	ldrb	r3, [r3, #16]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d115      	bne.n	8005672 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005646:	f44f 7300 	mov.w	r3, #512	; 0x200
 800564a:	2202      	movs	r2, #2
 800564c:	2181      	movs	r1, #129	; 0x81
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f001 fe81 	bl	8007356 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800565a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800565e:	2202      	movs	r2, #2
 8005660:	2101      	movs	r1, #1
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f001 fe77 	bl	8007356 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005670:	e012      	b.n	8005698 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005672:	2340      	movs	r3, #64	; 0x40
 8005674:	2202      	movs	r2, #2
 8005676:	2181      	movs	r1, #129	; 0x81
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f001 fe6c 	bl	8007356 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005684:	2340      	movs	r3, #64	; 0x40
 8005686:	2202      	movs	r2, #2
 8005688:	2101      	movs	r1, #1
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f001 fe63 	bl	8007356 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005698:	2308      	movs	r3, #8
 800569a:	2203      	movs	r2, #3
 800569c:	2182      	movs	r1, #130	; 0x82
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f001 fe59 	bl	8007356 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80056aa:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80056ae:	f001 ff79 	bl	80075a4 <USBD_static_malloc>
 80056b2:	4602      	mov	r2, r0
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d102      	bne.n	80056ca <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80056c4:	2301      	movs	r3, #1
 80056c6:	73fb      	strb	r3, [r7, #15]
 80056c8:	e026      	b.n	8005718 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056d0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	2200      	movs	r2, #0
 80056e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	7c1b      	ldrb	r3, [r3, #16]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d109      	bne.n	8005708 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056fe:	2101      	movs	r1, #1
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f001 ff19 	bl	8007538 <USBD_LL_PrepareReceive>
 8005706:	e007      	b.n	8005718 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800570e:	2340      	movs	r3, #64	; 0x40
 8005710:	2101      	movs	r1, #1
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f001 ff10 	bl	8007538 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005718:	7bfb      	ldrb	r3, [r7, #15]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005722:	b580      	push	{r7, lr}
 8005724:	b084      	sub	sp, #16
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
 800572a:	460b      	mov	r3, r1
 800572c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005732:	2181      	movs	r1, #129	; 0x81
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f001 fe34 	bl	80073a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005740:	2101      	movs	r1, #1
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f001 fe2d 	bl	80073a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005750:	2182      	movs	r1, #130	; 0x82
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f001 fe25 	bl	80073a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00e      	beq.n	8005786 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005778:	4618      	mov	r0, r3
 800577a:	f001 ff1f 	bl	80075bc <USBD_static_free>
    pdev->pClassData = NULL;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005786:	7bfb      	ldrb	r3, [r7, #15]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057a0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80057aa:	2300      	movs	r3, #0
 80057ac:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d039      	beq.n	800582e <USBD_CDC_Setup+0x9e>
 80057ba:	2b20      	cmp	r3, #32
 80057bc:	d17c      	bne.n	80058b8 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	88db      	ldrh	r3, [r3, #6]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d029      	beq.n	800581a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	b25b      	sxtb	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	da11      	bge.n	80057f4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80057dc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80057de:	683a      	ldr	r2, [r7, #0]
 80057e0:	88d2      	ldrh	r2, [r2, #6]
 80057e2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80057e4:	6939      	ldr	r1, [r7, #16]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	88db      	ldrh	r3, [r3, #6]
 80057ea:	461a      	mov	r2, r3
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f001 f9f9 	bl	8006be4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80057f2:	e068      	b.n	80058c6 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	785a      	ldrb	r2, [r3, #1]
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	88db      	ldrh	r3, [r3, #6]
 8005802:	b2da      	uxtb	r2, r3
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800580a:	6939      	ldr	r1, [r7, #16]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	88db      	ldrh	r3, [r3, #6]
 8005810:	461a      	mov	r2, r3
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f001 fa14 	bl	8006c40 <USBD_CtlPrepareRx>
      break;
 8005818:	e055      	b.n	80058c6 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	7850      	ldrb	r0, [r2, #1]
 8005826:	2200      	movs	r2, #0
 8005828:	6839      	ldr	r1, [r7, #0]
 800582a:	4798      	blx	r3
      break;
 800582c:	e04b      	b.n	80058c6 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	785b      	ldrb	r3, [r3, #1]
 8005832:	2b0a      	cmp	r3, #10
 8005834:	d017      	beq.n	8005866 <USBD_CDC_Setup+0xd6>
 8005836:	2b0b      	cmp	r3, #11
 8005838:	d029      	beq.n	800588e <USBD_CDC_Setup+0xfe>
 800583a:	2b00      	cmp	r3, #0
 800583c:	d133      	bne.n	80058a6 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005844:	2b03      	cmp	r3, #3
 8005846:	d107      	bne.n	8005858 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005848:	f107 030c 	add.w	r3, r7, #12
 800584c:	2202      	movs	r2, #2
 800584e:	4619      	mov	r1, r3
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f001 f9c7 	bl	8006be4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005856:	e02e      	b.n	80058b6 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005858:	6839      	ldr	r1, [r7, #0]
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f001 f958 	bl	8006b10 <USBD_CtlError>
            ret = USBD_FAIL;
 8005860:	2302      	movs	r3, #2
 8005862:	75fb      	strb	r3, [r7, #23]
          break;
 8005864:	e027      	b.n	80058b6 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800586c:	2b03      	cmp	r3, #3
 800586e:	d107      	bne.n	8005880 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005870:	f107 030f 	add.w	r3, r7, #15
 8005874:	2201      	movs	r2, #1
 8005876:	4619      	mov	r1, r3
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f001 f9b3 	bl	8006be4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800587e:	e01a      	b.n	80058b6 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005880:	6839      	ldr	r1, [r7, #0]
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f001 f944 	bl	8006b10 <USBD_CtlError>
            ret = USBD_FAIL;
 8005888:	2302      	movs	r3, #2
 800588a:	75fb      	strb	r3, [r7, #23]
          break;
 800588c:	e013      	b.n	80058b6 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005894:	2b03      	cmp	r3, #3
 8005896:	d00d      	beq.n	80058b4 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8005898:	6839      	ldr	r1, [r7, #0]
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f001 f938 	bl	8006b10 <USBD_CtlError>
            ret = USBD_FAIL;
 80058a0:	2302      	movs	r3, #2
 80058a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80058a4:	e006      	b.n	80058b4 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80058a6:	6839      	ldr	r1, [r7, #0]
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f001 f931 	bl	8006b10 <USBD_CtlError>
          ret = USBD_FAIL;
 80058ae:	2302      	movs	r3, #2
 80058b0:	75fb      	strb	r3, [r7, #23]
          break;
 80058b2:	e000      	b.n	80058b6 <USBD_CDC_Setup+0x126>
          break;
 80058b4:	bf00      	nop
      }
      break;
 80058b6:	e006      	b.n	80058c6 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80058b8:	6839      	ldr	r1, [r7, #0]
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f001 f928 	bl	8006b10 <USBD_CtlError>
      ret = USBD_FAIL;
 80058c0:	2302      	movs	r3, #2
 80058c2:	75fb      	strb	r3, [r7, #23]
      break;
 80058c4:	bf00      	nop
  }

  return ret;
 80058c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3718      	adds	r7, #24
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	460b      	mov	r3, r1
 80058da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058e2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058ea:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d03a      	beq.n	800596c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80058f6:	78fa      	ldrb	r2, [r7, #3]
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	4613      	mov	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	440b      	add	r3, r1
 8005904:	331c      	adds	r3, #28
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d029      	beq.n	8005960 <USBD_CDC_DataIn+0x90>
 800590c:	78fa      	ldrb	r2, [r7, #3]
 800590e:	6879      	ldr	r1, [r7, #4]
 8005910:	4613      	mov	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	440b      	add	r3, r1
 800591a:	331c      	adds	r3, #28
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	78f9      	ldrb	r1, [r7, #3]
 8005920:	68b8      	ldr	r0, [r7, #8]
 8005922:	460b      	mov	r3, r1
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	440b      	add	r3, r1
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	4403      	add	r3, r0
 800592c:	3338      	adds	r3, #56	; 0x38
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	fbb2 f1f3 	udiv	r1, r2, r3
 8005934:	fb03 f301 	mul.w	r3, r3, r1
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d110      	bne.n	8005960 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800593e:	78fa      	ldrb	r2, [r7, #3]
 8005940:	6879      	ldr	r1, [r7, #4]
 8005942:	4613      	mov	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	440b      	add	r3, r1
 800594c:	331c      	adds	r3, #28
 800594e:	2200      	movs	r2, #0
 8005950:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005952:	78f9      	ldrb	r1, [r7, #3]
 8005954:	2300      	movs	r3, #0
 8005956:	2200      	movs	r2, #0
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f001 fdca 	bl	80074f2 <USBD_LL_Transmit>
 800595e:	e003      	b.n	8005968 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005968:	2300      	movs	r3, #0
 800596a:	e000      	b.n	800596e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800596c:	2302      	movs	r3, #2
  }
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b084      	sub	sp, #16
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
 800597e:	460b      	mov	r3, r1
 8005980:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005988:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800598a:	78fb      	ldrb	r3, [r7, #3]
 800598c:	4619      	mov	r1, r3
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f001 fdf5 	bl	800757e <USBD_LL_GetRxDataSize>
 8005994:	4602      	mov	r2, r0
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00d      	beq.n	80059c2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80059ba:	4611      	mov	r1, r2
 80059bc:	4798      	blx	r3

    return USBD_OK;
 80059be:	2300      	movs	r3, #0
 80059c0:	e000      	b.n	80059c4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80059c2:	2302      	movs	r3, #2
  }
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059da:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d015      	beq.n	8005a12 <USBD_CDC_EP0_RxReady+0x46>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80059ec:	2bff      	cmp	r3, #255	; 0xff
 80059ee:	d010      	beq.n	8005a12 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80059fe:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005a06:	b292      	uxth	r2, r2
 8005a08:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	22ff      	movs	r2, #255	; 0xff
 8005a0e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2243      	movs	r2, #67	; 0x43
 8005a28:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005a2a:	4b03      	ldr	r3, [pc, #12]	; (8005a38 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bc80      	pop	{r7}
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	20000098 	.word	0x20000098

08005a3c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2243      	movs	r2, #67	; 0x43
 8005a48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005a4a:	4b03      	ldr	r3, [pc, #12]	; (8005a58 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bc80      	pop	{r7}
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	20000054 	.word	0x20000054

08005a5c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2243      	movs	r2, #67	; 0x43
 8005a68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005a6a:	4b03      	ldr	r3, [pc, #12]	; (8005a78 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bc80      	pop	{r7}
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	200000dc 	.word	0x200000dc

08005a7c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	220a      	movs	r2, #10
 8005a88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005a8a:	4b03      	ldr	r3, [pc, #12]	; (8005a98 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bc80      	pop	{r7}
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	20000010 	.word	0x20000010

08005a9c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d005      	beq.n	8005abc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	683a      	ldr	r2, [r7, #0]
 8005ab4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3714      	adds	r7, #20
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bc80      	pop	{r7}
 8005ac6:	4770      	bx	lr

08005ac8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b087      	sub	sp, #28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005adc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005ae6:	88fa      	ldrh	r2, [r7, #6]
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	371c      	adds	r7, #28
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bc80      	pop	{r7}
 8005af8:	4770      	bx	lr

08005afa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b085      	sub	sp, #20
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b0a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bc80      	pop	{r7}
 8005b1e:	4770      	bx	lr

08005b20 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b2e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d01c      	beq.n	8005b74 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d115      	bne.n	8005b70 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	2181      	movs	r1, #129	; 0x81
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f001 fcc3 	bl	80074f2 <USBD_LL_Transmit>

      return USBD_OK;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	e002      	b.n	8005b76 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e000      	b.n	8005b76 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005b74:	2302      	movs	r3, #2
  }
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b084      	sub	sp, #16
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b8c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d017      	beq.n	8005bc8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	7c1b      	ldrb	r3, [r3, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d109      	bne.n	8005bb4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ba6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005baa:	2101      	movs	r1, #1
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f001 fcc3 	bl	8007538 <USBD_LL_PrepareReceive>
 8005bb2:	e007      	b.n	8005bc4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005bba:	2340      	movs	r3, #64	; 0x40
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f001 fcba 	bl	8007538 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	e000      	b.n	8005bca <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005bc8:	2302      	movs	r3, #2
  }
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b084      	sub	sp, #16
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	60f8      	str	r0, [r7, #12]
 8005bda:	60b9      	str	r1, [r7, #8]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d101      	bne.n	8005bea <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005be6:	2302      	movs	r3, #2
 8005be8:	e01a      	b.n	8005c20 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	79fa      	ldrb	r2, [r7, #7]
 8005c16:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f001 fb27 	bl	800726c <USBD_LL_Init>

  return USBD_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005c32:	2300      	movs	r3, #0
 8005c34:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d006      	beq.n	8005c4a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005c44:	2300      	movs	r3, #0
 8005c46:	73fb      	strb	r3, [r7, #15]
 8005c48:	e001      	b.n	8005c4e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005c4a:	2302      	movs	r3, #2
 8005c4c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bc80      	pop	{r7}
 8005c58:	4770      	bx	lr

08005c5a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b082      	sub	sp, #8
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f001 fb5c 	bl	8007320 <USBD_LL_Start>

  return USBD_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3708      	adds	r7, #8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bc80      	pop	{r7}
 8005c84:	4770      	bx	lr

08005c86 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b084      	sub	sp, #16
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
 8005c8e:	460b      	mov	r3, r1
 8005c90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005c92:	2302      	movs	r3, #2
 8005c94:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00c      	beq.n	8005cba <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	78fa      	ldrb	r2, [r7, #3]
 8005caa:	4611      	mov	r1, r2
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	4798      	blx	r3
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	460b      	mov	r3, r1
 8005cce:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	78fa      	ldrb	r2, [r7, #3]
 8005cda:	4611      	mov	r1, r2
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	4798      	blx	r3

  return USBD_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3708      	adds	r7, #8
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b082      	sub	sp, #8
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
 8005cf2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005cfa:	6839      	ldr	r1, [r7, #0]
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 fecb 	bl	8006a98 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005d10:	461a      	mov	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005d1e:	f003 031f 	and.w	r3, r3, #31
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d00c      	beq.n	8005d40 <USBD_LL_SetupStage+0x56>
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d302      	bcc.n	8005d30 <USBD_LL_SetupStage+0x46>
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d010      	beq.n	8005d50 <USBD_LL_SetupStage+0x66>
 8005d2e:	e017      	b.n	8005d60 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005d36:	4619      	mov	r1, r3
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f9cb 	bl	80060d4 <USBD_StdDevReq>
      break;
 8005d3e:	e01a      	b.n	8005d76 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005d46:	4619      	mov	r1, r3
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fa2d 	bl	80061a8 <USBD_StdItfReq>
      break;
 8005d4e:	e012      	b.n	8005d76 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005d56:	4619      	mov	r1, r3
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 fa6b 	bl	8006234 <USBD_StdEPReq>
      break;
 8005d5e:	e00a      	b.n	8005d76 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005d66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f001 fb36 	bl	80073e0 <USBD_LL_StallEP>
      break;
 8005d74:	bf00      	nop
  }

  return USBD_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	460b      	mov	r3, r1
 8005d8a:	607a      	str	r2, [r7, #4]
 8005d8c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005d8e:	7afb      	ldrb	r3, [r7, #11]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d14b      	bne.n	8005e2c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005d9a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005da2:	2b03      	cmp	r3, #3
 8005da4:	d134      	bne.n	8005e10 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d919      	bls.n	8005de6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	68da      	ldr	r2, [r3, #12]
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	1ad2      	subs	r2, r2, r3
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	68da      	ldr	r2, [r3, #12]
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d203      	bcs.n	8005dd4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	e002      	b.n	8005dda <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	461a      	mov	r2, r3
 8005ddc:	6879      	ldr	r1, [r7, #4]
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f000 ff4c 	bl	8006c7c <USBD_CtlContinueRx>
 8005de4:	e038      	b.n	8005e58 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00a      	beq.n	8005e08 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005df8:	2b03      	cmp	r3, #3
 8005dfa:	d105      	bne.n	8005e08 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f000 ff49 	bl	8006ca0 <USBD_CtlSendStatus>
 8005e0e:	e023      	b.n	8005e58 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e16:	2b05      	cmp	r3, #5
 8005e18:	d11e      	bne.n	8005e58 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005e22:	2100      	movs	r1, #0
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f001 fadb 	bl	80073e0 <USBD_LL_StallEP>
 8005e2a:	e015      	b.n	8005e58 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00d      	beq.n	8005e54 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	d108      	bne.n	8005e54 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	7afa      	ldrb	r2, [r7, #11]
 8005e4c:	4611      	mov	r1, r2
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	4798      	blx	r3
 8005e52:	e001      	b.n	8005e58 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005e54:	2302      	movs	r3, #2
 8005e56:	e000      	b.n	8005e5a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3718      	adds	r7, #24
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b086      	sub	sp, #24
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	60f8      	str	r0, [r7, #12]
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	607a      	str	r2, [r7, #4]
 8005e6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005e70:	7afb      	ldrb	r3, [r7, #11]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d17f      	bne.n	8005f76 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	3314      	adds	r3, #20
 8005e7a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d15c      	bne.n	8005f40 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	68da      	ldr	r2, [r3, #12]
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d915      	bls.n	8005ebe <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	68da      	ldr	r2, [r3, #12]
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	1ad2      	subs	r2, r2, r3
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	6879      	ldr	r1, [r7, #4]
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f000 feb6 	bl	8006c1c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f001 fb3e 	bl	8007538 <USBD_LL_PrepareReceive>
 8005ebc:	e04e      	b.n	8005f5c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	6912      	ldr	r2, [r2, #16]
 8005ec6:	fbb3 f1f2 	udiv	r1, r3, r2
 8005eca:	fb02 f201 	mul.w	r2, r2, r1
 8005ece:	1a9b      	subs	r3, r3, r2
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d11c      	bne.n	8005f0e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d316      	bcc.n	8005f0e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	689a      	ldr	r2, [r3, #8]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d20f      	bcs.n	8005f0e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005eee:	2200      	movs	r2, #0
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 fe92 	bl	8006c1c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f00:	2300      	movs	r3, #0
 8005f02:	2200      	movs	r2, #0
 8005f04:	2100      	movs	r1, #0
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f001 fb16 	bl	8007538 <USBD_LL_PrepareReceive>
 8005f0c:	e026      	b.n	8005f5c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00a      	beq.n	8005f30 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d105      	bne.n	8005f30 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005f30:	2180      	movs	r1, #128	; 0x80
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f001 fa54 	bl	80073e0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f000 fec4 	bl	8006cc6 <USBD_CtlReceiveStatus>
 8005f3e:	e00d      	b.n	8005f5c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	d004      	beq.n	8005f54 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d103      	bne.n	8005f5c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005f54:	2180      	movs	r1, #128	; 0x80
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f001 fa42 	bl	80073e0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d11d      	bne.n	8005fa2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f7ff fe83 	bl	8005c72 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005f74:	e015      	b.n	8005fa2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00d      	beq.n	8005f9e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005f88:	2b03      	cmp	r3, #3
 8005f8a:	d108      	bne.n	8005f9e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f92:	695b      	ldr	r3, [r3, #20]
 8005f94:	7afa      	ldrb	r2, [r7, #11]
 8005f96:	4611      	mov	r1, r2
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	4798      	blx	r3
 8005f9c:	e001      	b.n	8005fa2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005f9e:	2302      	movs	r3, #2
 8005fa0:	e000      	b.n	8005fa4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3718      	adds	r7, #24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005fb4:	2340      	movs	r3, #64	; 0x40
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	2100      	movs	r1, #0
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f001 f9cb 	bl	8007356 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2240      	movs	r2, #64	; 0x40
 8005fcc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005fd0:	2340      	movs	r3, #64	; 0x40
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	2180      	movs	r1, #128	; 0x80
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f001 f9bd 	bl	8007356 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2240      	movs	r2, #64	; 0x40
 8005fe6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800600c:	2b00      	cmp	r3, #0
 800600e:	d009      	beq.n	8006024 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	6852      	ldr	r2, [r2, #4]
 800601c:	b2d2      	uxtb	r2, r2
 800601e:	4611      	mov	r1, r2
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	4798      	blx	r3
  }

  return USBD_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800602e:	b480      	push	{r7}
 8006030:	b083      	sub	sp, #12
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	460b      	mov	r3, r1
 8006038:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	78fa      	ldrb	r2, [r7, #3]
 800603e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	bc80      	pop	{r7}
 800604a:	4770      	bx	lr

0800604c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2204      	movs	r2, #4
 8006064:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	bc80      	pop	{r7}
 8006072:	4770      	bx	lr

08006074 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006082:	2b04      	cmp	r3, #4
 8006084:	d105      	bne.n	8006092 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	bc80      	pop	{r7}
 800609c:	4770      	bx	lr

0800609e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b082      	sub	sp, #8
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ac:	2b03      	cmp	r3, #3
 80060ae:	d10b      	bne.n	80060c8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060b6:	69db      	ldr	r3, [r3, #28]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d005      	beq.n	80060c8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060c2:	69db      	ldr	r3, [r3, #28]
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
	...

080060d4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80060de:	2300      	movs	r3, #0
 80060e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060ea:	2b20      	cmp	r3, #32
 80060ec:	d004      	beq.n	80060f8 <USBD_StdDevReq+0x24>
 80060ee:	2b40      	cmp	r3, #64	; 0x40
 80060f0:	d002      	beq.n	80060f8 <USBD_StdDevReq+0x24>
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d008      	beq.n	8006108 <USBD_StdDevReq+0x34>
 80060f6:	e04c      	b.n	8006192 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	6839      	ldr	r1, [r7, #0]
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	4798      	blx	r3
      break;
 8006106:	e049      	b.n	800619c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	785b      	ldrb	r3, [r3, #1]
 800610c:	2b09      	cmp	r3, #9
 800610e:	d83a      	bhi.n	8006186 <USBD_StdDevReq+0xb2>
 8006110:	a201      	add	r2, pc, #4	; (adr r2, 8006118 <USBD_StdDevReq+0x44>)
 8006112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006116:	bf00      	nop
 8006118:	08006169 	.word	0x08006169
 800611c:	0800617d 	.word	0x0800617d
 8006120:	08006187 	.word	0x08006187
 8006124:	08006173 	.word	0x08006173
 8006128:	08006187 	.word	0x08006187
 800612c:	0800614b 	.word	0x0800614b
 8006130:	08006141 	.word	0x08006141
 8006134:	08006187 	.word	0x08006187
 8006138:	0800615f 	.word	0x0800615f
 800613c:	08006155 	.word	0x08006155
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006140:	6839      	ldr	r1, [r7, #0]
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f9d4 	bl	80064f0 <USBD_GetDescriptor>
          break;
 8006148:	e022      	b.n	8006190 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800614a:	6839      	ldr	r1, [r7, #0]
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 fb37 	bl	80067c0 <USBD_SetAddress>
          break;
 8006152:	e01d      	b.n	8006190 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006154:	6839      	ldr	r1, [r7, #0]
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fb74 	bl	8006844 <USBD_SetConfig>
          break;
 800615c:	e018      	b.n	8006190 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800615e:	6839      	ldr	r1, [r7, #0]
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 fbfd 	bl	8006960 <USBD_GetConfig>
          break;
 8006166:	e013      	b.n	8006190 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006168:	6839      	ldr	r1, [r7, #0]
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fc2c 	bl	80069c8 <USBD_GetStatus>
          break;
 8006170:	e00e      	b.n	8006190 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006172:	6839      	ldr	r1, [r7, #0]
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fc5a 	bl	8006a2e <USBD_SetFeature>
          break;
 800617a:	e009      	b.n	8006190 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800617c:	6839      	ldr	r1, [r7, #0]
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fc69 	bl	8006a56 <USBD_ClrFeature>
          break;
 8006184:	e004      	b.n	8006190 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006186:	6839      	ldr	r1, [r7, #0]
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 fcc1 	bl	8006b10 <USBD_CtlError>
          break;
 800618e:	bf00      	nop
      }
      break;
 8006190:	e004      	b.n	800619c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006192:	6839      	ldr	r1, [r7, #0]
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 fcbb 	bl	8006b10 <USBD_CtlError>
      break;
 800619a:	bf00      	nop
  }

  return ret;
 800619c:	7bfb      	ldrb	r3, [r7, #15]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop

080061a8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061be:	2b20      	cmp	r3, #32
 80061c0:	d003      	beq.n	80061ca <USBD_StdItfReq+0x22>
 80061c2:	2b40      	cmp	r3, #64	; 0x40
 80061c4:	d001      	beq.n	80061ca <USBD_StdItfReq+0x22>
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d12a      	bne.n	8006220 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061d0:	3b01      	subs	r3, #1
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d81d      	bhi.n	8006212 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	889b      	ldrh	r3, [r3, #4]
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d813      	bhi.n	8006208 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	6839      	ldr	r1, [r7, #0]
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	4798      	blx	r3
 80061ee:	4603      	mov	r3, r0
 80061f0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	88db      	ldrh	r3, [r3, #6]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d110      	bne.n	800621c <USBD_StdItfReq+0x74>
 80061fa:	7bfb      	ldrb	r3, [r7, #15]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10d      	bne.n	800621c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 fd4d 	bl	8006ca0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006206:	e009      	b.n	800621c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006208:	6839      	ldr	r1, [r7, #0]
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 fc80 	bl	8006b10 <USBD_CtlError>
          break;
 8006210:	e004      	b.n	800621c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006212:	6839      	ldr	r1, [r7, #0]
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 fc7b 	bl	8006b10 <USBD_CtlError>
          break;
 800621a:	e000      	b.n	800621e <USBD_StdItfReq+0x76>
          break;
 800621c:	bf00      	nop
      }
      break;
 800621e:	e004      	b.n	800622a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006220:	6839      	ldr	r1, [r7, #0]
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fc74 	bl	8006b10 <USBD_CtlError>
      break;
 8006228:	bf00      	nop
  }

  return USBD_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800623e:	2300      	movs	r3, #0
 8006240:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	889b      	ldrh	r3, [r3, #4]
 8006246:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006250:	2b20      	cmp	r3, #32
 8006252:	d004      	beq.n	800625e <USBD_StdEPReq+0x2a>
 8006254:	2b40      	cmp	r3, #64	; 0x40
 8006256:	d002      	beq.n	800625e <USBD_StdEPReq+0x2a>
 8006258:	2b00      	cmp	r3, #0
 800625a:	d008      	beq.n	800626e <USBD_StdEPReq+0x3a>
 800625c:	e13d      	b.n	80064da <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	6839      	ldr	r1, [r7, #0]
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	4798      	blx	r3
      break;
 800626c:	e13a      	b.n	80064e4 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006276:	2b20      	cmp	r3, #32
 8006278:	d10a      	bne.n	8006290 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	6839      	ldr	r1, [r7, #0]
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	4798      	blx	r3
 8006288:	4603      	mov	r3, r0
 800628a:	73fb      	strb	r3, [r7, #15]

        return ret;
 800628c:	7bfb      	ldrb	r3, [r7, #15]
 800628e:	e12a      	b.n	80064e6 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	785b      	ldrb	r3, [r3, #1]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d03e      	beq.n	8006316 <USBD_StdEPReq+0xe2>
 8006298:	2b03      	cmp	r3, #3
 800629a:	d002      	beq.n	80062a2 <USBD_StdEPReq+0x6e>
 800629c:	2b00      	cmp	r3, #0
 800629e:	d070      	beq.n	8006382 <USBD_StdEPReq+0x14e>
 80062a0:	e115      	b.n	80064ce <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d002      	beq.n	80062b2 <USBD_StdEPReq+0x7e>
 80062ac:	2b03      	cmp	r3, #3
 80062ae:	d015      	beq.n	80062dc <USBD_StdEPReq+0xa8>
 80062b0:	e02b      	b.n	800630a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062b2:	7bbb      	ldrb	r3, [r7, #14]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00c      	beq.n	80062d2 <USBD_StdEPReq+0x9e>
 80062b8:	7bbb      	ldrb	r3, [r7, #14]
 80062ba:	2b80      	cmp	r3, #128	; 0x80
 80062bc:	d009      	beq.n	80062d2 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80062be:	7bbb      	ldrb	r3, [r7, #14]
 80062c0:	4619      	mov	r1, r3
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f001 f88c 	bl	80073e0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80062c8:	2180      	movs	r1, #128	; 0x80
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f001 f888 	bl	80073e0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80062d0:	e020      	b.n	8006314 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80062d2:	6839      	ldr	r1, [r7, #0]
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 fc1b 	bl	8006b10 <USBD_CtlError>
              break;
 80062da:	e01b      	b.n	8006314 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	885b      	ldrh	r3, [r3, #2]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10e      	bne.n	8006302 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80062e4:	7bbb      	ldrb	r3, [r7, #14]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00b      	beq.n	8006302 <USBD_StdEPReq+0xce>
 80062ea:	7bbb      	ldrb	r3, [r7, #14]
 80062ec:	2b80      	cmp	r3, #128	; 0x80
 80062ee:	d008      	beq.n	8006302 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	88db      	ldrh	r3, [r3, #6]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d104      	bne.n	8006302 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80062f8:	7bbb      	ldrb	r3, [r7, #14]
 80062fa:	4619      	mov	r1, r3
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f001 f86f 	bl	80073e0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 fccc 	bl	8006ca0 <USBD_CtlSendStatus>

              break;
 8006308:	e004      	b.n	8006314 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800630a:	6839      	ldr	r1, [r7, #0]
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 fbff 	bl	8006b10 <USBD_CtlError>
              break;
 8006312:	bf00      	nop
          }
          break;
 8006314:	e0e0      	b.n	80064d8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800631c:	2b02      	cmp	r3, #2
 800631e:	d002      	beq.n	8006326 <USBD_StdEPReq+0xf2>
 8006320:	2b03      	cmp	r3, #3
 8006322:	d015      	beq.n	8006350 <USBD_StdEPReq+0x11c>
 8006324:	e026      	b.n	8006374 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006326:	7bbb      	ldrb	r3, [r7, #14]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00c      	beq.n	8006346 <USBD_StdEPReq+0x112>
 800632c:	7bbb      	ldrb	r3, [r7, #14]
 800632e:	2b80      	cmp	r3, #128	; 0x80
 8006330:	d009      	beq.n	8006346 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006332:	7bbb      	ldrb	r3, [r7, #14]
 8006334:	4619      	mov	r1, r3
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f001 f852 	bl	80073e0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800633c:	2180      	movs	r1, #128	; 0x80
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f001 f84e 	bl	80073e0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006344:	e01c      	b.n	8006380 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006346:	6839      	ldr	r1, [r7, #0]
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fbe1 	bl	8006b10 <USBD_CtlError>
              break;
 800634e:	e017      	b.n	8006380 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	885b      	ldrh	r3, [r3, #2]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d112      	bne.n	800637e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006358:	7bbb      	ldrb	r3, [r7, #14]
 800635a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800635e:	2b00      	cmp	r3, #0
 8006360:	d004      	beq.n	800636c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006362:	7bbb      	ldrb	r3, [r7, #14]
 8006364:	4619      	mov	r1, r3
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f001 f859 	bl	800741e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 fc97 	bl	8006ca0 <USBD_CtlSendStatus>
              }
              break;
 8006372:	e004      	b.n	800637e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006374:	6839      	ldr	r1, [r7, #0]
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 fbca 	bl	8006b10 <USBD_CtlError>
              break;
 800637c:	e000      	b.n	8006380 <USBD_StdEPReq+0x14c>
              break;
 800637e:	bf00      	nop
          }
          break;
 8006380:	e0aa      	b.n	80064d8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006388:	2b02      	cmp	r3, #2
 800638a:	d002      	beq.n	8006392 <USBD_StdEPReq+0x15e>
 800638c:	2b03      	cmp	r3, #3
 800638e:	d032      	beq.n	80063f6 <USBD_StdEPReq+0x1c2>
 8006390:	e097      	b.n	80064c2 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006392:	7bbb      	ldrb	r3, [r7, #14]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d007      	beq.n	80063a8 <USBD_StdEPReq+0x174>
 8006398:	7bbb      	ldrb	r3, [r7, #14]
 800639a:	2b80      	cmp	r3, #128	; 0x80
 800639c:	d004      	beq.n	80063a8 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800639e:	6839      	ldr	r1, [r7, #0]
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 fbb5 	bl	8006b10 <USBD_CtlError>
                break;
 80063a6:	e091      	b.n	80064cc <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	da0b      	bge.n	80063c8 <USBD_StdEPReq+0x194>
 80063b0:	7bbb      	ldrb	r3, [r7, #14]
 80063b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063b6:	4613      	mov	r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4413      	add	r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	3310      	adds	r3, #16
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	4413      	add	r3, r2
 80063c4:	3304      	adds	r3, #4
 80063c6:	e00b      	b.n	80063e0 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80063c8:	7bbb      	ldrb	r3, [r7, #14]
 80063ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063ce:	4613      	mov	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4413      	add	r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	4413      	add	r3, r2
 80063de:	3304      	adds	r3, #4
 80063e0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	2200      	movs	r2, #0
 80063e6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	2202      	movs	r2, #2
 80063ec:	4619      	mov	r1, r3
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fbf8 	bl	8006be4 <USBD_CtlSendData>
              break;
 80063f4:	e06a      	b.n	80064cc <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80063f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	da11      	bge.n	8006422 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80063fe:	7bbb      	ldrb	r3, [r7, #14]
 8006400:	f003 020f 	and.w	r2, r3, #15
 8006404:	6879      	ldr	r1, [r7, #4]
 8006406:	4613      	mov	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	4413      	add	r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	440b      	add	r3, r1
 8006410:	3318      	adds	r3, #24
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d117      	bne.n	8006448 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006418:	6839      	ldr	r1, [r7, #0]
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 fb78 	bl	8006b10 <USBD_CtlError>
                  break;
 8006420:	e054      	b.n	80064cc <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006422:	7bbb      	ldrb	r3, [r7, #14]
 8006424:	f003 020f 	and.w	r2, r3, #15
 8006428:	6879      	ldr	r1, [r7, #4]
 800642a:	4613      	mov	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	440b      	add	r3, r1
 8006434:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d104      	bne.n	8006448 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800643e:	6839      	ldr	r1, [r7, #0]
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fb65 	bl	8006b10 <USBD_CtlError>
                  break;
 8006446:	e041      	b.n	80064cc <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006448:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800644c:	2b00      	cmp	r3, #0
 800644e:	da0b      	bge.n	8006468 <USBD_StdEPReq+0x234>
 8006450:	7bbb      	ldrb	r3, [r7, #14]
 8006452:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006456:	4613      	mov	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	3310      	adds	r3, #16
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	4413      	add	r3, r2
 8006464:	3304      	adds	r3, #4
 8006466:	e00b      	b.n	8006480 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006468:	7bbb      	ldrb	r3, [r7, #14]
 800646a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800646e:	4613      	mov	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	4413      	add	r3, r2
 800647e:	3304      	adds	r3, #4
 8006480:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006482:	7bbb      	ldrb	r3, [r7, #14]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d002      	beq.n	800648e <USBD_StdEPReq+0x25a>
 8006488:	7bbb      	ldrb	r3, [r7, #14]
 800648a:	2b80      	cmp	r3, #128	; 0x80
 800648c:	d103      	bne.n	8006496 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2200      	movs	r2, #0
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	e00e      	b.n	80064b4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006496:	7bbb      	ldrb	r3, [r7, #14]
 8006498:	4619      	mov	r1, r3
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 ffde 	bl	800745c <USBD_LL_IsStallEP>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	2201      	movs	r2, #1
 80064aa:	601a      	str	r2, [r3, #0]
 80064ac:	e002      	b.n	80064b4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	2200      	movs	r2, #0
 80064b2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	2202      	movs	r2, #2
 80064b8:	4619      	mov	r1, r3
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fb92 	bl	8006be4 <USBD_CtlSendData>
              break;
 80064c0:	e004      	b.n	80064cc <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80064c2:	6839      	ldr	r1, [r7, #0]
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fb23 	bl	8006b10 <USBD_CtlError>
              break;
 80064ca:	bf00      	nop
          }
          break;
 80064cc:	e004      	b.n	80064d8 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80064ce:	6839      	ldr	r1, [r7, #0]
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fb1d 	bl	8006b10 <USBD_CtlError>
          break;
 80064d6:	bf00      	nop
      }
      break;
 80064d8:	e004      	b.n	80064e4 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80064da:	6839      	ldr	r1, [r7, #0]
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 fb17 	bl	8006b10 <USBD_CtlError>
      break;
 80064e2:	bf00      	nop
  }

  return ret;
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
	...

080064f0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80064fe:	2300      	movs	r3, #0
 8006500:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006502:	2300      	movs	r3, #0
 8006504:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	885b      	ldrh	r3, [r3, #2]
 800650a:	0a1b      	lsrs	r3, r3, #8
 800650c:	b29b      	uxth	r3, r3
 800650e:	3b01      	subs	r3, #1
 8006510:	2b06      	cmp	r3, #6
 8006512:	f200 8128 	bhi.w	8006766 <USBD_GetDescriptor+0x276>
 8006516:	a201      	add	r2, pc, #4	; (adr r2, 800651c <USBD_GetDescriptor+0x2c>)
 8006518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651c:	08006539 	.word	0x08006539
 8006520:	08006551 	.word	0x08006551
 8006524:	08006591 	.word	0x08006591
 8006528:	08006767 	.word	0x08006767
 800652c:	08006767 	.word	0x08006767
 8006530:	08006707 	.word	0x08006707
 8006534:	08006733 	.word	0x08006733
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	7c12      	ldrb	r2, [r2, #16]
 8006544:	f107 0108 	add.w	r1, r7, #8
 8006548:	4610      	mov	r0, r2
 800654a:	4798      	blx	r3
 800654c:	60f8      	str	r0, [r7, #12]
      break;
 800654e:	e112      	b.n	8006776 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	7c1b      	ldrb	r3, [r3, #16]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10d      	bne.n	8006574 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800655e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006560:	f107 0208 	add.w	r2, r7, #8
 8006564:	4610      	mov	r0, r2
 8006566:	4798      	blx	r3
 8006568:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	3301      	adds	r3, #1
 800656e:	2202      	movs	r2, #2
 8006570:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006572:	e100      	b.n	8006776 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800657a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657c:	f107 0208 	add.w	r2, r7, #8
 8006580:	4610      	mov	r0, r2
 8006582:	4798      	blx	r3
 8006584:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	3301      	adds	r3, #1
 800658a:	2202      	movs	r2, #2
 800658c:	701a      	strb	r2, [r3, #0]
      break;
 800658e:	e0f2      	b.n	8006776 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	885b      	ldrh	r3, [r3, #2]
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b05      	cmp	r3, #5
 8006598:	f200 80ac 	bhi.w	80066f4 <USBD_GetDescriptor+0x204>
 800659c:	a201      	add	r2, pc, #4	; (adr r2, 80065a4 <USBD_GetDescriptor+0xb4>)
 800659e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a2:	bf00      	nop
 80065a4:	080065bd 	.word	0x080065bd
 80065a8:	080065f1 	.word	0x080065f1
 80065ac:	08006625 	.word	0x08006625
 80065b0:	08006659 	.word	0x08006659
 80065b4:	0800668d 	.word	0x0800668d
 80065b8:	080066c1 	.word	0x080066c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00b      	beq.n	80065e0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	7c12      	ldrb	r2, [r2, #16]
 80065d4:	f107 0108 	add.w	r1, r7, #8
 80065d8:	4610      	mov	r0, r2
 80065da:	4798      	blx	r3
 80065dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065de:	e091      	b.n	8006704 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065e0:	6839      	ldr	r1, [r7, #0]
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 fa94 	bl	8006b10 <USBD_CtlError>
            err++;
 80065e8:	7afb      	ldrb	r3, [r7, #11]
 80065ea:	3301      	adds	r3, #1
 80065ec:	72fb      	strb	r3, [r7, #11]
          break;
 80065ee:	e089      	b.n	8006704 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00b      	beq.n	8006614 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	7c12      	ldrb	r2, [r2, #16]
 8006608:	f107 0108 	add.w	r1, r7, #8
 800660c:	4610      	mov	r0, r2
 800660e:	4798      	blx	r3
 8006610:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006612:	e077      	b.n	8006704 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006614:	6839      	ldr	r1, [r7, #0]
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fa7a 	bl	8006b10 <USBD_CtlError>
            err++;
 800661c:	7afb      	ldrb	r3, [r7, #11]
 800661e:	3301      	adds	r3, #1
 8006620:	72fb      	strb	r3, [r7, #11]
          break;
 8006622:	e06f      	b.n	8006704 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00b      	beq.n	8006648 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	7c12      	ldrb	r2, [r2, #16]
 800663c:	f107 0108 	add.w	r1, r7, #8
 8006640:	4610      	mov	r0, r2
 8006642:	4798      	blx	r3
 8006644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006646:	e05d      	b.n	8006704 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006648:	6839      	ldr	r1, [r7, #0]
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 fa60 	bl	8006b10 <USBD_CtlError>
            err++;
 8006650:	7afb      	ldrb	r3, [r7, #11]
 8006652:	3301      	adds	r3, #1
 8006654:	72fb      	strb	r3, [r7, #11]
          break;
 8006656:	e055      	b.n	8006704 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00b      	beq.n	800667c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	7c12      	ldrb	r2, [r2, #16]
 8006670:	f107 0108 	add.w	r1, r7, #8
 8006674:	4610      	mov	r0, r2
 8006676:	4798      	blx	r3
 8006678:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800667a:	e043      	b.n	8006704 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800667c:	6839      	ldr	r1, [r7, #0]
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fa46 	bl	8006b10 <USBD_CtlError>
            err++;
 8006684:	7afb      	ldrb	r3, [r7, #11]
 8006686:	3301      	adds	r3, #1
 8006688:	72fb      	strb	r3, [r7, #11]
          break;
 800668a:	e03b      	b.n	8006704 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006692:	695b      	ldr	r3, [r3, #20]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00b      	beq.n	80066b0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800669e:	695b      	ldr	r3, [r3, #20]
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	7c12      	ldrb	r2, [r2, #16]
 80066a4:	f107 0108 	add.w	r1, r7, #8
 80066a8:	4610      	mov	r0, r2
 80066aa:	4798      	blx	r3
 80066ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066ae:	e029      	b.n	8006704 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066b0:	6839      	ldr	r1, [r7, #0]
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 fa2c 	bl	8006b10 <USBD_CtlError>
            err++;
 80066b8:	7afb      	ldrb	r3, [r7, #11]
 80066ba:	3301      	adds	r3, #1
 80066bc:	72fb      	strb	r3, [r7, #11]
          break;
 80066be:	e021      	b.n	8006704 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066c6:	699b      	ldr	r3, [r3, #24]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00b      	beq.n	80066e4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	7c12      	ldrb	r2, [r2, #16]
 80066d8:	f107 0108 	add.w	r1, r7, #8
 80066dc:	4610      	mov	r0, r2
 80066de:	4798      	blx	r3
 80066e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066e2:	e00f      	b.n	8006704 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066e4:	6839      	ldr	r1, [r7, #0]
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fa12 	bl	8006b10 <USBD_CtlError>
            err++;
 80066ec:	7afb      	ldrb	r3, [r7, #11]
 80066ee:	3301      	adds	r3, #1
 80066f0:	72fb      	strb	r3, [r7, #11]
          break;
 80066f2:	e007      	b.n	8006704 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80066f4:	6839      	ldr	r1, [r7, #0]
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fa0a 	bl	8006b10 <USBD_CtlError>
          err++;
 80066fc:	7afb      	ldrb	r3, [r7, #11]
 80066fe:	3301      	adds	r3, #1
 8006700:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006702:	e038      	b.n	8006776 <USBD_GetDescriptor+0x286>
 8006704:	e037      	b.n	8006776 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	7c1b      	ldrb	r3, [r3, #16]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d109      	bne.n	8006722 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006716:	f107 0208 	add.w	r2, r7, #8
 800671a:	4610      	mov	r0, r2
 800671c:	4798      	blx	r3
 800671e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006720:	e029      	b.n	8006776 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006722:	6839      	ldr	r1, [r7, #0]
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f9f3 	bl	8006b10 <USBD_CtlError>
        err++;
 800672a:	7afb      	ldrb	r3, [r7, #11]
 800672c:	3301      	adds	r3, #1
 800672e:	72fb      	strb	r3, [r7, #11]
      break;
 8006730:	e021      	b.n	8006776 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	7c1b      	ldrb	r3, [r3, #16]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d10d      	bne.n	8006756 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006742:	f107 0208 	add.w	r2, r7, #8
 8006746:	4610      	mov	r0, r2
 8006748:	4798      	blx	r3
 800674a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	3301      	adds	r3, #1
 8006750:	2207      	movs	r2, #7
 8006752:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006754:	e00f      	b.n	8006776 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006756:	6839      	ldr	r1, [r7, #0]
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 f9d9 	bl	8006b10 <USBD_CtlError>
        err++;
 800675e:	7afb      	ldrb	r3, [r7, #11]
 8006760:	3301      	adds	r3, #1
 8006762:	72fb      	strb	r3, [r7, #11]
      break;
 8006764:	e007      	b.n	8006776 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006766:	6839      	ldr	r1, [r7, #0]
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f9d1 	bl	8006b10 <USBD_CtlError>
      err++;
 800676e:	7afb      	ldrb	r3, [r7, #11]
 8006770:	3301      	adds	r3, #1
 8006772:	72fb      	strb	r3, [r7, #11]
      break;
 8006774:	bf00      	nop
  }

  if (err != 0U)
 8006776:	7afb      	ldrb	r3, [r7, #11]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d11c      	bne.n	80067b6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800677c:	893b      	ldrh	r3, [r7, #8]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d011      	beq.n	80067a6 <USBD_GetDescriptor+0x2b6>
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	88db      	ldrh	r3, [r3, #6]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00d      	beq.n	80067a6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	88da      	ldrh	r2, [r3, #6]
 800678e:	893b      	ldrh	r3, [r7, #8]
 8006790:	4293      	cmp	r3, r2
 8006792:	bf28      	it	cs
 8006794:	4613      	movcs	r3, r2
 8006796:	b29b      	uxth	r3, r3
 8006798:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800679a:	893b      	ldrh	r3, [r7, #8]
 800679c:	461a      	mov	r2, r3
 800679e:	68f9      	ldr	r1, [r7, #12]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fa1f 	bl	8006be4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	88db      	ldrh	r3, [r3, #6]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d104      	bne.n	80067b8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fa76 	bl	8006ca0 <USBD_CtlSendStatus>
 80067b4:	e000      	b.n	80067b8 <USBD_GetDescriptor+0x2c8>
    return;
 80067b6:	bf00      	nop
    }
  }
}
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop

080067c0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	889b      	ldrh	r3, [r3, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d130      	bne.n	8006834 <USBD_SetAddress+0x74>
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	88db      	ldrh	r3, [r3, #6]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d12c      	bne.n	8006834 <USBD_SetAddress+0x74>
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	885b      	ldrh	r3, [r3, #2]
 80067de:	2b7f      	cmp	r3, #127	; 0x7f
 80067e0:	d828      	bhi.n	8006834 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	885b      	ldrh	r3, [r3, #2]
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067f4:	2b03      	cmp	r3, #3
 80067f6:	d104      	bne.n	8006802 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80067f8:	6839      	ldr	r1, [r7, #0]
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f988 	bl	8006b10 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006800:	e01c      	b.n	800683c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	7bfa      	ldrb	r2, [r7, #15]
 8006806:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800680a:	7bfb      	ldrb	r3, [r7, #15]
 800680c:	4619      	mov	r1, r3
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fe50 	bl	80074b4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fa43 	bl	8006ca0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800681a:	7bfb      	ldrb	r3, [r7, #15]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d004      	beq.n	800682a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2202      	movs	r2, #2
 8006824:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006828:	e008      	b.n	800683c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006832:	e003      	b.n	800683c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006834:	6839      	ldr	r1, [r7, #0]
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 f96a 	bl	8006b10 <USBD_CtlError>
  }
}
 800683c:	bf00      	nop
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	885b      	ldrh	r3, [r3, #2]
 8006852:	b2da      	uxtb	r2, r3
 8006854:	4b41      	ldr	r3, [pc, #260]	; (800695c <USBD_SetConfig+0x118>)
 8006856:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006858:	4b40      	ldr	r3, [pc, #256]	; (800695c <USBD_SetConfig+0x118>)
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d904      	bls.n	800686a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006860:	6839      	ldr	r1, [r7, #0]
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f954 	bl	8006b10 <USBD_CtlError>
 8006868:	e075      	b.n	8006956 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006870:	2b02      	cmp	r3, #2
 8006872:	d002      	beq.n	800687a <USBD_SetConfig+0x36>
 8006874:	2b03      	cmp	r3, #3
 8006876:	d023      	beq.n	80068c0 <USBD_SetConfig+0x7c>
 8006878:	e062      	b.n	8006940 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800687a:	4b38      	ldr	r3, [pc, #224]	; (800695c <USBD_SetConfig+0x118>)
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d01a      	beq.n	80068b8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006882:	4b36      	ldr	r3, [pc, #216]	; (800695c <USBD_SetConfig+0x118>)
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	461a      	mov	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2203      	movs	r2, #3
 8006890:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006894:	4b31      	ldr	r3, [pc, #196]	; (800695c <USBD_SetConfig+0x118>)
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	4619      	mov	r1, r3
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7ff f9f3 	bl	8005c86 <USBD_SetClassConfig>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d104      	bne.n	80068b0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80068a6:	6839      	ldr	r1, [r7, #0]
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 f931 	bl	8006b10 <USBD_CtlError>
            return;
 80068ae:	e052      	b.n	8006956 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f9f5 	bl	8006ca0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80068b6:	e04e      	b.n	8006956 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f9f1 	bl	8006ca0 <USBD_CtlSendStatus>
        break;
 80068be:	e04a      	b.n	8006956 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80068c0:	4b26      	ldr	r3, [pc, #152]	; (800695c <USBD_SetConfig+0x118>)
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d112      	bne.n	80068ee <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2202      	movs	r2, #2
 80068cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80068d0:	4b22      	ldr	r3, [pc, #136]	; (800695c <USBD_SetConfig+0x118>)
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	461a      	mov	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80068da:	4b20      	ldr	r3, [pc, #128]	; (800695c <USBD_SetConfig+0x118>)
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	4619      	mov	r1, r3
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f7ff f9ef 	bl	8005cc4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f9da 	bl	8006ca0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80068ec:	e033      	b.n	8006956 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80068ee:	4b1b      	ldr	r3, [pc, #108]	; (800695c <USBD_SetConfig+0x118>)
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	461a      	mov	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d01d      	beq.n	8006938 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	b2db      	uxtb	r3, r3
 8006902:	4619      	mov	r1, r3
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f7ff f9dd 	bl	8005cc4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800690a:	4b14      	ldr	r3, [pc, #80]	; (800695c <USBD_SetConfig+0x118>)
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	461a      	mov	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006914:	4b11      	ldr	r3, [pc, #68]	; (800695c <USBD_SetConfig+0x118>)
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	4619      	mov	r1, r3
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f7ff f9b3 	bl	8005c86 <USBD_SetClassConfig>
 8006920:	4603      	mov	r3, r0
 8006922:	2b02      	cmp	r3, #2
 8006924:	d104      	bne.n	8006930 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006926:	6839      	ldr	r1, [r7, #0]
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 f8f1 	bl	8006b10 <USBD_CtlError>
            return;
 800692e:	e012      	b.n	8006956 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 f9b5 	bl	8006ca0 <USBD_CtlSendStatus>
        break;
 8006936:	e00e      	b.n	8006956 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 f9b1 	bl	8006ca0 <USBD_CtlSendStatus>
        break;
 800693e:	e00a      	b.n	8006956 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006940:	6839      	ldr	r1, [r7, #0]
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f8e4 	bl	8006b10 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006948:	4b04      	ldr	r3, [pc, #16]	; (800695c <USBD_SetConfig+0x118>)
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	4619      	mov	r1, r3
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7ff f9b8 	bl	8005cc4 <USBD_ClrClassConfig>
        break;
 8006954:	bf00      	nop
    }
  }
}
 8006956:	3708      	adds	r7, #8
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	20000205 	.word	0x20000205

08006960 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	88db      	ldrh	r3, [r3, #6]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d004      	beq.n	800697c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006972:	6839      	ldr	r1, [r7, #0]
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f8cb 	bl	8006b10 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800697a:	e021      	b.n	80069c0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006982:	2b01      	cmp	r3, #1
 8006984:	db17      	blt.n	80069b6 <USBD_GetConfig+0x56>
 8006986:	2b02      	cmp	r3, #2
 8006988:	dd02      	ble.n	8006990 <USBD_GetConfig+0x30>
 800698a:	2b03      	cmp	r3, #3
 800698c:	d00b      	beq.n	80069a6 <USBD_GetConfig+0x46>
 800698e:	e012      	b.n	80069b6 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	3308      	adds	r3, #8
 800699a:	2201      	movs	r2, #1
 800699c:	4619      	mov	r1, r3
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f920 	bl	8006be4 <USBD_CtlSendData>
        break;
 80069a4:	e00c      	b.n	80069c0 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	3304      	adds	r3, #4
 80069aa:	2201      	movs	r2, #1
 80069ac:	4619      	mov	r1, r3
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f918 	bl	8006be4 <USBD_CtlSendData>
        break;
 80069b4:	e004      	b.n	80069c0 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f8a9 	bl	8006b10 <USBD_CtlError>
        break;
 80069be:	bf00      	nop
}
 80069c0:	bf00      	nop
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069d8:	3b01      	subs	r3, #1
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d81e      	bhi.n	8006a1c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	88db      	ldrh	r3, [r3, #6]
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d004      	beq.n	80069f0 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80069e6:	6839      	ldr	r1, [r7, #0]
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f891 	bl	8006b10 <USBD_CtlError>
        break;
 80069ee:	e01a      	b.n	8006a26 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d005      	beq.n	8006a0c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	f043 0202 	orr.w	r2, r3, #2
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	330c      	adds	r3, #12
 8006a10:	2202      	movs	r2, #2
 8006a12:	4619      	mov	r1, r3
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 f8e5 	bl	8006be4 <USBD_CtlSendData>
      break;
 8006a1a:	e004      	b.n	8006a26 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006a1c:	6839      	ldr	r1, [r7, #0]
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f876 	bl	8006b10 <USBD_CtlError>
      break;
 8006a24:	bf00      	nop
  }
}
 8006a26:	bf00      	nop
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b082      	sub	sp, #8
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
 8006a36:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	885b      	ldrh	r3, [r3, #2]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d106      	bne.n	8006a4e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f929 	bl	8006ca0 <USBD_CtlSendStatus>
  }
}
 8006a4e:	bf00      	nop
 8006a50:	3708      	adds	r7, #8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b082      	sub	sp, #8
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a66:	3b01      	subs	r3, #1
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d80b      	bhi.n	8006a84 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	885b      	ldrh	r3, [r3, #2]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d10c      	bne.n	8006a8e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 f90f 	bl	8006ca0 <USBD_CtlSendStatus>
      }
      break;
 8006a82:	e004      	b.n	8006a8e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006a84:	6839      	ldr	r1, [r7, #0]
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f842 	bl	8006b10 <USBD_CtlError>
      break;
 8006a8c:	e000      	b.n	8006a90 <USBD_ClrFeature+0x3a>
      break;
 8006a8e:	bf00      	nop
  }
}
 8006a90:	bf00      	nop
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	781a      	ldrb	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	785a      	ldrb	r2, [r3, #1]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	3302      	adds	r3, #2
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	3303      	adds	r3, #3
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	021b      	lsls	r3, r3, #8
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	4413      	add	r3, r2
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	3304      	adds	r3, #4
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	3305      	adds	r3, #5
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	021b      	lsls	r3, r3, #8
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	4413      	add	r3, r2
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	3306      	adds	r3, #6
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	3307      	adds	r3, #7
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	021b      	lsls	r3, r3, #8
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	4413      	add	r3, r2
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	80da      	strh	r2, [r3, #6]

}
 8006b06:	bf00      	nop
 8006b08:	370c      	adds	r7, #12
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bc80      	pop	{r7}
 8006b0e:	4770      	bx	lr

08006b10 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006b1a:	2180      	movs	r1, #128	; 0x80
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 fc5f 	bl	80073e0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006b22:	2100      	movs	r1, #0
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 fc5b 	bl	80073e0 <USBD_LL_StallEP>
}
 8006b2a:	bf00      	nop
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b086      	sub	sp, #24
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	60f8      	str	r0, [r7, #12]
 8006b3a:	60b9      	str	r1, [r7, #8]
 8006b3c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d032      	beq.n	8006bae <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f000 f834 	bl	8006bb6 <USBD_GetLen>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	3301      	adds	r3, #1
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	005b      	lsls	r3, r3, #1
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006b5c:	7dfb      	ldrb	r3, [r7, #23]
 8006b5e:	1c5a      	adds	r2, r3, #1
 8006b60:	75fa      	strb	r2, [r7, #23]
 8006b62:	461a      	mov	r2, r3
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	4413      	add	r3, r2
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	7812      	ldrb	r2, [r2, #0]
 8006b6c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006b6e:	7dfb      	ldrb	r3, [r7, #23]
 8006b70:	1c5a      	adds	r2, r3, #1
 8006b72:	75fa      	strb	r2, [r7, #23]
 8006b74:	461a      	mov	r2, r3
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	4413      	add	r3, r2
 8006b7a:	2203      	movs	r2, #3
 8006b7c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006b7e:	e012      	b.n	8006ba6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	1c5a      	adds	r2, r3, #1
 8006b84:	60fa      	str	r2, [r7, #12]
 8006b86:	7dfa      	ldrb	r2, [r7, #23]
 8006b88:	1c51      	adds	r1, r2, #1
 8006b8a:	75f9      	strb	r1, [r7, #23]
 8006b8c:	4611      	mov	r1, r2
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	440a      	add	r2, r1
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006b96:	7dfb      	ldrb	r3, [r7, #23]
 8006b98:	1c5a      	adds	r2, r3, #1
 8006b9a:	75fa      	strb	r2, [r7, #23]
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1e8      	bne.n	8006b80 <USBD_GetString+0x4e>
    }
  }
}
 8006bae:	bf00      	nop
 8006bb0:	3718      	adds	r7, #24
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b085      	sub	sp, #20
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006bc2:	e005      	b.n	8006bd0 <USBD_GetLen+0x1a>
  {
    len++;
 8006bc4:	7bfb      	ldrb	r3, [r7, #15]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1f5      	bne.n	8006bc4 <USBD_GetLen+0xe>
  }

  return len;
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3714      	adds	r7, #20
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bc80      	pop	{r7}
 8006be2:	4770      	bx	lr

08006be4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2202      	movs	r2, #2
 8006bf6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006bfa:	88fa      	ldrh	r2, [r7, #6]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006c00:	88fa      	ldrh	r2, [r7, #6]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c06:	88fb      	ldrh	r3, [r7, #6]
 8006c08:	68ba      	ldr	r2, [r7, #8]
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 fc70 	bl	80074f2 <USBD_LL_Transmit>

  return USBD_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	4613      	mov	r3, r2
 8006c28:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c2a:	88fb      	ldrh	r3, [r7, #6]
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	2100      	movs	r1, #0
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f000 fc5e 	bl	80074f2 <USBD_LL_Transmit>

  return USBD_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2203      	movs	r2, #3
 8006c52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006c56:	88fa      	ldrh	r2, [r7, #6]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006c5e:	88fa      	ldrh	r2, [r7, #6]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006c66:	88fb      	ldrh	r3, [r7, #6]
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f000 fc63 	bl	8007538 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	4613      	mov	r3, r2
 8006c88:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006c8a:	88fb      	ldrh	r3, [r7, #6]
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	2100      	movs	r1, #0
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f000 fc51 	bl	8007538 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2204      	movs	r2, #4
 8006cac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 fc1b 	bl	80074f2 <USBD_LL_Transmit>

  return USBD_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3708      	adds	r7, #8
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b082      	sub	sp, #8
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2205      	movs	r2, #5
 8006cd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	2200      	movs	r2, #0
 8006cda:	2100      	movs	r1, #0
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fc2b 	bl	8007538 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3708      	adds	r7, #8
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	4912      	ldr	r1, [pc, #72]	; (8006d3c <MX_USB_DEVICE_Init+0x50>)
 8006cf4:	4812      	ldr	r0, [pc, #72]	; (8006d40 <MX_USB_DEVICE_Init+0x54>)
 8006cf6:	f7fe ff6c 	bl	8005bd2 <USBD_Init>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d001      	beq.n	8006d04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006d00:	f7fa f822 	bl	8000d48 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006d04:	490f      	ldr	r1, [pc, #60]	; (8006d44 <MX_USB_DEVICE_Init+0x58>)
 8006d06:	480e      	ldr	r0, [pc, #56]	; (8006d40 <MX_USB_DEVICE_Init+0x54>)
 8006d08:	f7fe ff8e 	bl	8005c28 <USBD_RegisterClass>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d001      	beq.n	8006d16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006d12:	f7fa f819 	bl	8000d48 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006d16:	490c      	ldr	r1, [pc, #48]	; (8006d48 <MX_USB_DEVICE_Init+0x5c>)
 8006d18:	4809      	ldr	r0, [pc, #36]	; (8006d40 <MX_USB_DEVICE_Init+0x54>)
 8006d1a:	f7fe febf 	bl	8005a9c <USBD_CDC_RegisterInterface>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d001      	beq.n	8006d28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006d24:	f7fa f810 	bl	8000d48 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006d28:	4805      	ldr	r0, [pc, #20]	; (8006d40 <MX_USB_DEVICE_Init+0x54>)
 8006d2a:	f7fe ff96 	bl	8005c5a <USBD_Start>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d001      	beq.n	8006d38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006d34:	f7fa f808 	bl	8000d48 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006d38:	bf00      	nop
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	20000130 	.word	0x20000130
 8006d40:	20000824 	.word	0x20000824
 8006d44:	2000001c 	.word	0x2000001c
 8006d48:	20000120 	.word	0x20000120

08006d4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006d50:	2200      	movs	r2, #0
 8006d52:	4905      	ldr	r1, [pc, #20]	; (8006d68 <CDC_Init_FS+0x1c>)
 8006d54:	4805      	ldr	r0, [pc, #20]	; (8006d6c <CDC_Init_FS+0x20>)
 8006d56:	f7fe feb7 	bl	8005ac8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006d5a:	4905      	ldr	r1, [pc, #20]	; (8006d70 <CDC_Init_FS+0x24>)
 8006d5c:	4803      	ldr	r0, [pc, #12]	; (8006d6c <CDC_Init_FS+0x20>)
 8006d5e:	f7fe fecc 	bl	8005afa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006d62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	20000af0 	.word	0x20000af0
 8006d6c:	20000824 	.word	0x20000824
 8006d70:	20000ae8 	.word	0x20000ae8

08006d74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006d74:	b480      	push	{r7}
 8006d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006d78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bc80      	pop	{r7}
 8006d80:	4770      	bx	lr
	...

08006d84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	6039      	str	r1, [r7, #0]
 8006d8e:	71fb      	strb	r3, [r7, #7]
 8006d90:	4613      	mov	r3, r2
 8006d92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006d94:	79fb      	ldrb	r3, [r7, #7]
 8006d96:	2b23      	cmp	r3, #35	; 0x23
 8006d98:	d84a      	bhi.n	8006e30 <CDC_Control_FS+0xac>
 8006d9a:	a201      	add	r2, pc, #4	; (adr r2, 8006da0 <CDC_Control_FS+0x1c>)
 8006d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da0:	08006e31 	.word	0x08006e31
 8006da4:	08006e31 	.word	0x08006e31
 8006da8:	08006e31 	.word	0x08006e31
 8006dac:	08006e31 	.word	0x08006e31
 8006db0:	08006e31 	.word	0x08006e31
 8006db4:	08006e31 	.word	0x08006e31
 8006db8:	08006e31 	.word	0x08006e31
 8006dbc:	08006e31 	.word	0x08006e31
 8006dc0:	08006e31 	.word	0x08006e31
 8006dc4:	08006e31 	.word	0x08006e31
 8006dc8:	08006e31 	.word	0x08006e31
 8006dcc:	08006e31 	.word	0x08006e31
 8006dd0:	08006e31 	.word	0x08006e31
 8006dd4:	08006e31 	.word	0x08006e31
 8006dd8:	08006e31 	.word	0x08006e31
 8006ddc:	08006e31 	.word	0x08006e31
 8006de0:	08006e31 	.word	0x08006e31
 8006de4:	08006e31 	.word	0x08006e31
 8006de8:	08006e31 	.word	0x08006e31
 8006dec:	08006e31 	.word	0x08006e31
 8006df0:	08006e31 	.word	0x08006e31
 8006df4:	08006e31 	.word	0x08006e31
 8006df8:	08006e31 	.word	0x08006e31
 8006dfc:	08006e31 	.word	0x08006e31
 8006e00:	08006e31 	.word	0x08006e31
 8006e04:	08006e31 	.word	0x08006e31
 8006e08:	08006e31 	.word	0x08006e31
 8006e0c:	08006e31 	.word	0x08006e31
 8006e10:	08006e31 	.word	0x08006e31
 8006e14:	08006e31 	.word	0x08006e31
 8006e18:	08006e31 	.word	0x08006e31
 8006e1c:	08006e31 	.word	0x08006e31
 8006e20:	08006e31 	.word	0x08006e31
 8006e24:	08006e31 	.word	0x08006e31
 8006e28:	08006e31 	.word	0x08006e31
 8006e2c:	08006e31 	.word	0x08006e31
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006e30:	bf00      	nop
  }

  return (USBD_OK);
 8006e32:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bc80      	pop	{r7}
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop

08006e40 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006e4a:	6879      	ldr	r1, [r7, #4]
 8006e4c:	4807      	ldr	r0, [pc, #28]	; (8006e6c <CDC_Receive_FS+0x2c>)
 8006e4e:	f7fe fe54 	bl	8005afa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006e52:	4806      	ldr	r0, [pc, #24]	; (8006e6c <CDC_Receive_FS+0x2c>)
 8006e54:	f7fe fe93 	bl	8005b7e <USBD_CDC_ReceivePacket>
  CDC_Recive_Callback(Buf, Len);
 8006e58:	6839      	ldr	r1, [r7, #0]
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f7f9 ff58 	bl	8000d10 <CDC_Recive_Callback>
  return (USBD_OK);
 8006e60:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	20000824 	.word	0x20000824

08006e70 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	460b      	mov	r3, r1
 8006e7a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006e80:	4b0d      	ldr	r3, [pc, #52]	; (8006eb8 <CDC_Transmit_FS+0x48>)
 8006e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e86:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e00b      	b.n	8006eae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006e96:	887b      	ldrh	r3, [r7, #2]
 8006e98:	461a      	mov	r2, r3
 8006e9a:	6879      	ldr	r1, [r7, #4]
 8006e9c:	4806      	ldr	r0, [pc, #24]	; (8006eb8 <CDC_Transmit_FS+0x48>)
 8006e9e:	f7fe fe13 	bl	8005ac8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006ea2:	4805      	ldr	r0, [pc, #20]	; (8006eb8 <CDC_Transmit_FS+0x48>)
 8006ea4:	f7fe fe3c 	bl	8005b20 <USBD_CDC_TransmitPacket>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	20000824 	.word	0x20000824

08006ebc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	6039      	str	r1, [r7, #0]
 8006ec6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	2212      	movs	r2, #18
 8006ecc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006ece:	4b03      	ldr	r3, [pc, #12]	; (8006edc <USBD_FS_DeviceDescriptor+0x20>)
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bc80      	pop	{r7}
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	2000014c 	.word	0x2000014c

08006ee0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	6039      	str	r1, [r7, #0]
 8006eea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	2204      	movs	r2, #4
 8006ef0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006ef2:	4b03      	ldr	r3, [pc, #12]	; (8006f00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bc80      	pop	{r7}
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	20000160 	.word	0x20000160

08006f04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	6039      	str	r1, [r7, #0]
 8006f0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f10:	79fb      	ldrb	r3, [r7, #7]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d105      	bne.n	8006f22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f16:	683a      	ldr	r2, [r7, #0]
 8006f18:	4907      	ldr	r1, [pc, #28]	; (8006f38 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f1a:	4808      	ldr	r0, [pc, #32]	; (8006f3c <USBD_FS_ProductStrDescriptor+0x38>)
 8006f1c:	f7ff fe09 	bl	8006b32 <USBD_GetString>
 8006f20:	e004      	b.n	8006f2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f22:	683a      	ldr	r2, [r7, #0]
 8006f24:	4904      	ldr	r1, [pc, #16]	; (8006f38 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f26:	4805      	ldr	r0, [pc, #20]	; (8006f3c <USBD_FS_ProductStrDescriptor+0x38>)
 8006f28:	f7ff fe03 	bl	8006b32 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f2c:	4b02      	ldr	r3, [pc, #8]	; (8006f38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3708      	adds	r7, #8
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	20000af4 	.word	0x20000af4
 8006f3c:	08007a9c 	.word	0x08007a9c

08006f40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	4603      	mov	r3, r0
 8006f48:	6039      	str	r1, [r7, #0]
 8006f4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006f4c:	683a      	ldr	r2, [r7, #0]
 8006f4e:	4904      	ldr	r1, [pc, #16]	; (8006f60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006f50:	4804      	ldr	r0, [pc, #16]	; (8006f64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006f52:	f7ff fdee 	bl	8006b32 <USBD_GetString>
  return USBD_StrDesc;
 8006f56:	4b02      	ldr	r3, [pc, #8]	; (8006f60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	20000af4 	.word	0x20000af4
 8006f64:	08007ab4 	.word	0x08007ab4

08006f68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	4603      	mov	r3, r0
 8006f70:	6039      	str	r1, [r7, #0]
 8006f72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	221a      	movs	r2, #26
 8006f78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006f7a:	f000 f843 	bl	8007004 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006f7e:	4b02      	ldr	r3, [pc, #8]	; (8006f88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	20000164 	.word	0x20000164

08006f8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	4603      	mov	r3, r0
 8006f94:	6039      	str	r1, [r7, #0]
 8006f96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006f98:	79fb      	ldrb	r3, [r7, #7]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d105      	bne.n	8006faa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	4907      	ldr	r1, [pc, #28]	; (8006fc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006fa2:	4808      	ldr	r0, [pc, #32]	; (8006fc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006fa4:	f7ff fdc5 	bl	8006b32 <USBD_GetString>
 8006fa8:	e004      	b.n	8006fb4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006faa:	683a      	ldr	r2, [r7, #0]
 8006fac:	4904      	ldr	r1, [pc, #16]	; (8006fc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006fae:	4805      	ldr	r0, [pc, #20]	; (8006fc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006fb0:	f7ff fdbf 	bl	8006b32 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fb4:	4b02      	ldr	r3, [pc, #8]	; (8006fc0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3708      	adds	r7, #8
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	20000af4 	.word	0x20000af4
 8006fc4:	08007ac8 	.word	0x08007ac8

08006fc8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	4603      	mov	r3, r0
 8006fd0:	6039      	str	r1, [r7, #0]
 8006fd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006fd4:	79fb      	ldrb	r3, [r7, #7]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d105      	bne.n	8006fe6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006fda:	683a      	ldr	r2, [r7, #0]
 8006fdc:	4907      	ldr	r1, [pc, #28]	; (8006ffc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006fde:	4808      	ldr	r0, [pc, #32]	; (8007000 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006fe0:	f7ff fda7 	bl	8006b32 <USBD_GetString>
 8006fe4:	e004      	b.n	8006ff0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	4904      	ldr	r1, [pc, #16]	; (8006ffc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006fea:	4805      	ldr	r0, [pc, #20]	; (8007000 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006fec:	f7ff fda1 	bl	8006b32 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ff0:	4b02      	ldr	r3, [pc, #8]	; (8006ffc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	20000af4 	.word	0x20000af4
 8007000:	08007ad4 	.word	0x08007ad4

08007004 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800700a:	4b0f      	ldr	r3, [pc, #60]	; (8007048 <Get_SerialNum+0x44>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007010:	4b0e      	ldr	r3, [pc, #56]	; (800704c <Get_SerialNum+0x48>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007016:	4b0e      	ldr	r3, [pc, #56]	; (8007050 <Get_SerialNum+0x4c>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4413      	add	r3, r2
 8007022:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d009      	beq.n	800703e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800702a:	2208      	movs	r2, #8
 800702c:	4909      	ldr	r1, [pc, #36]	; (8007054 <Get_SerialNum+0x50>)
 800702e:	68f8      	ldr	r0, [r7, #12]
 8007030:	f000 f814 	bl	800705c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007034:	2204      	movs	r2, #4
 8007036:	4908      	ldr	r1, [pc, #32]	; (8007058 <Get_SerialNum+0x54>)
 8007038:	68b8      	ldr	r0, [r7, #8]
 800703a:	f000 f80f 	bl	800705c <IntToUnicode>
  }
}
 800703e:	bf00      	nop
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	1ffff7e8 	.word	0x1ffff7e8
 800704c:	1ffff7ec 	.word	0x1ffff7ec
 8007050:	1ffff7f0 	.word	0x1ffff7f0
 8007054:	20000166 	.word	0x20000166
 8007058:	20000176 	.word	0x20000176

0800705c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800705c:	b480      	push	{r7}
 800705e:	b087      	sub	sp, #28
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	4613      	mov	r3, r2
 8007068:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800706a:	2300      	movs	r3, #0
 800706c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800706e:	2300      	movs	r3, #0
 8007070:	75fb      	strb	r3, [r7, #23]
 8007072:	e027      	b.n	80070c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	0f1b      	lsrs	r3, r3, #28
 8007078:	2b09      	cmp	r3, #9
 800707a:	d80b      	bhi.n	8007094 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	0f1b      	lsrs	r3, r3, #28
 8007080:	b2da      	uxtb	r2, r3
 8007082:	7dfb      	ldrb	r3, [r7, #23]
 8007084:	005b      	lsls	r3, r3, #1
 8007086:	4619      	mov	r1, r3
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	440b      	add	r3, r1
 800708c:	3230      	adds	r2, #48	; 0x30
 800708e:	b2d2      	uxtb	r2, r2
 8007090:	701a      	strb	r2, [r3, #0]
 8007092:	e00a      	b.n	80070aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	0f1b      	lsrs	r3, r3, #28
 8007098:	b2da      	uxtb	r2, r3
 800709a:	7dfb      	ldrb	r3, [r7, #23]
 800709c:	005b      	lsls	r3, r3, #1
 800709e:	4619      	mov	r1, r3
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	440b      	add	r3, r1
 80070a4:	3237      	adds	r2, #55	; 0x37
 80070a6:	b2d2      	uxtb	r2, r2
 80070a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	011b      	lsls	r3, r3, #4
 80070ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80070b0:	7dfb      	ldrb	r3, [r7, #23]
 80070b2:	005b      	lsls	r3, r3, #1
 80070b4:	3301      	adds	r3, #1
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	4413      	add	r3, r2
 80070ba:	2200      	movs	r2, #0
 80070bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80070be:	7dfb      	ldrb	r3, [r7, #23]
 80070c0:	3301      	adds	r3, #1
 80070c2:	75fb      	strb	r3, [r7, #23]
 80070c4:	7dfa      	ldrb	r2, [r7, #23]
 80070c6:	79fb      	ldrb	r3, [r7, #7]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d3d3      	bcc.n	8007074 <IntToUnicode+0x18>
  }
}
 80070cc:	bf00      	nop
 80070ce:	371c      	adds	r7, #28
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bc80      	pop	{r7}
 80070d4:	4770      	bx	lr
	...

080070d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a11      	ldr	r2, [pc, #68]	; (800712c <HAL_PCD_MspInit+0x54>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d11b      	bne.n	8007122 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80070ea:	4b11      	ldr	r3, [pc, #68]	; (8007130 <HAL_PCD_MspInit+0x58>)
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	4a10      	ldr	r2, [pc, #64]	; (8007130 <HAL_PCD_MspInit+0x58>)
 80070f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80070f4:	61d3      	str	r3, [r2, #28]
 80070f6:	4b0e      	ldr	r3, [pc, #56]	; (8007130 <HAL_PCD_MspInit+0x58>)
 80070f8:	69db      	ldr	r3, [r3, #28]
 80070fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070fe:	60fb      	str	r3, [r7, #12]
 8007100:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8007102:	2200      	movs	r2, #0
 8007104:	2100      	movs	r1, #0
 8007106:	2013      	movs	r0, #19
 8007108:	f7f9 fff9 	bl	80010fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800710c:	2013      	movs	r0, #19
 800710e:	f7fa f812 	bl	8001136 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007112:	2200      	movs	r2, #0
 8007114:	2100      	movs	r1, #0
 8007116:	2014      	movs	r0, #20
 8007118:	f7f9 fff1 	bl	80010fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800711c:	2014      	movs	r0, #20
 800711e:	f7fa f80a 	bl	8001136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007122:	bf00      	nop
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	40005c00 	.word	0x40005c00
 8007130:	40021000 	.word	0x40021000

08007134 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007148:	4619      	mov	r1, r3
 800714a:	4610      	mov	r0, r2
 800714c:	f7fe fdcd 	bl	8005cea <USBD_LL_SetupStage>
}
 8007150:	bf00      	nop
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	460b      	mov	r3, r1
 8007162:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800716a:	78fa      	ldrb	r2, [r7, #3]
 800716c:	6879      	ldr	r1, [r7, #4]
 800716e:	4613      	mov	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	4413      	add	r3, r2
 8007174:	00db      	lsls	r3, r3, #3
 8007176:	440b      	add	r3, r1
 8007178:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	78fb      	ldrb	r3, [r7, #3]
 8007180:	4619      	mov	r1, r3
 8007182:	f7fe fdfd 	bl	8005d80 <USBD_LL_DataOutStage>
}
 8007186:	bf00      	nop
 8007188:	3708      	adds	r7, #8
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b082      	sub	sp, #8
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
 8007196:	460b      	mov	r3, r1
 8007198:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80071a0:	78fa      	ldrb	r2, [r7, #3]
 80071a2:	6879      	ldr	r1, [r7, #4]
 80071a4:	4613      	mov	r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	00db      	lsls	r3, r3, #3
 80071ac:	440b      	add	r3, r1
 80071ae:	333c      	adds	r3, #60	; 0x3c
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	78fb      	ldrb	r3, [r7, #3]
 80071b4:	4619      	mov	r1, r3
 80071b6:	f7fe fe54 	bl	8005e62 <USBD_LL_DataInStage>
}
 80071ba:	bf00      	nop
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b082      	sub	sp, #8
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7fe ff64 	bl	800609e <USBD_LL_SOF>
}
 80071d6:	bf00      	nop
 80071d8:	3708      	adds	r7, #8
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b084      	sub	sp, #16
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80071e6:	2301      	movs	r3, #1
 80071e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d001      	beq.n	80071f6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80071f2:	f7f9 fda9 	bl	8000d48 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80071fc:	7bfa      	ldrb	r2, [r7, #15]
 80071fe:	4611      	mov	r1, r2
 8007200:	4618      	mov	r0, r3
 8007202:	f7fe ff14 	bl	800602e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800720c:	4618      	mov	r0, r3
 800720e:	f7fe fecd 	bl	8005fac <USBD_LL_Reset>
}
 8007212:	bf00      	nop
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
	...

0800721c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800722a:	4618      	mov	r0, r3
 800722c:	f7fe ff0e 	bl	800604c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d005      	beq.n	8007244 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007238:	4b04      	ldr	r3, [pc, #16]	; (800724c <HAL_PCD_SuspendCallback+0x30>)
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	4a03      	ldr	r2, [pc, #12]	; (800724c <HAL_PCD_SuspendCallback+0x30>)
 800723e:	f043 0306 	orr.w	r3, r3, #6
 8007242:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007244:	bf00      	nop
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	e000ed00 	.word	0xe000ed00

08007250 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800725e:	4618      	mov	r0, r3
 8007260:	f7fe ff08 	bl	8006074 <USBD_LL_Resume>
}
 8007264:	bf00      	nop
 8007266:	3708      	adds	r7, #8
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007274:	4a28      	ldr	r2, [pc, #160]	; (8007318 <USBD_LL_Init+0xac>)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a26      	ldr	r2, [pc, #152]	; (8007318 <USBD_LL_Init+0xac>)
 8007280:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007284:	4b24      	ldr	r3, [pc, #144]	; (8007318 <USBD_LL_Init+0xac>)
 8007286:	4a25      	ldr	r2, [pc, #148]	; (800731c <USBD_LL_Init+0xb0>)
 8007288:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800728a:	4b23      	ldr	r3, [pc, #140]	; (8007318 <USBD_LL_Init+0xac>)
 800728c:	2208      	movs	r2, #8
 800728e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007290:	4b21      	ldr	r3, [pc, #132]	; (8007318 <USBD_LL_Init+0xac>)
 8007292:	2202      	movs	r2, #2
 8007294:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007296:	4b20      	ldr	r3, [pc, #128]	; (8007318 <USBD_LL_Init+0xac>)
 8007298:	2200      	movs	r2, #0
 800729a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800729c:	4b1e      	ldr	r3, [pc, #120]	; (8007318 <USBD_LL_Init+0xac>)
 800729e:	2200      	movs	r2, #0
 80072a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80072a2:	4b1d      	ldr	r3, [pc, #116]	; (8007318 <USBD_LL_Init+0xac>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80072a8:	481b      	ldr	r0, [pc, #108]	; (8007318 <USBD_LL_Init+0xac>)
 80072aa:	f7fa f8ea 	bl	8001482 <HAL_PCD_Init>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d001      	beq.n	80072b8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80072b4:	f7f9 fd48 	bl	8000d48 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80072be:	2318      	movs	r3, #24
 80072c0:	2200      	movs	r2, #0
 80072c2:	2100      	movs	r1, #0
 80072c4:	f7fb fc1e 	bl	8002b04 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80072ce:	2358      	movs	r3, #88	; 0x58
 80072d0:	2200      	movs	r2, #0
 80072d2:	2180      	movs	r1, #128	; 0x80
 80072d4:	f7fb fc16 	bl	8002b04 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80072de:	23c0      	movs	r3, #192	; 0xc0
 80072e0:	2200      	movs	r2, #0
 80072e2:	2181      	movs	r1, #129	; 0x81
 80072e4:	f7fb fc0e 	bl	8002b04 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80072ee:	f44f 7388 	mov.w	r3, #272	; 0x110
 80072f2:	2200      	movs	r2, #0
 80072f4:	2101      	movs	r1, #1
 80072f6:	f7fb fc05 	bl	8002b04 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007300:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007304:	2200      	movs	r2, #0
 8007306:	2182      	movs	r1, #130	; 0x82
 8007308:	f7fb fbfc 	bl	8002b04 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	20000bf4 	.word	0x20000bf4
 800731c:	40005c00 	.word	0x40005c00

08007320 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007328:	2300      	movs	r3, #0
 800732a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800732c:	2300      	movs	r3, #0
 800732e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007336:	4618      	mov	r0, r3
 8007338:	f7fa f9ae 	bl	8001698 <HAL_PCD_Start>
 800733c:	4603      	mov	r3, r0
 800733e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007340:	7bfb      	ldrb	r3, [r7, #15]
 8007342:	4618      	mov	r0, r3
 8007344:	f000 f94e 	bl	80075e4 <USBD_Get_USB_Status>
 8007348:	4603      	mov	r3, r0
 800734a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800734c:	7bbb      	ldrb	r3, [r7, #14]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b084      	sub	sp, #16
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
 800735e:	4608      	mov	r0, r1
 8007360:	4611      	mov	r1, r2
 8007362:	461a      	mov	r2, r3
 8007364:	4603      	mov	r3, r0
 8007366:	70fb      	strb	r3, [r7, #3]
 8007368:	460b      	mov	r3, r1
 800736a:	70bb      	strb	r3, [r7, #2]
 800736c:	4613      	mov	r3, r2
 800736e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007370:	2300      	movs	r3, #0
 8007372:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007374:	2300      	movs	r3, #0
 8007376:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800737e:	78bb      	ldrb	r3, [r7, #2]
 8007380:	883a      	ldrh	r2, [r7, #0]
 8007382:	78f9      	ldrb	r1, [r7, #3]
 8007384:	f7fa fb28 	bl	80019d8 <HAL_PCD_EP_Open>
 8007388:	4603      	mov	r3, r0
 800738a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800738c:	7bfb      	ldrb	r3, [r7, #15]
 800738e:	4618      	mov	r0, r3
 8007390:	f000 f928 	bl	80075e4 <USBD_Get_USB_Status>
 8007394:	4603      	mov	r3, r0
 8007396:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007398:	7bbb      	ldrb	r3, [r7, #14]
}
 800739a:	4618      	mov	r0, r3
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b084      	sub	sp, #16
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
 80073aa:	460b      	mov	r3, r1
 80073ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073ae:	2300      	movs	r3, #0
 80073b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073bc:	78fa      	ldrb	r2, [r7, #3]
 80073be:	4611      	mov	r1, r2
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7fa fb6f 	bl	8001aa4 <HAL_PCD_EP_Close>
 80073c6:	4603      	mov	r3, r0
 80073c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073ca:	7bfb      	ldrb	r3, [r7, #15]
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 f909 	bl	80075e4 <USBD_Get_USB_Status>
 80073d2:	4603      	mov	r3, r0
 80073d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	460b      	mov	r3, r1
 80073ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073ec:	2300      	movs	r3, #0
 80073ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073fa:	78fa      	ldrb	r2, [r7, #3]
 80073fc:	4611      	mov	r1, r2
 80073fe:	4618      	mov	r0, r3
 8007400:	f7fa fc2f 	bl	8001c62 <HAL_PCD_EP_SetStall>
 8007404:	4603      	mov	r3, r0
 8007406:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007408:	7bfb      	ldrb	r3, [r7, #15]
 800740a:	4618      	mov	r0, r3
 800740c:	f000 f8ea 	bl	80075e4 <USBD_Get_USB_Status>
 8007410:	4603      	mov	r3, r0
 8007412:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007414:	7bbb      	ldrb	r3, [r7, #14]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b084      	sub	sp, #16
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
 8007426:	460b      	mov	r3, r1
 8007428:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800742a:	2300      	movs	r3, #0
 800742c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800742e:	2300      	movs	r3, #0
 8007430:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007438:	78fa      	ldrb	r2, [r7, #3]
 800743a:	4611      	mov	r1, r2
 800743c:	4618      	mov	r0, r3
 800743e:	f7fa fc70 	bl	8001d22 <HAL_PCD_EP_ClrStall>
 8007442:	4603      	mov	r3, r0
 8007444:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007446:	7bfb      	ldrb	r3, [r7, #15]
 8007448:	4618      	mov	r0, r3
 800744a:	f000 f8cb 	bl	80075e4 <USBD_Get_USB_Status>
 800744e:	4603      	mov	r3, r0
 8007450:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007452:	7bbb      	ldrb	r3, [r7, #14]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	460b      	mov	r3, r1
 8007466:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800746e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007470:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007474:	2b00      	cmp	r3, #0
 8007476:	da0c      	bge.n	8007492 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007478:	78fb      	ldrb	r3, [r7, #3]
 800747a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800747e:	68f9      	ldr	r1, [r7, #12]
 8007480:	1c5a      	adds	r2, r3, #1
 8007482:	4613      	mov	r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4413      	add	r3, r2
 8007488:	00db      	lsls	r3, r3, #3
 800748a:	440b      	add	r3, r1
 800748c:	3302      	adds	r3, #2
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	e00b      	b.n	80074aa <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007492:	78fb      	ldrb	r3, [r7, #3]
 8007494:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007498:	68f9      	ldr	r1, [r7, #12]
 800749a:	4613      	mov	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	00db      	lsls	r3, r3, #3
 80074a2:	440b      	add	r3, r1
 80074a4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80074a8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3714      	adds	r7, #20
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bc80      	pop	{r7}
 80074b2:	4770      	bx	lr

080074b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	460b      	mov	r3, r1
 80074be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074c0:	2300      	movs	r3, #0
 80074c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074c4:	2300      	movs	r3, #0
 80074c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074ce:	78fa      	ldrb	r2, [r7, #3]
 80074d0:	4611      	mov	r1, r2
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fa fa5b 	bl	800198e <HAL_PCD_SetAddress>
 80074d8:	4603      	mov	r3, r0
 80074da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 f880 	bl	80075e4 <USBD_Get_USB_Status>
 80074e4:	4603      	mov	r3, r0
 80074e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b086      	sub	sp, #24
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	60f8      	str	r0, [r7, #12]
 80074fa:	607a      	str	r2, [r7, #4]
 80074fc:	461a      	mov	r2, r3
 80074fe:	460b      	mov	r3, r1
 8007500:	72fb      	strb	r3, [r7, #11]
 8007502:	4613      	mov	r3, r2
 8007504:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007506:	2300      	movs	r3, #0
 8007508:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800750a:	2300      	movs	r3, #0
 800750c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007514:	893b      	ldrh	r3, [r7, #8]
 8007516:	7af9      	ldrb	r1, [r7, #11]
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	f7fa fb5f 	bl	8001bdc <HAL_PCD_EP_Transmit>
 800751e:	4603      	mov	r3, r0
 8007520:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007522:	7dfb      	ldrb	r3, [r7, #23]
 8007524:	4618      	mov	r0, r3
 8007526:	f000 f85d 	bl	80075e4 <USBD_Get_USB_Status>
 800752a:	4603      	mov	r3, r0
 800752c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800752e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3718      	adds	r7, #24
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b086      	sub	sp, #24
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	607a      	str	r2, [r7, #4]
 8007542:	461a      	mov	r2, r3
 8007544:	460b      	mov	r3, r1
 8007546:	72fb      	strb	r3, [r7, #11]
 8007548:	4613      	mov	r3, r2
 800754a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800754c:	2300      	movs	r3, #0
 800754e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007550:	2300      	movs	r3, #0
 8007552:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800755a:	893b      	ldrh	r3, [r7, #8]
 800755c:	7af9      	ldrb	r1, [r7, #11]
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	f7fa fae8 	bl	8001b34 <HAL_PCD_EP_Receive>
 8007564:	4603      	mov	r3, r0
 8007566:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007568:	7dfb      	ldrb	r3, [r7, #23]
 800756a:	4618      	mov	r0, r3
 800756c:	f000 f83a 	bl	80075e4 <USBD_Get_USB_Status>
 8007570:	4603      	mov	r3, r0
 8007572:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007574:	7dbb      	ldrb	r3, [r7, #22]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3718      	adds	r7, #24
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b082      	sub	sp, #8
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
 8007586:	460b      	mov	r3, r1
 8007588:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007590:	78fa      	ldrb	r2, [r7, #3]
 8007592:	4611      	mov	r1, r2
 8007594:	4618      	mov	r0, r3
 8007596:	f7fa fb0a 	bl	8001bae <HAL_PCD_EP_GetRxCount>
 800759a:	4603      	mov	r3, r0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80075ac:	4b02      	ldr	r3, [pc, #8]	; (80075b8 <USBD_static_malloc+0x14>)
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bc80      	pop	{r7}
 80075b6:	4770      	bx	lr
 80075b8:	20000208 	.word	0x20000208

080075bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]

}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bc80      	pop	{r7}
 80075cc:	4770      	bx	lr

080075ce <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075ce:	b480      	push	{r7}
 80075d0:	b083      	sub	sp, #12
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
 80075d6:	460b      	mov	r3, r1
 80075d8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80075da:	bf00      	nop
 80075dc:	370c      	adds	r7, #12
 80075de:	46bd      	mov	sp, r7
 80075e0:	bc80      	pop	{r7}
 80075e2:	4770      	bx	lr

080075e4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	4603      	mov	r3, r0
 80075ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075ee:	2300      	movs	r3, #0
 80075f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80075f2:	79fb      	ldrb	r3, [r7, #7]
 80075f4:	2b03      	cmp	r3, #3
 80075f6:	d817      	bhi.n	8007628 <USBD_Get_USB_Status+0x44>
 80075f8:	a201      	add	r2, pc, #4	; (adr r2, 8007600 <USBD_Get_USB_Status+0x1c>)
 80075fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fe:	bf00      	nop
 8007600:	08007611 	.word	0x08007611
 8007604:	08007617 	.word	0x08007617
 8007608:	0800761d 	.word	0x0800761d
 800760c:	08007623 	.word	0x08007623
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007610:	2300      	movs	r3, #0
 8007612:	73fb      	strb	r3, [r7, #15]
    break;
 8007614:	e00b      	b.n	800762e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007616:	2302      	movs	r3, #2
 8007618:	73fb      	strb	r3, [r7, #15]
    break;
 800761a:	e008      	b.n	800762e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800761c:	2301      	movs	r3, #1
 800761e:	73fb      	strb	r3, [r7, #15]
    break;
 8007620:	e005      	b.n	800762e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007622:	2302      	movs	r3, #2
 8007624:	73fb      	strb	r3, [r7, #15]
    break;
 8007626:	e002      	b.n	800762e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007628:	2302      	movs	r3, #2
 800762a:	73fb      	strb	r3, [r7, #15]
    break;
 800762c:	bf00      	nop
  }
  return usb_status;
 800762e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007630:	4618      	mov	r0, r3
 8007632:	3714      	adds	r7, #20
 8007634:	46bd      	mov	sp, r7
 8007636:	bc80      	pop	{r7}
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop

0800763c <__errno>:
 800763c:	4b01      	ldr	r3, [pc, #4]	; (8007644 <__errno+0x8>)
 800763e:	6818      	ldr	r0, [r3, #0]
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	20000180 	.word	0x20000180

08007648 <__libc_init_array>:
 8007648:	b570      	push	{r4, r5, r6, lr}
 800764a:	2500      	movs	r5, #0
 800764c:	4e0c      	ldr	r6, [pc, #48]	; (8007680 <__libc_init_array+0x38>)
 800764e:	4c0d      	ldr	r4, [pc, #52]	; (8007684 <__libc_init_array+0x3c>)
 8007650:	1ba4      	subs	r4, r4, r6
 8007652:	10a4      	asrs	r4, r4, #2
 8007654:	42a5      	cmp	r5, r4
 8007656:	d109      	bne.n	800766c <__libc_init_array+0x24>
 8007658:	f000 fa08 	bl	8007a6c <_init>
 800765c:	2500      	movs	r5, #0
 800765e:	4e0a      	ldr	r6, [pc, #40]	; (8007688 <__libc_init_array+0x40>)
 8007660:	4c0a      	ldr	r4, [pc, #40]	; (800768c <__libc_init_array+0x44>)
 8007662:	1ba4      	subs	r4, r4, r6
 8007664:	10a4      	asrs	r4, r4, #2
 8007666:	42a5      	cmp	r5, r4
 8007668:	d105      	bne.n	8007676 <__libc_init_array+0x2e>
 800766a:	bd70      	pop	{r4, r5, r6, pc}
 800766c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007670:	4798      	blx	r3
 8007672:	3501      	adds	r5, #1
 8007674:	e7ee      	b.n	8007654 <__libc_init_array+0xc>
 8007676:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800767a:	4798      	blx	r3
 800767c:	3501      	adds	r5, #1
 800767e:	e7f2      	b.n	8007666 <__libc_init_array+0x1e>
 8007680:	08007b28 	.word	0x08007b28
 8007684:	08007b28 	.word	0x08007b28
 8007688:	08007b28 	.word	0x08007b28
 800768c:	08007b2c 	.word	0x08007b2c

08007690 <memset>:
 8007690:	4603      	mov	r3, r0
 8007692:	4402      	add	r2, r0
 8007694:	4293      	cmp	r3, r2
 8007696:	d100      	bne.n	800769a <memset+0xa>
 8007698:	4770      	bx	lr
 800769a:	f803 1b01 	strb.w	r1, [r3], #1
 800769e:	e7f9      	b.n	8007694 <memset+0x4>

080076a0 <exp>:
 80076a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80076a4:	b08b      	sub	sp, #44	; 0x2c
 80076a6:	4604      	mov	r4, r0
 80076a8:	460d      	mov	r5, r1
 80076aa:	f000 f871 	bl	8007790 <__ieee754_exp>
 80076ae:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 800778c <exp+0xec>
 80076b2:	4606      	mov	r6, r0
 80076b4:	f998 3000 	ldrsb.w	r3, [r8]
 80076b8:	460f      	mov	r7, r1
 80076ba:	3301      	adds	r3, #1
 80076bc:	d02c      	beq.n	8007718 <exp+0x78>
 80076be:	4620      	mov	r0, r4
 80076c0:	4629      	mov	r1, r5
 80076c2:	f000 f9cb 	bl	8007a5c <finite>
 80076c6:	b338      	cbz	r0, 8007718 <exp+0x78>
 80076c8:	a329      	add	r3, pc, #164	; (adr r3, 8007770 <exp+0xd0>)
 80076ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ce:	4620      	mov	r0, r4
 80076d0:	4629      	mov	r1, r5
 80076d2:	f7f9 f989 	bl	80009e8 <__aeabi_dcmpgt>
 80076d6:	4681      	mov	r9, r0
 80076d8:	2800      	cmp	r0, #0
 80076da:	d02d      	beq.n	8007738 <exp+0x98>
 80076dc:	2303      	movs	r3, #3
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	4b27      	ldr	r3, [pc, #156]	; (8007780 <exp+0xe0>)
 80076e2:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80076e6:	9301      	str	r3, [sp, #4]
 80076e8:	2300      	movs	r3, #0
 80076ea:	9308      	str	r3, [sp, #32]
 80076ec:	f998 3000 	ldrsb.w	r3, [r8]
 80076f0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80076f4:	b9ab      	cbnz	r3, 8007722 <exp+0x82>
 80076f6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80076fa:	4b22      	ldr	r3, [pc, #136]	; (8007784 <exp+0xe4>)
 80076fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007700:	4668      	mov	r0, sp
 8007702:	f000 f9b1 	bl	8007a68 <matherr>
 8007706:	b190      	cbz	r0, 800772e <exp+0x8e>
 8007708:	9b08      	ldr	r3, [sp, #32]
 800770a:	b11b      	cbz	r3, 8007714 <exp+0x74>
 800770c:	f7ff ff96 	bl	800763c <__errno>
 8007710:	9b08      	ldr	r3, [sp, #32]
 8007712:	6003      	str	r3, [r0, #0]
 8007714:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8007718:	4630      	mov	r0, r6
 800771a:	4639      	mov	r1, r7
 800771c:	b00b      	add	sp, #44	; 0x2c
 800771e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007722:	2000      	movs	r0, #0
 8007724:	4918      	ldr	r1, [pc, #96]	; (8007788 <exp+0xe8>)
 8007726:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800772a:	2b02      	cmp	r3, #2
 800772c:	d1e8      	bne.n	8007700 <exp+0x60>
 800772e:	f7ff ff85 	bl	800763c <__errno>
 8007732:	2322      	movs	r3, #34	; 0x22
 8007734:	6003      	str	r3, [r0, #0]
 8007736:	e7e7      	b.n	8007708 <exp+0x68>
 8007738:	a30f      	add	r3, pc, #60	; (adr r3, 8007778 <exp+0xd8>)
 800773a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773e:	4620      	mov	r0, r4
 8007740:	4629      	mov	r1, r5
 8007742:	f7f9 f933 	bl	80009ac <__aeabi_dcmplt>
 8007746:	2800      	cmp	r0, #0
 8007748:	d0e6      	beq.n	8007718 <exp+0x78>
 800774a:	2304      	movs	r3, #4
 800774c:	9300      	str	r3, [sp, #0]
 800774e:	4b0c      	ldr	r3, [pc, #48]	; (8007780 <exp+0xe0>)
 8007750:	2200      	movs	r2, #0
 8007752:	9301      	str	r3, [sp, #4]
 8007754:	2300      	movs	r3, #0
 8007756:	f8cd 9020 	str.w	r9, [sp, #32]
 800775a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800775e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007762:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007766:	f998 3000 	ldrsb.w	r3, [r8]
 800776a:	e7de      	b.n	800772a <exp+0x8a>
 800776c:	f3af 8000 	nop.w
 8007770:	fefa39ef 	.word	0xfefa39ef
 8007774:	40862e42 	.word	0x40862e42
 8007778:	d52d3051 	.word	0xd52d3051
 800777c:	c0874910 	.word	0xc0874910
 8007780:	08007af4 	.word	0x08007af4
 8007784:	47efffff 	.word	0x47efffff
 8007788:	7ff00000 	.word	0x7ff00000
 800778c:	200001e4 	.word	0x200001e4

08007790 <__ieee754_exp>:
 8007790:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007794:	4aa8      	ldr	r2, [pc, #672]	; (8007a38 <__ieee754_exp+0x2a8>)
 8007796:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800779a:	4296      	cmp	r6, r2
 800779c:	4605      	mov	r5, r0
 800779e:	460c      	mov	r4, r1
 80077a0:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 80077a4:	d92c      	bls.n	8007800 <__ieee754_exp+0x70>
 80077a6:	4aa5      	ldr	r2, [pc, #660]	; (8007a3c <__ieee754_exp+0x2ac>)
 80077a8:	4296      	cmp	r6, r2
 80077aa:	d910      	bls.n	80077ce <__ieee754_exp+0x3e>
 80077ac:	f3c1 0313 	ubfx	r3, r1, #0, #20
 80077b0:	4303      	orrs	r3, r0
 80077b2:	4602      	mov	r2, r0
 80077b4:	d005      	beq.n	80077c2 <__ieee754_exp+0x32>
 80077b6:	460b      	mov	r3, r1
 80077b8:	f7f8 fcd0 	bl	800015c <__adddf3>
 80077bc:	4605      	mov	r5, r0
 80077be:	460c      	mov	r4, r1
 80077c0:	e000      	b.n	80077c4 <__ieee754_exp+0x34>
 80077c2:	b9d7      	cbnz	r7, 80077fa <__ieee754_exp+0x6a>
 80077c4:	4628      	mov	r0, r5
 80077c6:	4621      	mov	r1, r4
 80077c8:	b004      	add	sp, #16
 80077ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ce:	a384      	add	r3, pc, #528	; (adr r3, 80079e0 <__ieee754_exp+0x250>)
 80077d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d4:	f7f9 f908 	bl	80009e8 <__aeabi_dcmpgt>
 80077d8:	b138      	cbz	r0, 80077ea <__ieee754_exp+0x5a>
 80077da:	a383      	add	r3, pc, #524	; (adr r3, 80079e8 <__ieee754_exp+0x258>)
 80077dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e0:	4610      	mov	r0, r2
 80077e2:	4619      	mov	r1, r3
 80077e4:	f7f8 fe70 	bl	80004c8 <__aeabi_dmul>
 80077e8:	e7e8      	b.n	80077bc <__ieee754_exp+0x2c>
 80077ea:	a381      	add	r3, pc, #516	; (adr r3, 80079f0 <__ieee754_exp+0x260>)
 80077ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f0:	4628      	mov	r0, r5
 80077f2:	4621      	mov	r1, r4
 80077f4:	f7f9 f8da 	bl	80009ac <__aeabi_dcmplt>
 80077f8:	b130      	cbz	r0, 8007808 <__ieee754_exp+0x78>
 80077fa:	2500      	movs	r5, #0
 80077fc:	462c      	mov	r4, r5
 80077fe:	e7e1      	b.n	80077c4 <__ieee754_exp+0x34>
 8007800:	4b8f      	ldr	r3, [pc, #572]	; (8007a40 <__ieee754_exp+0x2b0>)
 8007802:	429e      	cmp	r6, r3
 8007804:	f240 80a6 	bls.w	8007954 <__ieee754_exp+0x1c4>
 8007808:	4b8e      	ldr	r3, [pc, #568]	; (8007a44 <__ieee754_exp+0x2b4>)
 800780a:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 800780e:	429e      	cmp	r6, r3
 8007810:	d875      	bhi.n	80078fe <__ieee754_exp+0x16e>
 8007812:	4b8d      	ldr	r3, [pc, #564]	; (8007a48 <__ieee754_exp+0x2b8>)
 8007814:	4628      	mov	r0, r5
 8007816:	4443      	add	r3, r8
 8007818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781c:	4621      	mov	r1, r4
 800781e:	f7f8 fc9b 	bl	8000158 <__aeabi_dsub>
 8007822:	4e8a      	ldr	r6, [pc, #552]	; (8007a4c <__ieee754_exp+0x2bc>)
 8007824:	e9cd 0100 	strd	r0, r1, [sp]
 8007828:	f1c7 0a01 	rsb	sl, r7, #1
 800782c:	4446      	add	r6, r8
 800782e:	ebaa 0a07 	sub.w	sl, sl, r7
 8007832:	e9d6 8900 	ldrd	r8, r9, [r6]
 8007836:	4642      	mov	r2, r8
 8007838:	e9dd 0100 	ldrd	r0, r1, [sp]
 800783c:	464b      	mov	r3, r9
 800783e:	f7f8 fc8b 	bl	8000158 <__aeabi_dsub>
 8007842:	4605      	mov	r5, r0
 8007844:	460c      	mov	r4, r1
 8007846:	462a      	mov	r2, r5
 8007848:	4623      	mov	r3, r4
 800784a:	4628      	mov	r0, r5
 800784c:	4621      	mov	r1, r4
 800784e:	f7f8 fe3b 	bl	80004c8 <__aeabi_dmul>
 8007852:	a369      	add	r3, pc, #420	; (adr r3, 80079f8 <__ieee754_exp+0x268>)
 8007854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007858:	4606      	mov	r6, r0
 800785a:	460f      	mov	r7, r1
 800785c:	f7f8 fe34 	bl	80004c8 <__aeabi_dmul>
 8007860:	a367      	add	r3, pc, #412	; (adr r3, 8007a00 <__ieee754_exp+0x270>)
 8007862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007866:	f7f8 fc77 	bl	8000158 <__aeabi_dsub>
 800786a:	4632      	mov	r2, r6
 800786c:	463b      	mov	r3, r7
 800786e:	f7f8 fe2b 	bl	80004c8 <__aeabi_dmul>
 8007872:	a365      	add	r3, pc, #404	; (adr r3, 8007a08 <__ieee754_exp+0x278>)
 8007874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007878:	f7f8 fc70 	bl	800015c <__adddf3>
 800787c:	4632      	mov	r2, r6
 800787e:	463b      	mov	r3, r7
 8007880:	f7f8 fe22 	bl	80004c8 <__aeabi_dmul>
 8007884:	a362      	add	r3, pc, #392	; (adr r3, 8007a10 <__ieee754_exp+0x280>)
 8007886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788a:	f7f8 fc65 	bl	8000158 <__aeabi_dsub>
 800788e:	4632      	mov	r2, r6
 8007890:	463b      	mov	r3, r7
 8007892:	f7f8 fe19 	bl	80004c8 <__aeabi_dmul>
 8007896:	a360      	add	r3, pc, #384	; (adr r3, 8007a18 <__ieee754_exp+0x288>)
 8007898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789c:	f7f8 fc5e 	bl	800015c <__adddf3>
 80078a0:	4632      	mov	r2, r6
 80078a2:	463b      	mov	r3, r7
 80078a4:	f7f8 fe10 	bl	80004c8 <__aeabi_dmul>
 80078a8:	4602      	mov	r2, r0
 80078aa:	460b      	mov	r3, r1
 80078ac:	4628      	mov	r0, r5
 80078ae:	4621      	mov	r1, r4
 80078b0:	f7f8 fc52 	bl	8000158 <__aeabi_dsub>
 80078b4:	4602      	mov	r2, r0
 80078b6:	460b      	mov	r3, r1
 80078b8:	4606      	mov	r6, r0
 80078ba:	460f      	mov	r7, r1
 80078bc:	4628      	mov	r0, r5
 80078be:	4621      	mov	r1, r4
 80078c0:	f7f8 fe02 	bl	80004c8 <__aeabi_dmul>
 80078c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078c8:	f1ba 0f00 	cmp.w	sl, #0
 80078cc:	d159      	bne.n	8007982 <__ieee754_exp+0x1f2>
 80078ce:	2200      	movs	r2, #0
 80078d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80078d4:	4630      	mov	r0, r6
 80078d6:	4639      	mov	r1, r7
 80078d8:	f7f8 fc3e 	bl	8000158 <__aeabi_dsub>
 80078dc:	4602      	mov	r2, r0
 80078de:	460b      	mov	r3, r1
 80078e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078e4:	f7f8 ff1a 	bl	800071c <__aeabi_ddiv>
 80078e8:	462a      	mov	r2, r5
 80078ea:	4623      	mov	r3, r4
 80078ec:	f7f8 fc34 	bl	8000158 <__aeabi_dsub>
 80078f0:	4602      	mov	r2, r0
 80078f2:	460b      	mov	r3, r1
 80078f4:	2000      	movs	r0, #0
 80078f6:	4956      	ldr	r1, [pc, #344]	; (8007a50 <__ieee754_exp+0x2c0>)
 80078f8:	f7f8 fc2e 	bl	8000158 <__aeabi_dsub>
 80078fc:	e75e      	b.n	80077bc <__ieee754_exp+0x2c>
 80078fe:	4e55      	ldr	r6, [pc, #340]	; (8007a54 <__ieee754_exp+0x2c4>)
 8007900:	a347      	add	r3, pc, #284	; (adr r3, 8007a20 <__ieee754_exp+0x290>)
 8007902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007906:	4446      	add	r6, r8
 8007908:	4628      	mov	r0, r5
 800790a:	4621      	mov	r1, r4
 800790c:	f7f8 fddc 	bl	80004c8 <__aeabi_dmul>
 8007910:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007914:	f7f8 fc22 	bl	800015c <__adddf3>
 8007918:	f7f9 f870 	bl	80009fc <__aeabi_d2iz>
 800791c:	4682      	mov	sl, r0
 800791e:	f7f8 fd69 	bl	80003f4 <__aeabi_i2d>
 8007922:	a341      	add	r3, pc, #260	; (adr r3, 8007a28 <__ieee754_exp+0x298>)
 8007924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007928:	4606      	mov	r6, r0
 800792a:	460f      	mov	r7, r1
 800792c:	f7f8 fdcc 	bl	80004c8 <__aeabi_dmul>
 8007930:	4602      	mov	r2, r0
 8007932:	460b      	mov	r3, r1
 8007934:	4628      	mov	r0, r5
 8007936:	4621      	mov	r1, r4
 8007938:	f7f8 fc0e 	bl	8000158 <__aeabi_dsub>
 800793c:	a33c      	add	r3, pc, #240	; (adr r3, 8007a30 <__ieee754_exp+0x2a0>)
 800793e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007942:	e9cd 0100 	strd	r0, r1, [sp]
 8007946:	4630      	mov	r0, r6
 8007948:	4639      	mov	r1, r7
 800794a:	f7f8 fdbd 	bl	80004c8 <__aeabi_dmul>
 800794e:	4680      	mov	r8, r0
 8007950:	4689      	mov	r9, r1
 8007952:	e770      	b.n	8007836 <__ieee754_exp+0xa6>
 8007954:	4b40      	ldr	r3, [pc, #256]	; (8007a58 <__ieee754_exp+0x2c8>)
 8007956:	429e      	cmp	r6, r3
 8007958:	d80e      	bhi.n	8007978 <__ieee754_exp+0x1e8>
 800795a:	a323      	add	r3, pc, #140	; (adr r3, 80079e8 <__ieee754_exp+0x258>)
 800795c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007960:	f7f8 fbfc 	bl	800015c <__adddf3>
 8007964:	2200      	movs	r2, #0
 8007966:	4b3a      	ldr	r3, [pc, #232]	; (8007a50 <__ieee754_exp+0x2c0>)
 8007968:	f7f9 f83e 	bl	80009e8 <__aeabi_dcmpgt>
 800796c:	b138      	cbz	r0, 800797e <__ieee754_exp+0x1ee>
 800796e:	2200      	movs	r2, #0
 8007970:	4b37      	ldr	r3, [pc, #220]	; (8007a50 <__ieee754_exp+0x2c0>)
 8007972:	4628      	mov	r0, r5
 8007974:	4621      	mov	r1, r4
 8007976:	e71f      	b.n	80077b8 <__ieee754_exp+0x28>
 8007978:	f04f 0a00 	mov.w	sl, #0
 800797c:	e763      	b.n	8007846 <__ieee754_exp+0xb6>
 800797e:	4682      	mov	sl, r0
 8007980:	e761      	b.n	8007846 <__ieee754_exp+0xb6>
 8007982:	4632      	mov	r2, r6
 8007984:	463b      	mov	r3, r7
 8007986:	2000      	movs	r0, #0
 8007988:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800798c:	f7f8 fbe4 	bl	8000158 <__aeabi_dsub>
 8007990:	4602      	mov	r2, r0
 8007992:	460b      	mov	r3, r1
 8007994:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007998:	f7f8 fec0 	bl	800071c <__aeabi_ddiv>
 800799c:	4602      	mov	r2, r0
 800799e:	460b      	mov	r3, r1
 80079a0:	4640      	mov	r0, r8
 80079a2:	4649      	mov	r1, r9
 80079a4:	f7f8 fbd8 	bl	8000158 <__aeabi_dsub>
 80079a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079ac:	f7f8 fbd4 	bl	8000158 <__aeabi_dsub>
 80079b0:	4602      	mov	r2, r0
 80079b2:	460b      	mov	r3, r1
 80079b4:	2000      	movs	r0, #0
 80079b6:	4926      	ldr	r1, [pc, #152]	; (8007a50 <__ieee754_exp+0x2c0>)
 80079b8:	f7f8 fbce 	bl	8000158 <__aeabi_dsub>
 80079bc:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80079c0:	4592      	cmp	sl, r2
 80079c2:	db02      	blt.n	80079ca <__ieee754_exp+0x23a>
 80079c4:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80079c8:	e6f8      	b.n	80077bc <__ieee754_exp+0x2c>
 80079ca:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80079ce:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80079d2:	2200      	movs	r2, #0
 80079d4:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80079d8:	e704      	b.n	80077e4 <__ieee754_exp+0x54>
 80079da:	bf00      	nop
 80079dc:	f3af 8000 	nop.w
 80079e0:	fefa39ef 	.word	0xfefa39ef
 80079e4:	40862e42 	.word	0x40862e42
 80079e8:	8800759c 	.word	0x8800759c
 80079ec:	7e37e43c 	.word	0x7e37e43c
 80079f0:	d52d3051 	.word	0xd52d3051
 80079f4:	c0874910 	.word	0xc0874910
 80079f8:	72bea4d0 	.word	0x72bea4d0
 80079fc:	3e663769 	.word	0x3e663769
 8007a00:	c5d26bf1 	.word	0xc5d26bf1
 8007a04:	3ebbbd41 	.word	0x3ebbbd41
 8007a08:	af25de2c 	.word	0xaf25de2c
 8007a0c:	3f11566a 	.word	0x3f11566a
 8007a10:	16bebd93 	.word	0x16bebd93
 8007a14:	3f66c16c 	.word	0x3f66c16c
 8007a18:	5555553e 	.word	0x5555553e
 8007a1c:	3fc55555 	.word	0x3fc55555
 8007a20:	652b82fe 	.word	0x652b82fe
 8007a24:	3ff71547 	.word	0x3ff71547
 8007a28:	fee00000 	.word	0xfee00000
 8007a2c:	3fe62e42 	.word	0x3fe62e42
 8007a30:	35793c76 	.word	0x35793c76
 8007a34:	3dea39ef 	.word	0x3dea39ef
 8007a38:	40862e41 	.word	0x40862e41
 8007a3c:	7fefffff 	.word	0x7fefffff
 8007a40:	3fd62e42 	.word	0x3fd62e42
 8007a44:	3ff0a2b1 	.word	0x3ff0a2b1
 8007a48:	08007b08 	.word	0x08007b08
 8007a4c:	08007b18 	.word	0x08007b18
 8007a50:	3ff00000 	.word	0x3ff00000
 8007a54:	08007af8 	.word	0x08007af8
 8007a58:	3e2fffff 	.word	0x3e2fffff

08007a5c <finite>:
 8007a5c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8007a60:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8007a64:	0fc0      	lsrs	r0, r0, #31
 8007a66:	4770      	bx	lr

08007a68 <matherr>:
 8007a68:	2000      	movs	r0, #0
 8007a6a:	4770      	bx	lr

08007a6c <_init>:
 8007a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6e:	bf00      	nop
 8007a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a72:	bc08      	pop	{r3}
 8007a74:	469e      	mov	lr, r3
 8007a76:	4770      	bx	lr

08007a78 <_fini>:
 8007a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7a:	bf00      	nop
 8007a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7e:	bc08      	pop	{r3}
 8007a80:	469e      	mov	lr, r3
 8007a82:	4770      	bx	lr
