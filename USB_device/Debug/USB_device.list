
USB_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08007d00  08007d00  00017d00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007da0  08007da0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08007da0  08007da0  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007da0  08007da0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007da0  08007da0  00017da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007da4  08007da4  00017da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08007da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d0c  200001e8  08007f90  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ef4  08007f90  00020ef4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f77  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002afb  00000000  00000000  00031188  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a98  00000000  00000000  00033c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000940  00000000  00000000  00034720  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001987f  00000000  00000000  00035060  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c3d4  00000000  00000000  0004e8df  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00084c48  00000000  00000000  0005acb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000df8fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c74  00000000  00000000  000df978  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08007ce4 	.word	0x08007ce4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08007ce4 	.word	0x08007ce4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	0000      	movs	r0, r0
	...

08000a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000a54:	b082      	sub	sp, #8
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	for(int x = 0; x < 1000; x++) {
 8000a58:	2300      	movs	r3, #0
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	e04d      	b.n	8000afa <main+0xaa>
		  data[x] = (int) (150 * (exp(-(x - 100) * (x - 100) / 50 ) + exp(-(x - 700) * (x - 700) / 20000  ) ));
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	3a64      	subs	r2, #100	; 0x64
 8000a68:	fb02 f303 	mul.w	r3, r2, r3
 8000a6c:	4a78      	ldr	r2, [pc, #480]	; (8000c50 <main+0x200>)
 8000a6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a72:	1112      	asrs	r2, r2, #4
 8000a74:	17db      	asrs	r3, r3, #31
 8000a76:	1ad3      	subs	r3, r2, r3
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fcbb 	bl	80003f4 <__aeabi_i2d>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	460c      	mov	r4, r1
 8000a82:	4618      	mov	r0, r3
 8000a84:	4621      	mov	r1, r4
 8000a86:	f006 ff47 	bl	8007918 <exp>
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	460d      	mov	r5, r1
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f5c3 732f 	rsb	r3, r3, #700	; 0x2bc
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	f5a2 722f 	sub.w	r2, r2, #700	; 0x2bc
 8000a9a:	fb02 f303 	mul.w	r3, r2, r3
 8000a9e:	4a6d      	ldr	r2, [pc, #436]	; (8000c54 <main+0x204>)
 8000aa0:	fb82 1203 	smull	r1, r2, r2, r3
 8000aa4:	1352      	asrs	r2, r2, #13
 8000aa6:	17db      	asrs	r3, r3, #31
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fca2 	bl	80003f4 <__aeabi_i2d>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	4610      	mov	r0, r2
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	f006 ff2e 	bl	8007918 <exp>
 8000abc:	4602      	mov	r2, r0
 8000abe:	460b      	mov	r3, r1
 8000ac0:	4620      	mov	r0, r4
 8000ac2:	4629      	mov	r1, r5
 8000ac4:	f7ff fb4a 	bl	800015c <__adddf3>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	460c      	mov	r4, r1
 8000acc:	4618      	mov	r0, r3
 8000ace:	4621      	mov	r1, r4
 8000ad0:	a35d      	add	r3, pc, #372	; (adr r3, 8000c48 <main+0x1f8>)
 8000ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ad6:	f7ff fcf7 	bl	80004c8 <__aeabi_dmul>
 8000ada:	4603      	mov	r3, r0
 8000adc:	460c      	mov	r4, r1
 8000ade:	4618      	mov	r0, r3
 8000ae0:	4621      	mov	r1, r4
 8000ae2:	f7ff ff8b 	bl	80009fc <__aeabi_d2iz>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	b2d9      	uxtb	r1, r3
 8000aea:	4a5b      	ldr	r2, [pc, #364]	; (8000c58 <main+0x208>)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4413      	add	r3, r2
 8000af0:	460a      	mov	r2, r1
 8000af2:	701a      	strb	r2, [r3, #0]
	for(int x = 0; x < 1000; x++) {
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3301      	adds	r3, #1
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b00:	dbad      	blt.n	8000a5e <main+0xe>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b02:	f000 fa57 	bl	8000fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b06:	f000 f8b3 	bl	8000c70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b0a:	f000 f90d 	bl	8000d28 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000b0e:	f006 f981 	bl	8006e14 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(haveDataToParse) {
 8000b12:	4b52      	ldr	r3, [pc, #328]	; (8000c5c <main+0x20c>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d0fb      	beq.n	8000b12 <main+0xc2>
		  if(UserRXbuffer[0] == 'r') {
 8000b1a:	4b51      	ldr	r3, [pc, #324]	; (8000c60 <main+0x210>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2b72      	cmp	r3, #114	; 0x72
 8000b20:	d118      	bne.n	8000b54 <main+0x104>
			  while(CDC_Transmit_FS(&startSymbol, 1) == USBD_BUSY);
 8000b22:	bf00      	nop
 8000b24:	2101      	movs	r1, #1
 8000b26:	484f      	ldr	r0, [pc, #316]	; (8000c64 <main+0x214>)
 8000b28:	f006 fa36 	bl	8006f98 <CDC_Transmit_FS>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d0f8      	beq.n	8000b24 <main+0xd4>
			  while(CDC_Transmit_FS(&data, 1000) == USBD_BUSY);
 8000b32:	bf00      	nop
 8000b34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b38:	4847      	ldr	r0, [pc, #284]	; (8000c58 <main+0x208>)
 8000b3a:	f006 fa2d 	bl	8006f98 <CDC_Transmit_FS>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d0f7      	beq.n	8000b34 <main+0xe4>
			  while(CDC_Transmit_FS(&stopSymbol, 1) == USBD_BUSY);
 8000b44:	bf00      	nop
 8000b46:	2101      	movs	r1, #1
 8000b48:	4847      	ldr	r0, [pc, #284]	; (8000c68 <main+0x218>)
 8000b4a:	f006 fa25 	bl	8006f98 <CDC_Transmit_FS>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d0f8      	beq.n	8000b46 <main+0xf6>
		  }
		  if(UserRXbuffer[0] == 'a') {
 8000b54:	4b42      	ldr	r3, [pc, #264]	; (8000c60 <main+0x210>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b61      	cmp	r3, #97	; 0x61
 8000b5a:	d16e      	bne.n	8000c3a <main+0x1ea>
			  for(int x = 0; x < 1000; x++) {
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	e067      	b.n	8000c32 <main+0x1e2>
			 		  data[x] = (int) (1 + rand() % 10 + 150 * (exp(-(x - 100) * (x - 100) / 50 ) + exp(-(x - 700) * (x - 700) / 20000  ) ));
 8000b62:	f006 fe31 	bl	80077c8 <rand>
 8000b66:	4601      	mov	r1, r0
 8000b68:	4b40      	ldr	r3, [pc, #256]	; (8000c6c <main+0x21c>)
 8000b6a:	fb83 2301 	smull	r2, r3, r3, r1
 8000b6e:	109a      	asrs	r2, r3, #2
 8000b70:	17cb      	asrs	r3, r1, #31
 8000b72:	1ad2      	subs	r2, r2, r3
 8000b74:	4613      	mov	r3, r2
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	4413      	add	r3, r2
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	1aca      	subs	r2, r1, r3
 8000b7e:	1c53      	adds	r3, r2, #1
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fc37 	bl	80003f4 <__aeabi_i2d>
 8000b86:	4604      	mov	r4, r0
 8000b88:	460d      	mov	r5, r1
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000b90:	683a      	ldr	r2, [r7, #0]
 8000b92:	3a64      	subs	r2, #100	; 0x64
 8000b94:	fb02 f303 	mul.w	r3, r2, r3
 8000b98:	4a2d      	ldr	r2, [pc, #180]	; (8000c50 <main+0x200>)
 8000b9a:	fb82 1203 	smull	r1, r2, r2, r3
 8000b9e:	1112      	asrs	r2, r2, #4
 8000ba0:	17db      	asrs	r3, r3, #31
 8000ba2:	1ad3      	subs	r3, r2, r3
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fc25 	bl	80003f4 <__aeabi_i2d>
 8000baa:	4602      	mov	r2, r0
 8000bac:	460b      	mov	r3, r1
 8000bae:	4610      	mov	r0, r2
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f006 feb1 	bl	8007918 <exp>
 8000bb6:	4680      	mov	r8, r0
 8000bb8:	4689      	mov	r9, r1
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	f5c3 732f 	rsb	r3, r3, #700	; 0x2bc
 8000bc0:	683a      	ldr	r2, [r7, #0]
 8000bc2:	f5a2 722f 	sub.w	r2, r2, #700	; 0x2bc
 8000bc6:	fb02 f303 	mul.w	r3, r2, r3
 8000bca:	4a22      	ldr	r2, [pc, #136]	; (8000c54 <main+0x204>)
 8000bcc:	fb82 1203 	smull	r1, r2, r2, r3
 8000bd0:	1352      	asrs	r2, r2, #13
 8000bd2:	17db      	asrs	r3, r3, #31
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fc0c 	bl	80003f4 <__aeabi_i2d>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	460b      	mov	r3, r1
 8000be0:	4610      	mov	r0, r2
 8000be2:	4619      	mov	r1, r3
 8000be4:	f006 fe98 	bl	8007918 <exp>
 8000be8:	4602      	mov	r2, r0
 8000bea:	460b      	mov	r3, r1
 8000bec:	4640      	mov	r0, r8
 8000bee:	4649      	mov	r1, r9
 8000bf0:	f7ff fab4 	bl	800015c <__adddf3>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	a312      	add	r3, pc, #72	; (adr r3, 8000c48 <main+0x1f8>)
 8000bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c02:	f7ff fc61 	bl	80004c8 <__aeabi_dmul>
 8000c06:	4602      	mov	r2, r0
 8000c08:	460b      	mov	r3, r1
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	4629      	mov	r1, r5
 8000c0e:	f7ff faa5 	bl	800015c <__adddf3>
 8000c12:	4603      	mov	r3, r0
 8000c14:	460c      	mov	r4, r1
 8000c16:	4618      	mov	r0, r3
 8000c18:	4621      	mov	r1, r4
 8000c1a:	f7ff feef 	bl	80009fc <__aeabi_d2iz>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	b2d9      	uxtb	r1, r3
 8000c22:	4a0d      	ldr	r2, [pc, #52]	; (8000c58 <main+0x208>)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	4413      	add	r3, r2
 8000c28:	460a      	mov	r2, r1
 8000c2a:	701a      	strb	r2, [r3, #0]
			  for(int x = 0; x < 1000; x++) {
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c38:	db93      	blt.n	8000b62 <main+0x112>
			 	  }
		  }
		  haveDataToParse = 0;
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <main+0x20c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
	  if(haveDataToParse) {
 8000c40:	e767      	b.n	8000b12 <main+0xc2>
 8000c42:	bf00      	nop
 8000c44:	f3af 8000 	nop.w
 8000c48:	00000000 	.word	0x00000000
 8000c4c:	4062c000 	.word	0x4062c000
 8000c50:	51eb851f 	.word	0x51eb851f
 8000c54:	68db8bad 	.word	0x68db8bad
 8000c58:	20000438 	.word	0x20000438
 8000c5c:	20000204 	.word	0x20000204
 8000c60:	20000820 	.word	0x20000820
 8000c64:	20000000 	.word	0x20000000
 8000c68:	20000001 	.word	0x20000001
 8000c6c:	66666667 	.word	0x66666667

08000c70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b094      	sub	sp, #80	; 0x50
 8000c74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c7a:	2228      	movs	r2, #40	; 0x28
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f006 fd9a 	bl	80077b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ca4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000caa:	2300      	movs	r3, #0
 8000cac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000cbc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f001 fff2 	bl	8002cb0 <HAL_RCC_OscConfig>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000cd2:	f000 f897 	bl	8000e04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd6:	230f      	movs	r3, #15
 8000cd8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f002 fa5c 	bl	80031b0 <HAL_RCC_ClockConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000cfe:	f000 f881 	bl	8000e04 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d02:	2310      	movs	r3, #16
 8000d04:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000d06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d0a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f002 fbb8 	bl	8003484 <HAL_RCCEx_PeriphCLKConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d1a:	f000 f873 	bl	8000e04 <Error_Handler>
  }
}
 8000d1e:	bf00      	nop
 8000d20:	3750      	adds	r7, #80	; 0x50
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2e:	f107 0310 	add.w	r3, r7, #16
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <MX_GPIO_Init+0x90>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4a1d      	ldr	r2, [pc, #116]	; (8000db8 <MX_GPIO_Init+0x90>)
 8000d42:	f043 0310 	orr.w	r3, r3, #16
 8000d46:	6193      	str	r3, [r2, #24]
 8000d48:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <MX_GPIO_Init+0x90>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f003 0310 	and.w	r3, r3, #16
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d54:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <MX_GPIO_Init+0x90>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a17      	ldr	r2, [pc, #92]	; (8000db8 <MX_GPIO_Init+0x90>)
 8000d5a:	f043 0320 	orr.w	r3, r3, #32
 8000d5e:	6193      	str	r3, [r2, #24]
 8000d60:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <MX_GPIO_Init+0x90>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	f003 0320 	and.w	r3, r3, #32
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <MX_GPIO_Init+0x90>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4a11      	ldr	r2, [pc, #68]	; (8000db8 <MX_GPIO_Init+0x90>)
 8000d72:	f043 0304 	orr.w	r3, r3, #4
 8000d76:	6193      	str	r3, [r2, #24]
 8000d78:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <MX_GPIO_Init+0x90>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f003 0304 	and.w	r3, r3, #4
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d8a:	480c      	ldr	r0, [pc, #48]	; (8000dbc <MX_GPIO_Init+0x94>)
 8000d8c:	f000 fbdc 	bl	8001548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da2:	f107 0310 	add.w	r3, r7, #16
 8000da6:	4619      	mov	r1, r3
 8000da8:	4804      	ldr	r0, [pc, #16]	; (8000dbc <MX_GPIO_Init+0x94>)
 8000daa:	f000 fa73 	bl	8001294 <HAL_GPIO_Init>

}
 8000dae:	bf00      	nop
 8000db0:	3720      	adds	r7, #32
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	40011000 	.word	0x40011000

08000dc0 <CDC_Recive_Callback>:

/* USER CODE BEGIN 4 */
void CDC_Recive_Callback(uint8_t* Buf, uint16_t* len) {
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
	memcpy(&UserRXbuffer, Buf, 16);
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <CDC_Recive_Callback+0x38>)
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	6814      	ldr	r4, [r2, #0]
 8000dd0:	6850      	ldr	r0, [r2, #4]
 8000dd2:	6891      	ldr	r1, [r2, #8]
 8000dd4:	68d2      	ldr	r2, [r2, #12]
 8000dd6:	601c      	str	r4, [r3, #0]
 8000dd8:	6058      	str	r0, [r3, #4]
 8000dda:	6099      	str	r1, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000dde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000de2:	4806      	ldr	r0, [pc, #24]	; (8000dfc <CDC_Recive_Callback+0x3c>)
 8000de4:	f000 fbc8 	bl	8001578 <HAL_GPIO_TogglePin>
	haveDataToParse = 1;
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <CDC_Recive_Callback+0x40>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	701a      	strb	r2, [r3, #0]
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd90      	pop	{r4, r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000820 	.word	0x20000820
 8000dfc:	40011000 	.word	0x40011000
 8000e00:	20000204 	.word	0x20000204

08000e04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr

08000e10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <HAL_MspInit+0x5c>)
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <HAL_MspInit+0x5c>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6193      	str	r3, [r2, #24]
 8000e22:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HAL_MspInit+0x5c>)
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <HAL_MspInit+0x5c>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	4a0e      	ldr	r2, [pc, #56]	; (8000e6c <HAL_MspInit+0x5c>)
 8000e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e38:	61d3      	str	r3, [r2, #28]
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <HAL_MspInit+0x5c>)
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <HAL_MspInit+0x60>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <HAL_MspInit+0x60>)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e62:	bf00      	nop
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40010000 	.word	0x40010000

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr

08000e80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <HardFault_Handler+0x4>

08000e86 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <MemManage_Handler+0x4>

08000e8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <BusFault_Handler+0x4>

08000e92 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <UsageFault_Handler+0x4>

08000e98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr

08000ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr

08000eb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr

08000ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec0:	f000 f8be 	bl	8001040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000ece:	f000 fc9d 	bl	800180c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000c04 	.word	0x20000c04

08000edc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ee0:	4802      	ldr	r0, [pc, #8]	; (8000eec <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000ee2:	f000 fc93 	bl	800180c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000c04 	.word	0x20000c04

08000ef0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef8:	4a14      	ldr	r2, [pc, #80]	; (8000f4c <_sbrk+0x5c>)
 8000efa:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <_sbrk+0x60>)
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f04:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <_sbrk+0x64>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d102      	bne.n	8000f12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <_sbrk+0x64>)
 8000f0e:	4a12      	ldr	r2, [pc, #72]	; (8000f58 <_sbrk+0x68>)
 8000f10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <_sbrk+0x64>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d207      	bcs.n	8000f30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f20:	f006 fc20 	bl	8007764 <__errno>
 8000f24:	4602      	mov	r2, r0
 8000f26:	230c      	movs	r3, #12
 8000f28:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2e:	e009      	b.n	8000f44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <_sbrk+0x64>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f36:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <_sbrk+0x64>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	4a05      	ldr	r2, [pc, #20]	; (8000f54 <_sbrk+0x64>)
 8000f40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f42:	68fb      	ldr	r3, [r7, #12]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3718      	adds	r7, #24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20005000 	.word	0x20005000
 8000f50:	00000400 	.word	0x00000400
 8000f54:	20000208 	.word	0x20000208
 8000f58:	20000ef8 	.word	0x20000ef8

08000f5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr

08000f68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f68:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f6a:	e003      	b.n	8000f74 <LoopCopyDataInit>

08000f6c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000f6e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f70:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f72:	3104      	adds	r1, #4

08000f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f74:	480a      	ldr	r0, [pc, #40]	; (8000fa0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000f76:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000f78:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f7a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f7c:	d3f6      	bcc.n	8000f6c <CopyDataInit>
  ldr r2, =_sbss
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000f80:	e002      	b.n	8000f88 <LoopFillZerobss>

08000f82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000f84:	f842 3b04 	str.w	r3, [r2], #4

08000f88 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000f8a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f8c:	d3f9      	bcc.n	8000f82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f8e:	f7ff ffe5 	bl	8000f5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f92:	f006 fbed 	bl	8007770 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f96:	f7ff fd5b 	bl	8000a50 <main>
  bx lr
 8000f9a:	4770      	bx	lr
  ldr r3, =_sidata
 8000f9c:	08007da8 	.word	0x08007da8
  ldr r0, =_sdata
 8000fa0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000fa4:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 8000fa8:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 8000fac:	20000ef4 	.word	0x20000ef4

08000fb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb0:	e7fe      	b.n	8000fb0 <ADC1_2_IRQHandler>
	...

08000fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <HAL_Init+0x28>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_Init+0x28>)
 8000fbe:	f043 0310 	orr.w	r3, r3, #16
 8000fc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 f923 	bl	8001210 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f000 f808 	bl	8000fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd0:	f7ff ff1e 	bl	8000e10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40022000 	.word	0x40022000

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x54>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x58>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 f93b 	bl	800127a <HAL_SYSTICK_Config>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e00e      	b.n	800102c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b0f      	cmp	r3, #15
 8001012:	d80a      	bhi.n	800102a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001014:	2200      	movs	r2, #0
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f000 f903 	bl	8001226 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <HAL_InitTick+0x5c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	e000      	b.n	800102c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000004 	.word	0x20000004
 8001038:	2000000c 	.word	0x2000000c
 800103c:	20000008 	.word	0x20000008

08001040 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <HAL_IncTick+0x1c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_IncTick+0x20>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a03      	ldr	r2, [pc, #12]	; (8001060 <HAL_IncTick+0x20>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	2000000c 	.word	0x2000000c
 8001060:	20000830 	.word	0x20000830

08001064 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b02      	ldr	r3, [pc, #8]	; (8001074 <HAL_GetTick+0x10>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	20000830 	.word	0x20000830

08001078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001094:	4013      	ands	r3, r2
 8001096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010aa:	4a04      	ldr	r2, [pc, #16]	; (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	60d3      	str	r3, [r2, #12]
}
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <__NVIC_GetPriorityGrouping+0x18>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	f003 0307 	and.w	r3, r3, #7
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	db0b      	blt.n	8001106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	f003 021f 	and.w	r2, r3, #31
 80010f4:	4906      	ldr	r1, [pc, #24]	; (8001110 <__NVIC_EnableIRQ+0x34>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	095b      	lsrs	r3, r3, #5
 80010fc:	2001      	movs	r0, #1
 80010fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	e000e100 	.word	0xe000e100

08001114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	2b00      	cmp	r3, #0
 8001126:	db0a      	blt.n	800113e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	b2da      	uxtb	r2, r3
 800112c:	490c      	ldr	r1, [pc, #48]	; (8001160 <__NVIC_SetPriority+0x4c>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	440b      	add	r3, r1
 8001138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800113c:	e00a      	b.n	8001154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4908      	ldr	r1, [pc, #32]	; (8001164 <__NVIC_SetPriority+0x50>)
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	3b04      	subs	r3, #4
 800114c:	0112      	lsls	r2, r2, #4
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	440b      	add	r3, r1
 8001152:	761a      	strb	r2, [r3, #24]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000e100 	.word	0xe000e100
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f1c3 0307 	rsb	r3, r3, #7
 8001182:	2b04      	cmp	r3, #4
 8001184:	bf28      	it	cs
 8001186:	2304      	movcs	r3, #4
 8001188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3304      	adds	r3, #4
 800118e:	2b06      	cmp	r3, #6
 8001190:	d902      	bls.n	8001198 <NVIC_EncodePriority+0x30>
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3b03      	subs	r3, #3
 8001196:	e000      	b.n	800119a <NVIC_EncodePriority+0x32>
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	f04f 32ff 	mov.w	r2, #4294967295
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43da      	mvns	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	401a      	ands	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b0:	f04f 31ff 	mov.w	r1, #4294967295
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	43d9      	mvns	r1, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	4313      	orrs	r3, r2
         );
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3724      	adds	r7, #36	; 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011dc:	d301      	bcc.n	80011e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011de:	2301      	movs	r3, #1
 80011e0:	e00f      	b.n	8001202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e2:	4a0a      	ldr	r2, [pc, #40]	; (800120c <SysTick_Config+0x40>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ea:	210f      	movs	r1, #15
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295
 80011f0:	f7ff ff90 	bl	8001114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <SysTick_Config+0x40>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fa:	4b04      	ldr	r3, [pc, #16]	; (800120c <SysTick_Config+0x40>)
 80011fc:	2207      	movs	r2, #7
 80011fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	e000e010 	.word	0xe000e010

08001210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ff2d 	bl	8001078 <__NVIC_SetPriorityGrouping>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001226:	b580      	push	{r7, lr}
 8001228:	b086      	sub	sp, #24
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
 8001232:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001238:	f7ff ff42 	bl	80010c0 <__NVIC_GetPriorityGrouping>
 800123c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	68b9      	ldr	r1, [r7, #8]
 8001242:	6978      	ldr	r0, [r7, #20]
 8001244:	f7ff ff90 	bl	8001168 <NVIC_EncodePriority>
 8001248:	4602      	mov	r2, r0
 800124a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff5f 	bl	8001114 <__NVIC_SetPriority>
}
 8001256:	bf00      	nop
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff35 	bl	80010dc <__NVIC_EnableIRQ>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ffa2 	bl	80011cc <SysTick_Config>
 8001288:	4603      	mov	r3, r0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001294:	b480      	push	{r7}
 8001296:	b08b      	sub	sp, #44	; 0x2c
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800129e:	2300      	movs	r3, #0
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a6:	e127      	b.n	80014f8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012a8:	2201      	movs	r2, #1
 80012aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	69fa      	ldr	r2, [r7, #28]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	f040 8116 	bne.w	80014f2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b12      	cmp	r3, #18
 80012cc:	d034      	beq.n	8001338 <HAL_GPIO_Init+0xa4>
 80012ce:	2b12      	cmp	r3, #18
 80012d0:	d80d      	bhi.n	80012ee <HAL_GPIO_Init+0x5a>
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d02b      	beq.n	800132e <HAL_GPIO_Init+0x9a>
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d804      	bhi.n	80012e4 <HAL_GPIO_Init+0x50>
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d031      	beq.n	8001342 <HAL_GPIO_Init+0xae>
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d01c      	beq.n	800131c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012e2:	e048      	b.n	8001376 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	d043      	beq.n	8001370 <HAL_GPIO_Init+0xdc>
 80012e8:	2b11      	cmp	r3, #17
 80012ea:	d01b      	beq.n	8001324 <HAL_GPIO_Init+0x90>
          break;
 80012ec:	e043      	b.n	8001376 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012ee:	4a89      	ldr	r2, [pc, #548]	; (8001514 <HAL_GPIO_Init+0x280>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d026      	beq.n	8001342 <HAL_GPIO_Init+0xae>
 80012f4:	4a87      	ldr	r2, [pc, #540]	; (8001514 <HAL_GPIO_Init+0x280>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d806      	bhi.n	8001308 <HAL_GPIO_Init+0x74>
 80012fa:	4a87      	ldr	r2, [pc, #540]	; (8001518 <HAL_GPIO_Init+0x284>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d020      	beq.n	8001342 <HAL_GPIO_Init+0xae>
 8001300:	4a86      	ldr	r2, [pc, #536]	; (800151c <HAL_GPIO_Init+0x288>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d01d      	beq.n	8001342 <HAL_GPIO_Init+0xae>
          break;
 8001306:	e036      	b.n	8001376 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001308:	4a85      	ldr	r2, [pc, #532]	; (8001520 <HAL_GPIO_Init+0x28c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d019      	beq.n	8001342 <HAL_GPIO_Init+0xae>
 800130e:	4a85      	ldr	r2, [pc, #532]	; (8001524 <HAL_GPIO_Init+0x290>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d016      	beq.n	8001342 <HAL_GPIO_Init+0xae>
 8001314:	4a84      	ldr	r2, [pc, #528]	; (8001528 <HAL_GPIO_Init+0x294>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d013      	beq.n	8001342 <HAL_GPIO_Init+0xae>
          break;
 800131a:	e02c      	b.n	8001376 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	623b      	str	r3, [r7, #32]
          break;
 8001322:	e028      	b.n	8001376 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	3304      	adds	r3, #4
 800132a:	623b      	str	r3, [r7, #32]
          break;
 800132c:	e023      	b.n	8001376 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	3308      	adds	r3, #8
 8001334:	623b      	str	r3, [r7, #32]
          break;
 8001336:	e01e      	b.n	8001376 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	330c      	adds	r3, #12
 800133e:	623b      	str	r3, [r7, #32]
          break;
 8001340:	e019      	b.n	8001376 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d102      	bne.n	8001350 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800134a:	2304      	movs	r3, #4
 800134c:	623b      	str	r3, [r7, #32]
          break;
 800134e:	e012      	b.n	8001376 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d105      	bne.n	8001364 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001358:	2308      	movs	r3, #8
 800135a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69fa      	ldr	r2, [r7, #28]
 8001360:	611a      	str	r2, [r3, #16]
          break;
 8001362:	e008      	b.n	8001376 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001364:	2308      	movs	r3, #8
 8001366:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69fa      	ldr	r2, [r7, #28]
 800136c:	615a      	str	r2, [r3, #20]
          break;
 800136e:	e002      	b.n	8001376 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001370:	2300      	movs	r3, #0
 8001372:	623b      	str	r3, [r7, #32]
          break;
 8001374:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	2bff      	cmp	r3, #255	; 0xff
 800137a:	d801      	bhi.n	8001380 <HAL_GPIO_Init+0xec>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	e001      	b.n	8001384 <HAL_GPIO_Init+0xf0>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3304      	adds	r3, #4
 8001384:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	2bff      	cmp	r3, #255	; 0xff
 800138a:	d802      	bhi.n	8001392 <HAL_GPIO_Init+0xfe>
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	e002      	b.n	8001398 <HAL_GPIO_Init+0x104>
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	3b08      	subs	r3, #8
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	210f      	movs	r1, #15
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	401a      	ands	r2, r3
 80013aa:	6a39      	ldr	r1, [r7, #32]
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	fa01 f303 	lsl.w	r3, r1, r3
 80013b2:	431a      	orrs	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 8096 	beq.w	80014f2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013c6:	4b59      	ldr	r3, [pc, #356]	; (800152c <HAL_GPIO_Init+0x298>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	4a58      	ldr	r2, [pc, #352]	; (800152c <HAL_GPIO_Init+0x298>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6193      	str	r3, [r2, #24]
 80013d2:	4b56      	ldr	r3, [pc, #344]	; (800152c <HAL_GPIO_Init+0x298>)
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013de:	4a54      	ldr	r2, [pc, #336]	; (8001530 <HAL_GPIO_Init+0x29c>)
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	089b      	lsrs	r3, r3, #2
 80013e4:	3302      	adds	r3, #2
 80013e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ea:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	220f      	movs	r2, #15
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	4013      	ands	r3, r2
 8001400:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a4b      	ldr	r2, [pc, #300]	; (8001534 <HAL_GPIO_Init+0x2a0>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d013      	beq.n	8001432 <HAL_GPIO_Init+0x19e>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a4a      	ldr	r2, [pc, #296]	; (8001538 <HAL_GPIO_Init+0x2a4>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d00d      	beq.n	800142e <HAL_GPIO_Init+0x19a>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a49      	ldr	r2, [pc, #292]	; (800153c <HAL_GPIO_Init+0x2a8>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d007      	beq.n	800142a <HAL_GPIO_Init+0x196>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a48      	ldr	r2, [pc, #288]	; (8001540 <HAL_GPIO_Init+0x2ac>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d101      	bne.n	8001426 <HAL_GPIO_Init+0x192>
 8001422:	2303      	movs	r3, #3
 8001424:	e006      	b.n	8001434 <HAL_GPIO_Init+0x1a0>
 8001426:	2304      	movs	r3, #4
 8001428:	e004      	b.n	8001434 <HAL_GPIO_Init+0x1a0>
 800142a:	2302      	movs	r3, #2
 800142c:	e002      	b.n	8001434 <HAL_GPIO_Init+0x1a0>
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <HAL_GPIO_Init+0x1a0>
 8001432:	2300      	movs	r3, #0
 8001434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001436:	f002 0203 	and.w	r2, r2, #3
 800143a:	0092      	lsls	r2, r2, #2
 800143c:	4093      	lsls	r3, r2
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	4313      	orrs	r3, r2
 8001442:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001444:	493a      	ldr	r1, [pc, #232]	; (8001530 <HAL_GPIO_Init+0x29c>)
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	089b      	lsrs	r3, r3, #2
 800144a:	3302      	adds	r3, #2
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d006      	beq.n	800146c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800145e:	4b39      	ldr	r3, [pc, #228]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	4938      	ldr	r1, [pc, #224]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
 800146a:	e006      	b.n	800147a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800146c:	4b35      	ldr	r3, [pc, #212]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	43db      	mvns	r3, r3
 8001474:	4933      	ldr	r1, [pc, #204]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 8001476:	4013      	ands	r3, r2
 8001478:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d006      	beq.n	8001494 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001486:	4b2f      	ldr	r3, [pc, #188]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	492e      	ldr	r1, [pc, #184]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	4313      	orrs	r3, r2
 8001490:	604b      	str	r3, [r1, #4]
 8001492:	e006      	b.n	80014a2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001494:	4b2b      	ldr	r3, [pc, #172]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	43db      	mvns	r3, r3
 800149c:	4929      	ldr	r1, [pc, #164]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 800149e:	4013      	ands	r3, r2
 80014a0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d006      	beq.n	80014bc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014ae:	4b25      	ldr	r3, [pc, #148]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	4924      	ldr	r1, [pc, #144]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	608b      	str	r3, [r1, #8]
 80014ba:	e006      	b.n	80014ca <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014bc:	4b21      	ldr	r3, [pc, #132]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	43db      	mvns	r3, r3
 80014c4:	491f      	ldr	r1, [pc, #124]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80014c6:	4013      	ands	r3, r2
 80014c8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d006      	beq.n	80014e4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014d6:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80014d8:	68da      	ldr	r2, [r3, #12]
 80014da:	491a      	ldr	r1, [pc, #104]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	4313      	orrs	r3, r2
 80014e0:	60cb      	str	r3, [r1, #12]
 80014e2:	e006      	b.n	80014f2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014e4:	4b17      	ldr	r3, [pc, #92]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80014e6:	68da      	ldr	r2, [r3, #12]
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	4915      	ldr	r1, [pc, #84]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80014ee:	4013      	ands	r3, r2
 80014f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	3301      	adds	r3, #1
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	f47f aed0 	bne.w	80012a8 <HAL_GPIO_Init+0x14>
  }
}
 8001508:	bf00      	nop
 800150a:	372c      	adds	r7, #44	; 0x2c
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	10210000 	.word	0x10210000
 8001518:	10110000 	.word	0x10110000
 800151c:	10120000 	.word	0x10120000
 8001520:	10310000 	.word	0x10310000
 8001524:	10320000 	.word	0x10320000
 8001528:	10220000 	.word	0x10220000
 800152c:	40021000 	.word	0x40021000
 8001530:	40010000 	.word	0x40010000
 8001534:	40010800 	.word	0x40010800
 8001538:	40010c00 	.word	0x40010c00
 800153c:	40011000 	.word	0x40011000
 8001540:	40011400 	.word	0x40011400
 8001544:	40010400 	.word	0x40010400

08001548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	807b      	strh	r3, [r7, #2]
 8001554:	4613      	mov	r3, r2
 8001556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001558:	787b      	ldrb	r3, [r7, #1]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800155e:	887a      	ldrh	r2, [r7, #2]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001564:	e003      	b.n	800156e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001566:	887b      	ldrh	r3, [r7, #2]
 8001568:	041a      	lsls	r2, r3, #16
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	611a      	str	r2, [r3, #16]
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800158a:	887a      	ldrh	r2, [r7, #2]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4013      	ands	r3, r2
 8001590:	041a      	lsls	r2, r3, #16
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	43d9      	mvns	r1, r3
 8001596:	887b      	ldrh	r3, [r7, #2]
 8001598:	400b      	ands	r3, r1
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	611a      	str	r2, [r3, #16]
}
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr

080015aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ac:	b08b      	sub	sp, #44	; 0x2c
 80015ae:	af06      	add	r7, sp, #24
 80015b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e0fd      	b.n	80017b8 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d106      	bne.n	80015d6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f005 fe15 	bl	8007200 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2203      	movs	r2, #3
 80015da:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f002 f82a 	bl	800363c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	603b      	str	r3, [r7, #0]
 80015ee:	687e      	ldr	r6, [r7, #4]
 80015f0:	466d      	mov	r5, sp
 80015f2:	f106 0410 	add.w	r4, r6, #16
 80015f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015fa:	6823      	ldr	r3, [r4, #0]
 80015fc:	602b      	str	r3, [r5, #0]
 80015fe:	1d33      	adds	r3, r6, #4
 8001600:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001602:	6838      	ldr	r0, [r7, #0]
 8001604:	f001 fff4 	bl	80035f0 <USB_CoreInit>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d005      	beq.n	800161a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2202      	movs	r2, #2
 8001612:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e0ce      	b.n	80017b8 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f002 f825 	bl	8003670 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001626:	2300      	movs	r3, #0
 8001628:	73fb      	strb	r3, [r7, #15]
 800162a:	e04c      	b.n	80016c6 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	1c5a      	adds	r2, r3, #1
 8001632:	4613      	mov	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	440b      	add	r3, r1
 800163c:	3301      	adds	r3, #1
 800163e:	2201      	movs	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	1c5a      	adds	r2, r3, #1
 8001648:	4613      	mov	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	440b      	add	r3, r1
 8001652:	7bfa      	ldrb	r2, [r7, #15]
 8001654:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001656:	7bfa      	ldrb	r2, [r7, #15]
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	b298      	uxth	r0, r3
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	440b      	add	r3, r1
 8001668:	3336      	adds	r3, #54	; 0x36
 800166a:	4602      	mov	r2, r0
 800166c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	4613      	mov	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	440b      	add	r3, r1
 800167e:	3303      	adds	r3, #3
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001684:	7bfa      	ldrb	r2, [r7, #15]
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	440b      	add	r3, r1
 8001692:	3338      	adds	r3, #56	; 0x38
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001698:	7bfa      	ldrb	r2, [r7, #15]
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	440b      	add	r3, r1
 80016a6:	333c      	adds	r3, #60	; 0x3c
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016ac:	7bfa      	ldrb	r2, [r7, #15]
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	4613      	mov	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	440b      	add	r3, r1
 80016ba:	3340      	adds	r3, #64	; 0x40
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	3301      	adds	r3, #1
 80016c4:	73fb      	strb	r3, [r7, #15]
 80016c6:	7bfa      	ldrb	r2, [r7, #15]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d3ad      	bcc.n	800162c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016d0:	2300      	movs	r3, #0
 80016d2:	73fb      	strb	r3, [r7, #15]
 80016d4:	e044      	b.n	8001760 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016d6:	7bfa      	ldrb	r2, [r7, #15]
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	440b      	add	r3, r1
 80016e4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80016e8:	2200      	movs	r2, #0
 80016ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016ec:	7bfa      	ldrb	r2, [r7, #15]
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	440b      	add	r3, r1
 80016fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016fe:	7bfa      	ldrb	r2, [r7, #15]
 8001700:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001702:	7bfa      	ldrb	r2, [r7, #15]
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	4613      	mov	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	440b      	add	r3, r1
 8001710:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001714:	2200      	movs	r2, #0
 8001716:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001718:	7bfa      	ldrb	r2, [r7, #15]
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	440b      	add	r3, r1
 8001726:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800172e:	7bfa      	ldrb	r2, [r7, #15]
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	440b      	add	r3, r1
 800173c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001744:	7bfa      	ldrb	r2, [r7, #15]
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	440b      	add	r3, r1
 8001752:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	3301      	adds	r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
 8001760:	7bfa      	ldrb	r2, [r7, #15]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	429a      	cmp	r2, r3
 8001768:	d3b5      	bcc.n	80016d6 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	603b      	str	r3, [r7, #0]
 8001770:	687e      	ldr	r6, [r7, #4]
 8001772:	466d      	mov	r5, sp
 8001774:	f106 0410 	add.w	r4, r6, #16
 8001778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800177a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800177c:	6823      	ldr	r3, [r4, #0]
 800177e:	602b      	str	r3, [r5, #0]
 8001780:	1d33      	adds	r3, r6, #4
 8001782:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001784:	6838      	ldr	r0, [r7, #0]
 8001786:	f001 ff7f 	bl	8003688 <USB_DevInit>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2202      	movs	r2, #2
 8001794:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e00d      	b.n	80017b8 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f003 ff19 	bl	80055e8 <USB_DevDisconnect>

  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017c0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d101      	bne.n	80017d6 <HAL_PCD_Start+0x16>
 80017d2:	2302      	movs	r3, #2
 80017d4:	e016      	b.n	8001804 <HAL_PCD_Start+0x44>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f001 ff14 	bl	8003610 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80017e8:	2101      	movs	r1, #1
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f005 ff83 	bl	80076f6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f003 feed 	bl	80055d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b088      	sub	sp, #32
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f003 feef 	bl	80055fc <USB_ReadInterrupts>
 800181e:	4603      	mov	r3, r0
 8001820:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001824:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001828:	d102      	bne.n	8001830 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 fb61 	bl	8001ef2 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f003 fee1 	bl	80055fc <USB_ReadInterrupts>
 800183a:	4603      	mov	r3, r0
 800183c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001844:	d112      	bne.n	800186c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800184e:	b29a      	uxth	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001858:	b292      	uxth	r2, r2
 800185a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f005 fd51 	bl	8007306 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001864:	2100      	movs	r1, #0
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 f925 	bl	8001ab6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f003 fec3 	bl	80055fc <USB_ReadInterrupts>
 8001876:	4603      	mov	r3, r0
 8001878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800187c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001880:	d10b      	bne.n	800189a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800188a:	b29a      	uxth	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001894:	b292      	uxth	r2, r2
 8001896:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f003 feac 	bl	80055fc <USB_ReadInterrupts>
 80018a4:	4603      	mov	r3, r0
 80018a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018ae:	d10b      	bne.n	80018c8 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018c2:	b292      	uxth	r2, r2
 80018c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f003 fe95 	bl	80055fc <USB_ReadInterrupts>
 80018d2:	4603      	mov	r3, r0
 80018d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018dc:	d126      	bne.n	800192c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 0204 	bic.w	r2, r2, #4
 80018f0:	b292      	uxth	r2, r2
 80018f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018fe:	b29a      	uxth	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 0208 	bic.w	r2, r2, #8
 8001908:	b292      	uxth	r2, r2
 800190a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f005 fd32 	bl	8007378 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800191c:	b29a      	uxth	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001926:	b292      	uxth	r2, r2
 8001928:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f003 fe63 	bl	80055fc <USB_ReadInterrupts>
 8001936:	4603      	mov	r3, r0
 8001938:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800193c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001940:	f040 8084 	bne.w	8001a4c <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001944:	2300      	movs	r3, #0
 8001946:	77fb      	strb	r3, [r7, #31]
 8001948:	e011      	b.n	800196e <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	461a      	mov	r2, r3
 8001950:	7ffb      	ldrb	r3, [r7, #31]
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	441a      	add	r2, r3
 8001956:	7ffb      	ldrb	r3, [r7, #31]
 8001958:	8812      	ldrh	r2, [r2, #0]
 800195a:	b292      	uxth	r2, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	f107 0120 	add.w	r1, r7, #32
 8001962:	440b      	add	r3, r1
 8001964:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001968:	7ffb      	ldrb	r3, [r7, #31]
 800196a:	3301      	adds	r3, #1
 800196c:	77fb      	strb	r3, [r7, #31]
 800196e:	7ffb      	ldrb	r3, [r7, #31]
 8001970:	2b07      	cmp	r3, #7
 8001972:	d9ea      	bls.n	800194a <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800197c:	b29a      	uxth	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f042 0201 	orr.w	r2, r2, #1
 8001986:	b292      	uxth	r2, r2
 8001988:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001994:	b29a      	uxth	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 0201 	bic.w	r2, r2, #1
 800199e:	b292      	uxth	r2, r2
 80019a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80019a4:	bf00      	nop
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0f6      	beq.n	80019a6 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019ca:	b292      	uxth	r2, r2
 80019cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80019d0:	2300      	movs	r3, #0
 80019d2:	77fb      	strb	r3, [r7, #31]
 80019d4:	e010      	b.n	80019f8 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80019d6:	7ffb      	ldrb	r3, [r7, #31]
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6812      	ldr	r2, [r2, #0]
 80019dc:	4611      	mov	r1, r2
 80019de:	7ffa      	ldrb	r2, [r7, #31]
 80019e0:	0092      	lsls	r2, r2, #2
 80019e2:	440a      	add	r2, r1
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	f107 0120 	add.w	r1, r7, #32
 80019ea:	440b      	add	r3, r1
 80019ec:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80019f0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80019f2:	7ffb      	ldrb	r3, [r7, #31]
 80019f4:	3301      	adds	r3, #1
 80019f6:	77fb      	strb	r3, [r7, #31]
 80019f8:	7ffb      	ldrb	r3, [r7, #31]
 80019fa:	2b07      	cmp	r3, #7
 80019fc:	d9eb      	bls.n	80019d6 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f042 0208 	orr.w	r2, r2, #8
 8001a10:	b292      	uxth	r2, r2
 8001a12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a28:	b292      	uxth	r2, r2
 8001a2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f042 0204 	orr.w	r2, r2, #4
 8001a40:	b292      	uxth	r2, r2
 8001a42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f005 fc7c 	bl	8007344 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f003 fdd3 	bl	80055fc <USB_ReadInterrupts>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a60:	d10e      	bne.n	8001a80 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a74:	b292      	uxth	r2, r2
 8001a76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f005 fc35 	bl	80072ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f003 fdb9 	bl	80055fc <USB_ReadInterrupts>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a94:	d10b      	bne.n	8001aae <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001aa8:	b292      	uxth	r2, r2
 8001aaa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001aae:	bf00      	nop
 8001ab0:	3720      	adds	r7, #32
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d101      	bne.n	8001ad0 <HAL_PCD_SetAddress+0x1a>
 8001acc:	2302      	movs	r3, #2
 8001ace:	e013      	b.n	8001af8 <HAL_PCD_SetAddress+0x42>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	78fa      	ldrb	r2, [r7, #3]
 8001adc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	78fa      	ldrb	r2, [r7, #3]
 8001ae6:	4611      	mov	r1, r2
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f003 fd60 	bl	80055ae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	4608      	mov	r0, r1
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4603      	mov	r3, r0
 8001b10:	70fb      	strb	r3, [r7, #3]
 8001b12:	460b      	mov	r3, r1
 8001b14:	803b      	strh	r3, [r7, #0]
 8001b16:	4613      	mov	r3, r2
 8001b18:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	da0e      	bge.n	8001b44 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b26:	78fb      	ldrb	r3, [r7, #3]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	1c5a      	adds	r2, r3, #1
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	705a      	strb	r2, [r3, #1]
 8001b42:	e00e      	b.n	8001b62 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b44:	78fb      	ldrb	r3, [r7, #3]
 8001b46:	f003 0207 	and.w	r2, r3, #7
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b62:	78fb      	ldrb	r3, [r7, #3]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b6e:	883a      	ldrh	r2, [r7, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	78ba      	ldrb	r2, [r7, #2]
 8001b78:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	785b      	ldrb	r3, [r3, #1]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d004      	beq.n	8001b8c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b8c:	78bb      	ldrb	r3, [r7, #2]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d102      	bne.n	8001b98 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d101      	bne.n	8001ba6 <HAL_PCD_EP_Open+0xa6>
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	e00e      	b.n	8001bc4 <HAL_PCD_EP_Open+0xc4>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68f9      	ldr	r1, [r7, #12]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f001 fd87 	bl	80036c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001bc2:	7afb      	ldrb	r3, [r7, #11]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	da0e      	bge.n	8001bfe <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001be0:	78fb      	ldrb	r3, [r7, #3]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	705a      	strb	r2, [r3, #1]
 8001bfc:	e00e      	b.n	8001c1c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bfe:	78fb      	ldrb	r3, [r7, #3]
 8001c00:	f003 0207 	and.w	r2, r3, #7
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	4413      	add	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c1c:	78fb      	ldrb	r3, [r7, #3]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d101      	bne.n	8001c36 <HAL_PCD_EP_Close+0x6a>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e00e      	b.n	8001c54 <HAL_PCD_EP_Close+0x88>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68f9      	ldr	r1, [r7, #12]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f002 f8a9 	bl	8003d9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c6c:	7afb      	ldrb	r3, [r7, #11]
 8001c6e:	f003 0207 	and.w	r2, r3, #7
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	4413      	add	r3, r2
 8001c82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	2200      	movs	r2, #0
 8001c94:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c9c:	7afb      	ldrb	r3, [r7, #11]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ca8:	7afb      	ldrb	r3, [r7, #11]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d106      	bne.n	8001cc0 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6979      	ldr	r1, [r7, #20]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f002 fa5b 	bl	8004174 <USB_EPStartXfer>
 8001cbe:	e005      	b.n	8001ccc <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6979      	ldr	r1, [r7, #20]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f002 fa54 	bl	8004174 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ce2:	78fb      	ldrb	r3, [r7, #3]
 8001ce4:	f003 0207 	and.w	r2, r3, #7
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	4613      	mov	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	440b      	add	r3, r1
 8001cf4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001cf8:	681b      	ldr	r3, [r3, #0]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	603b      	str	r3, [r7, #0]
 8001d10:	460b      	mov	r3, r1
 8001d12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d14:	7afb      	ldrb	r3, [r7, #11]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	4413      	add	r3, r2
 8001d28:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	2200      	movs	r2, #0
 8001d48:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d50:	7afb      	ldrb	r3, [r7, #11]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d5c:	7afb      	ldrb	r3, [r7, #11]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d106      	bne.n	8001d74 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6979      	ldr	r1, [r7, #20]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f002 fa01 	bl	8004174 <USB_EPStartXfer>
 8001d72:	e005      	b.n	8001d80 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6979      	ldr	r1, [r7, #20]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f002 f9fa 	bl	8004174 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b084      	sub	sp, #16
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	460b      	mov	r3, r1
 8001d94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d96:	78fb      	ldrb	r3, [r7, #3]
 8001d98:	f003 0207 	and.w	r2, r3, #7
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d901      	bls.n	8001da8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e04c      	b.n	8001e42 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001da8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	da0e      	bge.n	8001dce <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001db0:	78fb      	ldrb	r3, [r7, #3]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	705a      	strb	r2, [r3, #1]
 8001dcc:	e00c      	b.n	8001de8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001dce:	78fa      	ldrb	r2, [r7, #3]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	4413      	add	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2201      	movs	r2, #1
 8001dec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dee:	78fb      	ldrb	r3, [r7, #3]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d101      	bne.n	8001e08 <HAL_PCD_EP_SetStall+0x7e>
 8001e04:	2302      	movs	r3, #2
 8001e06:	e01c      	b.n	8001e42 <HAL_PCD_EP_SetStall+0xb8>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68f9      	ldr	r1, [r7, #12]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f003 facc 	bl	80053b4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d108      	bne.n	8001e38 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001e30:	4619      	mov	r1, r3
 8001e32:	4610      	mov	r0, r2
 8001e34:	f003 fbf1 	bl	800561a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	460b      	mov	r3, r1
 8001e54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e56:	78fb      	ldrb	r3, [r7, #3]
 8001e58:	f003 020f 	and.w	r2, r3, #15
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d901      	bls.n	8001e68 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e040      	b.n	8001eea <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	da0e      	bge.n	8001e8e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	4413      	add	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	705a      	strb	r2, [r3, #1]
 8001e8c:	e00e      	b.n	8001eac <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	f003 0207 	and.w	r2, r3, #7
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eb2:	78fb      	ldrb	r3, [r7, #3]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <HAL_PCD_EP_ClrStall+0x82>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e00e      	b.n	8001eea <HAL_PCD_EP_ClrStall+0xa0>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68f9      	ldr	r1, [r7, #12]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f003 faba 	bl	8005454 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b08e      	sub	sp, #56	; 0x38
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001efa:	e2df      	b.n	80024bc <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f04:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001f06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001f12:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f040 8158 	bne.w	80021cc <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001f1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f1e:	f003 0310 	and.w	r3, r3, #16
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d152      	bne.n	8001fcc <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f36:	81fb      	strh	r3, [r7, #14]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	89fb      	ldrh	r3, [r7, #14]
 8001f3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3328      	adds	r3, #40	; 0x28
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	4413      	add	r3, r2
 8001f64:	3302      	adds	r3, #2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	6812      	ldr	r2, [r2, #0]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	695a      	ldr	r2, [r3, #20]
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	441a      	add	r2, r3
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f005 f992 	bl	80072b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 828e 	beq.w	80024bc <PCD_EP_ISR_Handler+0x5ca>
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f040 8289 	bne.w	80024bc <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	b292      	uxth	r2, r2
 8001fbe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001fca:	e277      	b.n	80024bc <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001fdc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d034      	beq.n	8002050 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3306      	adds	r3, #6
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6812      	ldr	r2, [r2, #0]
 8002002:	4413      	add	r3, r2
 8002004:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6818      	ldr	r0, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002024:	b29b      	uxth	r3, r3
 8002026:	f003 fb47 	bl	80056b8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	b29a      	uxth	r2, r3
 8002032:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002036:	4013      	ands	r3, r2
 8002038:	823b      	strh	r3, [r7, #16]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	8a3a      	ldrh	r2, [r7, #16]
 8002040:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002044:	b292      	uxth	r2, r2
 8002046:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f005 f907 	bl	800725c <HAL_PCD_SetupStageCallback>
 800204e:	e235      	b.n	80024bc <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002050:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002054:	2b00      	cmp	r3, #0
 8002056:	f280 8231 	bge.w	80024bc <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	b29a      	uxth	r2, r3
 8002062:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002066:	4013      	ands	r3, r2
 8002068:	83bb      	strh	r3, [r7, #28]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	8bba      	ldrh	r2, [r7, #28]
 8002070:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002074:	b292      	uxth	r2, r2
 8002076:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002080:	b29b      	uxth	r3, r3
 8002082:	461a      	mov	r2, r3
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4413      	add	r3, r2
 800208c:	3306      	adds	r3, #6
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6812      	ldr	r2, [r2, #0]
 8002094:	4413      	add	r3, r2
 8002096:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d019      	beq.n	80020e0 <PCD_EP_ISR_Handler+0x1ee>
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d015      	beq.n	80020e0 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6818      	ldr	r0, [r3, #0]
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	6959      	ldr	r1, [r3, #20]
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	f003 faf7 	bl	80056b8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	695a      	ldr	r2, [r3, #20]
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	441a      	add	r2, r3
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80020d8:	2100      	movs	r1, #0
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f005 f8d0 	bl	8007280 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	61bb      	str	r3, [r7, #24]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	461a      	mov	r2, r3
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	4413      	add	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d112      	bne.n	800212e <PCD_EP_ISR_Handler+0x23c>
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	881b      	ldrh	r3, [r3, #0]
 800210c:	b29b      	uxth	r3, r3
 800210e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002112:	b29a      	uxth	r2, r3
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	801a      	strh	r2, [r3, #0]
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	881b      	ldrh	r3, [r3, #0]
 800211c:	b29b      	uxth	r3, r3
 800211e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002122:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002126:	b29a      	uxth	r2, r3
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	801a      	strh	r2, [r3, #0]
 800212c:	e02f      	b.n	800218e <PCD_EP_ISR_Handler+0x29c>
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	2b3e      	cmp	r3, #62	; 0x3e
 8002134:	d813      	bhi.n	800215e <PCD_EP_ISR_Handler+0x26c>
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	085b      	lsrs	r3, r3, #1
 800213c:	633b      	str	r3, [r7, #48]	; 0x30
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d002      	beq.n	8002150 <PCD_EP_ISR_Handler+0x25e>
 800214a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214c:	3301      	adds	r3, #1
 800214e:	633b      	str	r3, [r7, #48]	; 0x30
 8002150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002152:	b29b      	uxth	r3, r3
 8002154:	029b      	lsls	r3, r3, #10
 8002156:	b29a      	uxth	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	801a      	strh	r2, [r3, #0]
 800215c:	e017      	b.n	800218e <PCD_EP_ISR_Handler+0x29c>
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	633b      	str	r3, [r7, #48]	; 0x30
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	f003 031f 	and.w	r3, r3, #31
 800216e:	2b00      	cmp	r3, #0
 8002170:	d102      	bne.n	8002178 <PCD_EP_ISR_Handler+0x286>
 8002172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002174:	3b01      	subs	r3, #1
 8002176:	633b      	str	r3, [r7, #48]	; 0x30
 8002178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217a:	b29b      	uxth	r3, r3
 800217c:	029b      	lsls	r3, r3, #10
 800217e:	b29b      	uxth	r3, r3
 8002180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002188:	b29a      	uxth	r2, r3
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	b29b      	uxth	r3, r3
 8002196:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800219a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800219e:	827b      	strh	r3, [r7, #18]
 80021a0:	8a7b      	ldrh	r3, [r7, #18]
 80021a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80021a6:	827b      	strh	r3, [r7, #18]
 80021a8:	8a7b      	ldrh	r3, [r7, #18]
 80021aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80021ae:	827b      	strh	r3, [r7, #18]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	8a7b      	ldrh	r3, [r7, #18]
 80021b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	8013      	strh	r3, [r2, #0]
 80021ca:	e177      	b.n	80024bc <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80021de:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f280 80ea 	bge.w	80023bc <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	461a      	mov	r2, r3
 80021ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80021fe:	4013      	ands	r3, r2
 8002200:	853b      	strh	r3, [r7, #40]	; 0x28
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002212:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002216:	b292      	uxth	r2, r2
 8002218:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800221a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	7b1b      	ldrb	r3, [r3, #12]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d122      	bne.n	800227e <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002240:	b29b      	uxth	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	4413      	add	r3, r2
 800224c:	3306      	adds	r3, #6
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6812      	ldr	r2, [r2, #0]
 8002254:	4413      	add	r3, r2
 8002256:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002260:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002262:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 8087 	beq.w	8002378 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	6959      	ldr	r1, [r3, #20]
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	88da      	ldrh	r2, [r3, #6]
 8002276:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002278:	f003 fa1e 	bl	80056b8 <USB_ReadPMA>
 800227c:	e07c      	b.n	8002378 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	78db      	ldrb	r3, [r3, #3]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d108      	bne.n	8002298 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002286:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002288:	461a      	mov	r2, r3
 800228a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 f923 	bl	80024d8 <HAL_PCD_EP_DB_Receive>
 8002292:	4603      	mov	r3, r0
 8002294:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002296:	e06f      	b.n	8002378 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	461a      	mov	r2, r3
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b2:	847b      	strh	r3, [r7, #34]	; 0x22
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	441a      	add	r2, r3
 80022c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80022c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	461a      	mov	r2, r3
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d021      	beq.n	8002336 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	461a      	mov	r2, r3
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	4413      	add	r3, r2
 8002306:	3302      	adds	r3, #2
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6812      	ldr	r2, [r2, #0]
 800230e:	4413      	add	r3, r2
 8002310:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800231a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800231c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800231e:	2b00      	cmp	r3, #0
 8002320:	d02a      	beq.n	8002378 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	6959      	ldr	r1, [r3, #20]
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	891a      	ldrh	r2, [r3, #8]
 800232e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002330:	f003 f9c2 	bl	80056b8 <USB_ReadPMA>
 8002334:	e020      	b.n	8002378 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800233e:	b29b      	uxth	r3, r3
 8002340:	461a      	mov	r2, r3
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4413      	add	r3, r2
 800234a:	3306      	adds	r3, #6
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6812      	ldr	r2, [r2, #0]
 8002352:	4413      	add	r3, r2
 8002354:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800235e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002360:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002362:	2b00      	cmp	r3, #0
 8002364:	d008      	beq.n	8002378 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6818      	ldr	r0, [r3, #0]
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	6959      	ldr	r1, [r3, #20]
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	895a      	ldrh	r2, [r3, #10]
 8002372:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002374:	f003 f9a0 	bl	80056b8 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	69da      	ldr	r2, [r3, #28]
 800237c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800237e:	441a      	add	r2, r3
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	695a      	ldr	r2, [r3, #20]
 8002388:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800238a:	441a      	add	r2, r3
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d004      	beq.n	80023a2 <PCD_EP_ISR_Handler+0x4b0>
 8002398:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d206      	bcs.n	80023b0 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	4619      	mov	r1, r3
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f004 ff69 	bl	8007280 <HAL_PCD_DataOutStageCallback>
 80023ae:	e005      	b.n	80023bc <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023b6:	4618      	mov	r0, r3
 80023b8:	f001 fedc 	bl	8004174 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80023bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d07a      	beq.n	80024bc <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80023c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023ca:	1c5a      	adds	r2, r3, #1
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	4413      	add	r3, r2
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80023f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023f4:	843b      	strh	r3, [r7, #32]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	441a      	add	r2, r3
 8002404:	8c3b      	ldrh	r3, [r7, #32]
 8002406:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800240a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800240e:	b29b      	uxth	r3, r3
 8002410:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	78db      	ldrb	r3, [r3, #3]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d108      	bne.n	800242c <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800241e:	2b02      	cmp	r3, #2
 8002420:	d146      	bne.n	80024b0 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002422:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002428:	2b00      	cmp	r3, #0
 800242a:	d141      	bne.n	80024b0 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002434:	b29b      	uxth	r3, r3
 8002436:	461a      	mov	r2, r3
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4413      	add	r3, r2
 8002440:	3302      	adds	r3, #2
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	4413      	add	r3, r2
 800244a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002454:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	699a      	ldr	r2, [r3, #24]
 800245a:	8bfb      	ldrh	r3, [r7, #30]
 800245c:	429a      	cmp	r2, r3
 800245e:	d906      	bls.n	800246e <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	699a      	ldr	r2, [r3, #24]
 8002464:	8bfb      	ldrh	r3, [r7, #30]
 8002466:	1ad2      	subs	r2, r2, r3
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	619a      	str	r2, [r3, #24]
 800246c:	e002      	b.n	8002474 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	2200      	movs	r2, #0
 8002472:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d106      	bne.n	800248a <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	4619      	mov	r1, r3
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f004 ff17 	bl	80072b6 <HAL_PCD_DataInStageCallback>
 8002488:	e018      	b.n	80024bc <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	695a      	ldr	r2, [r3, #20]
 800248e:	8bfb      	ldrh	r3, [r7, #30]
 8002490:	441a      	add	r2, r3
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	69da      	ldr	r2, [r3, #28]
 800249a:	8bfb      	ldrh	r3, [r7, #30]
 800249c:	441a      	add	r2, r3
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024a8:	4618      	mov	r0, r3
 80024aa:	f001 fe63 	bl	8004174 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80024ae:	e005      	b.n	80024bc <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80024b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024b2:	461a      	mov	r2, r3
 80024b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f91b 	bl	80026f2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	b21b      	sxth	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f6ff ad17 	blt.w	8001efc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3738      	adds	r7, #56	; 0x38
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	4613      	mov	r3, r2
 80024e4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024e6:	88fb      	ldrh	r3, [r7, #6]
 80024e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d07e      	beq.n	80025ee <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	461a      	mov	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	4413      	add	r3, r2
 8002504:	3302      	adds	r3, #2
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	4413      	add	r3, r2
 800250e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002518:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	699a      	ldr	r2, [r3, #24]
 800251e:	8b7b      	ldrh	r3, [r7, #26]
 8002520:	429a      	cmp	r2, r3
 8002522:	d306      	bcc.n	8002532 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	699a      	ldr	r2, [r3, #24]
 8002528:	8b7b      	ldrh	r3, [r7, #26]
 800252a:	1ad2      	subs	r2, r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	619a      	str	r2, [r3, #24]
 8002530:	e002      	b.n	8002538 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	2200      	movs	r2, #0
 8002536:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d123      	bne.n	8002588 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	461a      	mov	r2, r3
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	b29b      	uxth	r3, r3
 8002552:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800255a:	833b      	strh	r3, [r7, #24]
 800255c:	8b3b      	ldrh	r3, [r7, #24]
 800255e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002562:	833b      	strh	r3, [r7, #24]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	461a      	mov	r2, r3
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	441a      	add	r2, r3
 8002572:	8b3b      	ldrh	r3, [r7, #24]
 8002574:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002578:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800257c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002584:	b29b      	uxth	r3, r3
 8002586:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002588:	88fb      	ldrh	r3, [r7, #6]
 800258a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258e:	2b00      	cmp	r3, #0
 8002590:	d01f      	beq.n	80025d2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ac:	82fb      	strh	r3, [r7, #22]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	441a      	add	r2, r3
 80025bc:	8afb      	ldrh	r3, [r7, #22]
 80025be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80025d2:	8b7b      	ldrh	r3, [r7, #26]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 8087 	beq.w	80026e8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	6959      	ldr	r1, [r3, #20]
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	891a      	ldrh	r2, [r3, #8]
 80025e6:	8b7b      	ldrh	r3, [r7, #26]
 80025e8:	f003 f866 	bl	80056b8 <USB_ReadPMA>
 80025ec:	e07c      	b.n	80026e8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	461a      	mov	r2, r3
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4413      	add	r3, r2
 8002602:	3306      	adds	r3, #6
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	6812      	ldr	r2, [r2, #0]
 800260a:	4413      	add	r3, r2
 800260c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002616:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	699a      	ldr	r2, [r3, #24]
 800261c:	8b7b      	ldrh	r3, [r7, #26]
 800261e:	429a      	cmp	r2, r3
 8002620:	d306      	bcc.n	8002630 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	699a      	ldr	r2, [r3, #24]
 8002626:	8b7b      	ldrh	r3, [r7, #26]
 8002628:	1ad2      	subs	r2, r2, r3
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	619a      	str	r2, [r3, #24]
 800262e:	e002      	b.n	8002636 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2200      	movs	r2, #0
 8002634:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d123      	bne.n	8002686 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	b29b      	uxth	r3, r3
 8002650:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002658:	83fb      	strh	r3, [r7, #30]
 800265a:	8bfb      	ldrh	r3, [r7, #30]
 800265c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002660:	83fb      	strh	r3, [r7, #30]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	441a      	add	r2, r3
 8002670:	8bfb      	ldrh	r3, [r7, #30]
 8002672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800267a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800267e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002682:	b29b      	uxth	r3, r3
 8002684:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002686:	88fb      	ldrh	r3, [r7, #6]
 8002688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268c:	2b00      	cmp	r3, #0
 800268e:	d11f      	bne.n	80026d0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	461a      	mov	r2, r3
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	881b      	ldrh	r3, [r3, #0]
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026aa:	83bb      	strh	r3, [r7, #28]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	461a      	mov	r2, r3
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	441a      	add	r2, r3
 80026ba:	8bbb      	ldrh	r3, [r7, #28]
 80026bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80026d0:	8b7b      	ldrh	r3, [r7, #26]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d008      	beq.n	80026e8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6818      	ldr	r0, [r3, #0]
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	6959      	ldr	r1, [r3, #20]
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	895a      	ldrh	r2, [r3, #10]
 80026e2:	8b7b      	ldrh	r3, [r7, #26]
 80026e4:	f002 ffe8 	bl	80056b8 <USB_ReadPMA>
    }
  }

  return count;
 80026e8:	8b7b      	ldrh	r3, [r7, #26]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3720      	adds	r7, #32
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b092      	sub	sp, #72	; 0x48
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	4613      	mov	r3, r2
 80026fe:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002700:	88fb      	ldrh	r3, [r7, #6]
 8002702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 8132 	beq.w	8002970 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002714:	b29b      	uxth	r3, r3
 8002716:	461a      	mov	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4413      	add	r3, r2
 8002720:	3302      	adds	r3, #2
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	6812      	ldr	r2, [r2, #0]
 8002728:	4413      	add	r3, r2
 800272a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002734:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	699a      	ldr	r2, [r3, #24]
 800273a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800273c:	429a      	cmp	r2, r3
 800273e:	d906      	bls.n	800274e <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	699a      	ldr	r2, [r3, #24]
 8002744:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002746:	1ad2      	subs	r2, r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	619a      	str	r2, [r3, #24]
 800274c:	e002      	b.n	8002754 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	2200      	movs	r2, #0
 8002752:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d12c      	bne.n	80027b6 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	4619      	mov	r1, r3
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f004 fda7 	bl	80072b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002768:	88fb      	ldrh	r3, [r7, #6]
 800276a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 822f 	beq.w	8002bd2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	461a      	mov	r2, r3
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	b29b      	uxth	r3, r3
 8002786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800278a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800278e:	827b      	strh	r3, [r7, #18]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	461a      	mov	r2, r3
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	441a      	add	r2, r3
 800279e:	8a7b      	ldrh	r3, [r7, #18]
 80027a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	8013      	strh	r3, [r2, #0]
 80027b4:	e20d      	b.n	8002bd2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d01f      	beq.n	8002800 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027da:	84bb      	strh	r3, [r7, #36]	; 0x24
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	441a      	add	r2, r3
 80027ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80027ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002806:	2b01      	cmp	r3, #1
 8002808:	f040 81e3 	bne.w	8002bd2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	695a      	ldr	r2, [r3, #20]
 8002810:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002812:	441a      	add	r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	69da      	ldr	r2, [r3, #28]
 800281c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800281e:	441a      	add	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	6a1a      	ldr	r2, [r3, #32]
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	429a      	cmp	r2, r3
 800282e:	d309      	bcc.n	8002844 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	6a1a      	ldr	r2, [r3, #32]
 800283a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283c:	1ad2      	subs	r2, r2, r3
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	621a      	str	r2, [r3, #32]
 8002842:	e014      	b.n	800286e <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d106      	bne.n	800285a <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 800284c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800284e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002858:	e009      	b.n	800286e <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2200      	movs	r2, #0
 800286c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	785b      	ldrb	r3, [r3, #1]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d155      	bne.n	8002922 <HAL_PCD_EP_DB_Transmit+0x230>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	61bb      	str	r3, [r7, #24]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002884:	b29b      	uxth	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	4413      	add	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	011a      	lsls	r2, r3, #4
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	4413      	add	r3, r2
 8002898:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d112      	bne.n	80028ca <HAL_PCD_EP_DB_Transmit+0x1d8>
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	801a      	strh	r2, [r3, #0]
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	801a      	strh	r2, [r3, #0]
 80028c8:	e047      	b.n	800295a <HAL_PCD_EP_DB_Transmit+0x268>
 80028ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028cc:	2b3e      	cmp	r3, #62	; 0x3e
 80028ce:	d811      	bhi.n	80028f4 <HAL_PCD_EP_DB_Transmit+0x202>
 80028d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d2:	085b      	lsrs	r3, r3, #1
 80028d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80028d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d002      	beq.n	80028e6 <HAL_PCD_EP_DB_Transmit+0x1f4>
 80028e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e2:	3301      	adds	r3, #1
 80028e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80028e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	029b      	lsls	r3, r3, #10
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	801a      	strh	r2, [r3, #0]
 80028f2:	e032      	b.n	800295a <HAL_PCD_EP_DB_Transmit+0x268>
 80028f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f6:	095b      	lsrs	r3, r3, #5
 80028f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80028fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fc:	f003 031f 	and.w	r3, r3, #31
 8002900:	2b00      	cmp	r3, #0
 8002902:	d102      	bne.n	800290a <HAL_PCD_EP_DB_Transmit+0x218>
 8002904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002906:	3b01      	subs	r3, #1
 8002908:	62bb      	str	r3, [r7, #40]	; 0x28
 800290a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290c:	b29b      	uxth	r3, r3
 800290e:	029b      	lsls	r3, r3, #10
 8002910:	b29b      	uxth	r3, r3
 8002912:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002916:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800291a:	b29a      	uxth	r2, r3
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	801a      	strh	r2, [r3, #0]
 8002920:	e01b      	b.n	800295a <HAL_PCD_EP_DB_Transmit+0x268>
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	785b      	ldrb	r3, [r3, #1]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d117      	bne.n	800295a <HAL_PCD_EP_DB_Transmit+0x268>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	623b      	str	r3, [r7, #32]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002938:	b29b      	uxth	r3, r3
 800293a:	461a      	mov	r2, r3
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	4413      	add	r3, r2
 8002940:	623b      	str	r3, [r7, #32]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	011a      	lsls	r2, r3, #4
 8002948:	6a3b      	ldr	r3, [r7, #32]
 800294a:	4413      	add	r3, r2
 800294c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002950:	61fb      	str	r3, [r7, #28]
 8002952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002954:	b29a      	uxth	r2, r3
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6818      	ldr	r0, [r3, #0]
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	6959      	ldr	r1, [r3, #20]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	891a      	ldrh	r2, [r3, #8]
 8002966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002968:	b29b      	uxth	r3, r3
 800296a:	f002 fe61 	bl	8005630 <USB_WritePMA>
 800296e:	e130      	b.n	8002bd2 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002978:	b29b      	uxth	r3, r3
 800297a:	461a      	mov	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4413      	add	r3, r2
 8002984:	3306      	adds	r3, #6
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	4413      	add	r3, r2
 800298e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002998:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	699a      	ldr	r2, [r3, #24]
 800299e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d306      	bcc.n	80029b2 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	699a      	ldr	r2, [r3, #24]
 80029a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029aa:	1ad2      	subs	r2, r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	619a      	str	r2, [r3, #24]
 80029b0:	e002      	b.n	80029b8 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2200      	movs	r2, #0
 80029b6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d12c      	bne.n	8002a1a <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	4619      	mov	r1, r3
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f004 fc75 	bl	80072b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029cc:	88fb      	ldrh	r3, [r7, #6]
 80029ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f040 80fd 	bne.w	8002bd2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	461a      	mov	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	461a      	mov	r2, r3
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	441a      	add	r2, r3
 8002a02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	8013      	strh	r3, [r2, #0]
 8002a18:	e0db      	b.n	8002bd2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a1a:	88fb      	ldrh	r3, [r7, #6]
 8002a1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d11f      	bne.n	8002a64 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	881b      	ldrh	r3, [r3, #0]
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a3e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	441a      	add	r2, r3
 8002a4e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002a50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	f040 80b1 	bne.w	8002bd2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	695a      	ldr	r2, [r3, #20]
 8002a74:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a76:	441a      	add	r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	69da      	ldr	r2, [r3, #28]
 8002a80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a82:	441a      	add	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	6a1a      	ldr	r2, [r3, #32]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d309      	bcc.n	8002aa8 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	6a1a      	ldr	r2, [r3, #32]
 8002a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa0:	1ad2      	subs	r2, r2, r3
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	621a      	str	r2, [r3, #32]
 8002aa6:	e014      	b.n	8002ad2 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d106      	bne.n	8002abe <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002ab0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ab2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002abc:	e009      	b.n	8002ad2 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	785b      	ldrb	r3, [r3, #1]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d155      	bne.n	8002b8c <HAL_PCD_EP_DB_Transmit+0x49a>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	461a      	mov	r2, r3
 8002af2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002af4:	4413      	add	r3, r2
 8002af6:	647b      	str	r3, [r7, #68]	; 0x44
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	011a      	lsls	r2, r3, #4
 8002afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b00:	4413      	add	r3, r2
 8002b02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b06:	643b      	str	r3, [r7, #64]	; 0x40
 8002b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d112      	bne.n	8002b34 <HAL_PCD_EP_DB_Transmit+0x442>
 8002b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b1c:	801a      	strh	r2, [r3, #0]
 8002b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b30:	801a      	strh	r2, [r3, #0]
 8002b32:	e044      	b.n	8002bbe <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b36:	2b3e      	cmp	r3, #62	; 0x3e
 8002b38:	d811      	bhi.n	8002b5e <HAL_PCD_EP_DB_Transmit+0x46c>
 8002b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3c:	085b      	lsrs	r3, r3, #1
 8002b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <HAL_PCD_EP_DB_Transmit+0x45e>
 8002b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	029b      	lsls	r3, r3, #10
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b5a:	801a      	strh	r2, [r3, #0]
 8002b5c:	e02f      	b.n	8002bbe <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b60:	095b      	lsrs	r3, r3, #5
 8002b62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b66:	f003 031f 	and.w	r3, r3, #31
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d102      	bne.n	8002b74 <HAL_PCD_EP_DB_Transmit+0x482>
 8002b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b70:	3b01      	subs	r3, #1
 8002b72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	029b      	lsls	r3, r3, #10
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b88:	801a      	strh	r2, [r3, #0]
 8002b8a:	e018      	b.n	8002bbe <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	785b      	ldrb	r3, [r3, #1]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d114      	bne.n	8002bbe <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba2:	4413      	add	r3, r2
 8002ba4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	011a      	lsls	r2, r3, #4
 8002bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bae:	4413      	add	r3, r2
 8002bb0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bb4:	633b      	str	r3, [r7, #48]	; 0x30
 8002bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bbc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6818      	ldr	r0, [r3, #0]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	6959      	ldr	r1, [r3, #20]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	895a      	ldrh	r2, [r3, #10]
 8002bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	f002 fd2f 	bl	8005630 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	881b      	ldrh	r3, [r3, #0]
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002be8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bec:	823b      	strh	r3, [r7, #16]
 8002bee:	8a3b      	ldrh	r3, [r7, #16]
 8002bf0:	f083 0310 	eor.w	r3, r3, #16
 8002bf4:	823b      	strh	r3, [r7, #16]
 8002bf6:	8a3b      	ldrh	r3, [r7, #16]
 8002bf8:	f083 0320 	eor.w	r3, r3, #32
 8002bfc:	823b      	strh	r3, [r7, #16]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	461a      	mov	r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	441a      	add	r2, r3
 8002c0c:	8a3b      	ldrh	r3, [r7, #16]
 8002c0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3748      	adds	r7, #72	; 0x48
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	607b      	str	r3, [r7, #4]
 8002c36:	460b      	mov	r3, r1
 8002c38:	817b      	strh	r3, [r7, #10]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002c3e:	897b      	ldrh	r3, [r7, #10]
 8002c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00b      	beq.n	8002c62 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c4a:	897b      	ldrh	r3, [r7, #10]
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]
 8002c60:	e009      	b.n	8002c76 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c62:	897a      	ldrh	r2, [r7, #10]
 8002c64:	4613      	mov	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4413      	add	r3, r2
 8002c74:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002c76:	893b      	ldrh	r3, [r7, #8]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d107      	bne.n	8002c8c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	80da      	strh	r2, [r3, #6]
 8002c8a:	e00b      	b.n	8002ca4 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	0c1b      	lsrs	r3, r3, #16
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	371c      	adds	r7, #28
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr

08002cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e26c      	b.n	800319c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 8087 	beq.w	8002dde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cd0:	4b92      	ldr	r3, [pc, #584]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 030c 	and.w	r3, r3, #12
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d00c      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cdc:	4b8f      	ldr	r3, [pc, #572]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 030c 	and.w	r3, r3, #12
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d112      	bne.n	8002d0e <HAL_RCC_OscConfig+0x5e>
 8002ce8:	4b8c      	ldr	r3, [pc, #560]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf4:	d10b      	bne.n	8002d0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf6:	4b89      	ldr	r3, [pc, #548]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d06c      	beq.n	8002ddc <HAL_RCC_OscConfig+0x12c>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d168      	bne.n	8002ddc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e246      	b.n	800319c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d16:	d106      	bne.n	8002d26 <HAL_RCC_OscConfig+0x76>
 8002d18:	4b80      	ldr	r3, [pc, #512]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a7f      	ldr	r2, [pc, #508]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d22:	6013      	str	r3, [r2, #0]
 8002d24:	e02e      	b.n	8002d84 <HAL_RCC_OscConfig+0xd4>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10c      	bne.n	8002d48 <HAL_RCC_OscConfig+0x98>
 8002d2e:	4b7b      	ldr	r3, [pc, #492]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a7a      	ldr	r2, [pc, #488]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	4b78      	ldr	r3, [pc, #480]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a77      	ldr	r2, [pc, #476]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	e01d      	b.n	8002d84 <HAL_RCC_OscConfig+0xd4>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d50:	d10c      	bne.n	8002d6c <HAL_RCC_OscConfig+0xbc>
 8002d52:	4b72      	ldr	r3, [pc, #456]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a71      	ldr	r2, [pc, #452]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	4b6f      	ldr	r3, [pc, #444]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a6e      	ldr	r2, [pc, #440]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	e00b      	b.n	8002d84 <HAL_RCC_OscConfig+0xd4>
 8002d6c:	4b6b      	ldr	r3, [pc, #428]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a6a      	ldr	r2, [pc, #424]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	4b68      	ldr	r3, [pc, #416]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a67      	ldr	r2, [pc, #412]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d013      	beq.n	8002db4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8c:	f7fe f96a 	bl	8001064 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d94:	f7fe f966 	bl	8001064 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b64      	cmp	r3, #100	; 0x64
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e1fa      	b.n	800319c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da6:	4b5d      	ldr	r3, [pc, #372]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0f0      	beq.n	8002d94 <HAL_RCC_OscConfig+0xe4>
 8002db2:	e014      	b.n	8002dde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db4:	f7fe f956 	bl	8001064 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dbc:	f7fe f952 	bl	8001064 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b64      	cmp	r3, #100	; 0x64
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e1e6      	b.n	800319c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dce:	4b53      	ldr	r3, [pc, #332]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCC_OscConfig+0x10c>
 8002dda:	e000      	b.n	8002dde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d063      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dea:	4b4c      	ldr	r3, [pc, #304]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f003 030c 	and.w	r3, r3, #12
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00b      	beq.n	8002e0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002df6:	4b49      	ldr	r3, [pc, #292]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d11c      	bne.n	8002e3c <HAL_RCC_OscConfig+0x18c>
 8002e02:	4b46      	ldr	r3, [pc, #280]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d116      	bne.n	8002e3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0e:	4b43      	ldr	r3, [pc, #268]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d005      	beq.n	8002e26 <HAL_RCC_OscConfig+0x176>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d001      	beq.n	8002e26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e1ba      	b.n	800319c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e26:	4b3d      	ldr	r3, [pc, #244]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4939      	ldr	r1, [pc, #228]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e3a:	e03a      	b.n	8002eb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d020      	beq.n	8002e86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e44:	4b36      	ldr	r3, [pc, #216]	; (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002e46:	2201      	movs	r2, #1
 8002e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4a:	f7fe f90b 	bl	8001064 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e52:	f7fe f907 	bl	8001064 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e19b      	b.n	800319c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e64:	4b2d      	ldr	r3, [pc, #180]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0f0      	beq.n	8002e52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e70:	4b2a      	ldr	r3, [pc, #168]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	4927      	ldr	r1, [pc, #156]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	600b      	str	r3, [r1, #0]
 8002e84:	e015      	b.n	8002eb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e86:	4b26      	ldr	r3, [pc, #152]	; (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8c:	f7fe f8ea 	bl	8001064 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e94:	f7fe f8e6 	bl	8001064 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e17a      	b.n	800319c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ea6:	4b1d      	ldr	r3, [pc, #116]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d03a      	beq.n	8002f34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d019      	beq.n	8002efa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ec6:	4b17      	ldr	r3, [pc, #92]	; (8002f24 <HAL_RCC_OscConfig+0x274>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ecc:	f7fe f8ca 	bl	8001064 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed4:	f7fe f8c6 	bl	8001064 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e15a      	b.n	800319c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ee6:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ef2:	2001      	movs	r0, #1
 8002ef4:	f000 faa8 	bl	8003448 <RCC_Delay>
 8002ef8:	e01c      	b.n	8002f34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002efa:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <HAL_RCC_OscConfig+0x274>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f00:	f7fe f8b0 	bl	8001064 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f06:	e00f      	b.n	8002f28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f08:	f7fe f8ac 	bl	8001064 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d908      	bls.n	8002f28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e140      	b.n	800319c <HAL_RCC_OscConfig+0x4ec>
 8002f1a:	bf00      	nop
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	42420000 	.word	0x42420000
 8002f24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f28:	4b9e      	ldr	r3, [pc, #632]	; (80031a4 <HAL_RCC_OscConfig+0x4f4>)
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1e9      	bne.n	8002f08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 80a6 	beq.w	800308e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f42:	2300      	movs	r3, #0
 8002f44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f46:	4b97      	ldr	r3, [pc, #604]	; (80031a4 <HAL_RCC_OscConfig+0x4f4>)
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10d      	bne.n	8002f6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f52:	4b94      	ldr	r3, [pc, #592]	; (80031a4 <HAL_RCC_OscConfig+0x4f4>)
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	4a93      	ldr	r2, [pc, #588]	; (80031a4 <HAL_RCC_OscConfig+0x4f4>)
 8002f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f5c:	61d3      	str	r3, [r2, #28]
 8002f5e:	4b91      	ldr	r3, [pc, #580]	; (80031a4 <HAL_RCC_OscConfig+0x4f4>)
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f66:	60bb      	str	r3, [r7, #8]
 8002f68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6e:	4b8e      	ldr	r3, [pc, #568]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d118      	bne.n	8002fac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f7a:	4b8b      	ldr	r3, [pc, #556]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a8a      	ldr	r2, [pc, #552]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 8002f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f86:	f7fe f86d 	bl	8001064 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f8e:	f7fe f869 	bl	8001064 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b64      	cmp	r3, #100	; 0x64
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e0fd      	b.n	800319c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa0:	4b81      	ldr	r3, [pc, #516]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0f0      	beq.n	8002f8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d106      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x312>
 8002fb4:	4b7b      	ldr	r3, [pc, #492]	; (80031a4 <HAL_RCC_OscConfig+0x4f4>)
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	4a7a      	ldr	r2, [pc, #488]	; (80031a4 <HAL_RCC_OscConfig+0x4f4>)
 8002fba:	f043 0301 	orr.w	r3, r3, #1
 8002fbe:	6213      	str	r3, [r2, #32]
 8002fc0:	e02d      	b.n	800301e <HAL_RCC_OscConfig+0x36e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10c      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x334>
 8002fca:	4b76      	ldr	r3, [pc, #472]	; (80031a4 <HAL_RCC_OscConfig+0x4f4>)
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	4a75      	ldr	r2, [pc, #468]	; (80031a4 <HAL_RCC_OscConfig+0x4f4>)
 8002fd0:	f023 0301 	bic.w	r3, r3, #1
 8002fd4:	6213      	str	r3, [r2, #32]
 8002fd6:	4b73      	ldr	r3, [pc, #460]	; (80031a4 <HAL_RCC_OscConfig+0x4f4>)
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	4a72      	ldr	r2, [pc, #456]	; (80031a4 <HAL_RCC_OscConfig+0x4f4>)
 8002fdc:	f023 0304 	bic.w	r3, r3, #4
 8002fe0:	6213      	str	r3, [r2, #32]
 8002fe2:	e01c      	b.n	800301e <HAL_RCC_OscConfig+0x36e>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	2b05      	cmp	r3, #5
 8002fea:	d10c      	bne.n	8003006 <HAL_RCC_OscConfig+0x356>
 8002fec:	4b6d      	ldr	r3, [pc, #436]	; (80031a4 <HAL_RCC_OscConfig+0x4f4>)
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	4a6c      	ldr	r2, [pc, #432]	; (80031a4 <HAL_RCC_OscConfig+0x4f4>)
 8002ff2:	f043 0304 	orr.w	r3, r3, #4
 8002ff6:	6213      	str	r3, [r2, #32]
 8002ff8:	4b6a      	ldr	r3, [pc, #424]	; (80031a4 <HAL_RCC_OscConfig+0x4f4>)
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	4a69      	ldr	r2, [pc, #420]	; (80031a4 <HAL_RCC_OscConfig+0x4f4>)
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	6213      	str	r3, [r2, #32]
 8003004:	e00b      	b.n	800301e <HAL_RCC_OscConfig+0x36e>
 8003006:	4b67      	ldr	r3, [pc, #412]	; (80031a4 <HAL_RCC_OscConfig+0x4f4>)
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	4a66      	ldr	r2, [pc, #408]	; (80031a4 <HAL_RCC_OscConfig+0x4f4>)
 800300c:	f023 0301 	bic.w	r3, r3, #1
 8003010:	6213      	str	r3, [r2, #32]
 8003012:	4b64      	ldr	r3, [pc, #400]	; (80031a4 <HAL_RCC_OscConfig+0x4f4>)
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	4a63      	ldr	r2, [pc, #396]	; (80031a4 <HAL_RCC_OscConfig+0x4f4>)
 8003018:	f023 0304 	bic.w	r3, r3, #4
 800301c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d015      	beq.n	8003052 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003026:	f7fe f81d 	bl	8001064 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800302c:	e00a      	b.n	8003044 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302e:	f7fe f819 	bl	8001064 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	f241 3288 	movw	r2, #5000	; 0x1388
 800303c:	4293      	cmp	r3, r2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e0ab      	b.n	800319c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003044:	4b57      	ldr	r3, [pc, #348]	; (80031a4 <HAL_RCC_OscConfig+0x4f4>)
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0ee      	beq.n	800302e <HAL_RCC_OscConfig+0x37e>
 8003050:	e014      	b.n	800307c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003052:	f7fe f807 	bl	8001064 <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003058:	e00a      	b.n	8003070 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305a:	f7fe f803 	bl	8001064 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	f241 3288 	movw	r2, #5000	; 0x1388
 8003068:	4293      	cmp	r3, r2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e095      	b.n	800319c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003070:	4b4c      	ldr	r3, [pc, #304]	; (80031a4 <HAL_RCC_OscConfig+0x4f4>)
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1ee      	bne.n	800305a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800307c:	7dfb      	ldrb	r3, [r7, #23]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d105      	bne.n	800308e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003082:	4b48      	ldr	r3, [pc, #288]	; (80031a4 <HAL_RCC_OscConfig+0x4f4>)
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	4a47      	ldr	r2, [pc, #284]	; (80031a4 <HAL_RCC_OscConfig+0x4f4>)
 8003088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800308c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 8081 	beq.w	800319a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003098:	4b42      	ldr	r3, [pc, #264]	; (80031a4 <HAL_RCC_OscConfig+0x4f4>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 030c 	and.w	r3, r3, #12
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d061      	beq.n	8003168 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d146      	bne.n	800313a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ac:	4b3f      	ldr	r3, [pc, #252]	; (80031ac <HAL_RCC_OscConfig+0x4fc>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b2:	f7fd ffd7 	bl	8001064 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ba:	f7fd ffd3 	bl	8001064 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e067      	b.n	800319c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030cc:	4b35      	ldr	r3, [pc, #212]	; (80031a4 <HAL_RCC_OscConfig+0x4f4>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1f0      	bne.n	80030ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e0:	d108      	bne.n	80030f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030e2:	4b30      	ldr	r3, [pc, #192]	; (80031a4 <HAL_RCC_OscConfig+0x4f4>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	492d      	ldr	r1, [pc, #180]	; (80031a4 <HAL_RCC_OscConfig+0x4f4>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030f4:	4b2b      	ldr	r3, [pc, #172]	; (80031a4 <HAL_RCC_OscConfig+0x4f4>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a19      	ldr	r1, [r3, #32]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	430b      	orrs	r3, r1
 8003106:	4927      	ldr	r1, [pc, #156]	; (80031a4 <HAL_RCC_OscConfig+0x4f4>)
 8003108:	4313      	orrs	r3, r2
 800310a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800310c:	4b27      	ldr	r3, [pc, #156]	; (80031ac <HAL_RCC_OscConfig+0x4fc>)
 800310e:	2201      	movs	r2, #1
 8003110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003112:	f7fd ffa7 	bl	8001064 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800311a:	f7fd ffa3 	bl	8001064 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e037      	b.n	800319c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800312c:	4b1d      	ldr	r3, [pc, #116]	; (80031a4 <HAL_RCC_OscConfig+0x4f4>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0f0      	beq.n	800311a <HAL_RCC_OscConfig+0x46a>
 8003138:	e02f      	b.n	800319a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313a:	4b1c      	ldr	r3, [pc, #112]	; (80031ac <HAL_RCC_OscConfig+0x4fc>)
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7fd ff90 	bl	8001064 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003148:	f7fd ff8c 	bl	8001064 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e020      	b.n	800319c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800315a:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <HAL_RCC_OscConfig+0x4f4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0x498>
 8003166:	e018      	b.n	800319a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e013      	b.n	800319c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003174:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <HAL_RCC_OscConfig+0x4f4>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	429a      	cmp	r2, r3
 8003186:	d106      	bne.n	8003196 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003192:	429a      	cmp	r2, r3
 8003194:	d001      	beq.n	800319a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40021000 	.word	0x40021000
 80031a8:	40007000 	.word	0x40007000
 80031ac:	42420060 	.word	0x42420060

080031b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0d0      	b.n	8003366 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031c4:	4b6a      	ldr	r3, [pc, #424]	; (8003370 <HAL_RCC_ClockConfig+0x1c0>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d910      	bls.n	80031f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d2:	4b67      	ldr	r3, [pc, #412]	; (8003370 <HAL_RCC_ClockConfig+0x1c0>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f023 0207 	bic.w	r2, r3, #7
 80031da:	4965      	ldr	r1, [pc, #404]	; (8003370 <HAL_RCC_ClockConfig+0x1c0>)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	4313      	orrs	r3, r2
 80031e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e2:	4b63      	ldr	r3, [pc, #396]	; (8003370 <HAL_RCC_ClockConfig+0x1c0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d001      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0b8      	b.n	8003366 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d020      	beq.n	8003242 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800320c:	4b59      	ldr	r3, [pc, #356]	; (8003374 <HAL_RCC_ClockConfig+0x1c4>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	4a58      	ldr	r2, [pc, #352]	; (8003374 <HAL_RCC_ClockConfig+0x1c4>)
 8003212:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003216:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0308 	and.w	r3, r3, #8
 8003220:	2b00      	cmp	r3, #0
 8003222:	d005      	beq.n	8003230 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003224:	4b53      	ldr	r3, [pc, #332]	; (8003374 <HAL_RCC_ClockConfig+0x1c4>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	4a52      	ldr	r2, [pc, #328]	; (8003374 <HAL_RCC_ClockConfig+0x1c4>)
 800322a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800322e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003230:	4b50      	ldr	r3, [pc, #320]	; (8003374 <HAL_RCC_ClockConfig+0x1c4>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	494d      	ldr	r1, [pc, #308]	; (8003374 <HAL_RCC_ClockConfig+0x1c4>)
 800323e:	4313      	orrs	r3, r2
 8003240:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d040      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d107      	bne.n	8003266 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003256:	4b47      	ldr	r3, [pc, #284]	; (8003374 <HAL_RCC_ClockConfig+0x1c4>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d115      	bne.n	800328e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e07f      	b.n	8003366 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b02      	cmp	r3, #2
 800326c:	d107      	bne.n	800327e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326e:	4b41      	ldr	r3, [pc, #260]	; (8003374 <HAL_RCC_ClockConfig+0x1c4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d109      	bne.n	800328e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e073      	b.n	8003366 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327e:	4b3d      	ldr	r3, [pc, #244]	; (8003374 <HAL_RCC_ClockConfig+0x1c4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e06b      	b.n	8003366 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800328e:	4b39      	ldr	r3, [pc, #228]	; (8003374 <HAL_RCC_ClockConfig+0x1c4>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f023 0203 	bic.w	r2, r3, #3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	4936      	ldr	r1, [pc, #216]	; (8003374 <HAL_RCC_ClockConfig+0x1c4>)
 800329c:	4313      	orrs	r3, r2
 800329e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032a0:	f7fd fee0 	bl	8001064 <HAL_GetTick>
 80032a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a6:	e00a      	b.n	80032be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a8:	f7fd fedc 	bl	8001064 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e053      	b.n	8003366 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032be:	4b2d      	ldr	r3, [pc, #180]	; (8003374 <HAL_RCC_ClockConfig+0x1c4>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f003 020c 	and.w	r2, r3, #12
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d1eb      	bne.n	80032a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032d0:	4b27      	ldr	r3, [pc, #156]	; (8003370 <HAL_RCC_ClockConfig+0x1c0>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d210      	bcs.n	8003300 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032de:	4b24      	ldr	r3, [pc, #144]	; (8003370 <HAL_RCC_ClockConfig+0x1c0>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f023 0207 	bic.w	r2, r3, #7
 80032e6:	4922      	ldr	r1, [pc, #136]	; (8003370 <HAL_RCC_ClockConfig+0x1c0>)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ee:	4b20      	ldr	r3, [pc, #128]	; (8003370 <HAL_RCC_ClockConfig+0x1c0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d001      	beq.n	8003300 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e032      	b.n	8003366 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	2b00      	cmp	r3, #0
 800330a:	d008      	beq.n	800331e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800330c:	4b19      	ldr	r3, [pc, #100]	; (8003374 <HAL_RCC_ClockConfig+0x1c4>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	4916      	ldr	r1, [pc, #88]	; (8003374 <HAL_RCC_ClockConfig+0x1c4>)
 800331a:	4313      	orrs	r3, r2
 800331c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d009      	beq.n	800333e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800332a:	4b12      	ldr	r3, [pc, #72]	; (8003374 <HAL_RCC_ClockConfig+0x1c4>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	490e      	ldr	r1, [pc, #56]	; (8003374 <HAL_RCC_ClockConfig+0x1c4>)
 800333a:	4313      	orrs	r3, r2
 800333c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800333e:	f000 f821 	bl	8003384 <HAL_RCC_GetSysClockFreq>
 8003342:	4601      	mov	r1, r0
 8003344:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <HAL_RCC_ClockConfig+0x1c4>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	091b      	lsrs	r3, r3, #4
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	4a0a      	ldr	r2, [pc, #40]	; (8003378 <HAL_RCC_ClockConfig+0x1c8>)
 8003350:	5cd3      	ldrb	r3, [r2, r3]
 8003352:	fa21 f303 	lsr.w	r3, r1, r3
 8003356:	4a09      	ldr	r2, [pc, #36]	; (800337c <HAL_RCC_ClockConfig+0x1cc>)
 8003358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800335a:	4b09      	ldr	r3, [pc, #36]	; (8003380 <HAL_RCC_ClockConfig+0x1d0>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f7fd fe3e 	bl	8000fe0 <HAL_InitTick>

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40022000 	.word	0x40022000
 8003374:	40021000 	.word	0x40021000
 8003378:	08007d5c 	.word	0x08007d5c
 800337c:	20000004 	.word	0x20000004
 8003380:	20000008 	.word	0x20000008

08003384 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003384:	b490      	push	{r4, r7}
 8003386:	b08a      	sub	sp, #40	; 0x28
 8003388:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800338a:	4b2a      	ldr	r3, [pc, #168]	; (8003434 <HAL_RCC_GetSysClockFreq+0xb0>)
 800338c:	1d3c      	adds	r4, r7, #4
 800338e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003390:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003394:	4b28      	ldr	r3, [pc, #160]	; (8003438 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	61fb      	str	r3, [r7, #28]
 800339e:	2300      	movs	r3, #0
 80033a0:	61bb      	str	r3, [r7, #24]
 80033a2:	2300      	movs	r3, #0
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033ae:	4b23      	ldr	r3, [pc, #140]	; (800343c <HAL_RCC_GetSysClockFreq+0xb8>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d002      	beq.n	80033c4 <HAL_RCC_GetSysClockFreq+0x40>
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d003      	beq.n	80033ca <HAL_RCC_GetSysClockFreq+0x46>
 80033c2:	e02d      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033c4:	4b1e      	ldr	r3, [pc, #120]	; (8003440 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033c6:	623b      	str	r3, [r7, #32]
      break;
 80033c8:	e02d      	b.n	8003426 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	0c9b      	lsrs	r3, r3, #18
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80033d6:	4413      	add	r3, r2
 80033d8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80033dc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d013      	beq.n	8003410 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033e8:	4b14      	ldr	r3, [pc, #80]	; (800343c <HAL_RCC_GetSysClockFreq+0xb8>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	0c5b      	lsrs	r3, r3, #17
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80033f6:	4413      	add	r3, r2
 80033f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80033fc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	4a0f      	ldr	r2, [pc, #60]	; (8003440 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003402:	fb02 f203 	mul.w	r2, r2, r3
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	fbb2 f3f3 	udiv	r3, r2, r3
 800340c:	627b      	str	r3, [r7, #36]	; 0x24
 800340e:	e004      	b.n	800341a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	4a0c      	ldr	r2, [pc, #48]	; (8003444 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003414:	fb02 f303 	mul.w	r3, r2, r3
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	623b      	str	r3, [r7, #32]
      break;
 800341e:	e002      	b.n	8003426 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003420:	4b07      	ldr	r3, [pc, #28]	; (8003440 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003422:	623b      	str	r3, [r7, #32]
      break;
 8003424:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003426:	6a3b      	ldr	r3, [r7, #32]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3728      	adds	r7, #40	; 0x28
 800342c:	46bd      	mov	sp, r7
 800342e:	bc90      	pop	{r4, r7}
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	08007d00 	.word	0x08007d00
 8003438:	08007d10 	.word	0x08007d10
 800343c:	40021000 	.word	0x40021000
 8003440:	007a1200 	.word	0x007a1200
 8003444:	003d0900 	.word	0x003d0900

08003448 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003450:	4b0a      	ldr	r3, [pc, #40]	; (800347c <RCC_Delay+0x34>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a0a      	ldr	r2, [pc, #40]	; (8003480 <RCC_Delay+0x38>)
 8003456:	fba2 2303 	umull	r2, r3, r2, r3
 800345a:	0a5b      	lsrs	r3, r3, #9
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	fb02 f303 	mul.w	r3, r2, r3
 8003462:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003464:	bf00      	nop
  }
  while (Delay --);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	1e5a      	subs	r2, r3, #1
 800346a:	60fa      	str	r2, [r7, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1f9      	bne.n	8003464 <RCC_Delay+0x1c>
}
 8003470:	bf00      	nop
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	bc80      	pop	{r7}
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	20000004 	.word	0x20000004
 8003480:	10624dd3 	.word	0x10624dd3

08003484 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	613b      	str	r3, [r7, #16]
 8003490:	2300      	movs	r3, #0
 8003492:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d07d      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80034a0:	2300      	movs	r3, #0
 80034a2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034a4:	4b4f      	ldr	r3, [pc, #316]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10d      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b0:	4b4c      	ldr	r3, [pc, #304]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	4a4b      	ldr	r2, [pc, #300]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ba:	61d3      	str	r3, [r2, #28]
 80034bc:	4b49      	ldr	r3, [pc, #292]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c4:	60bb      	str	r3, [r7, #8]
 80034c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034c8:	2301      	movs	r3, #1
 80034ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034cc:	4b46      	ldr	r3, [pc, #280]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d118      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034d8:	4b43      	ldr	r3, [pc, #268]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a42      	ldr	r2, [pc, #264]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034e4:	f7fd fdbe 	bl	8001064 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ea:	e008      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ec:	f7fd fdba 	bl	8001064 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b64      	cmp	r3, #100	; 0x64
 80034f8:	d901      	bls.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e06d      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fe:	4b3a      	ldr	r3, [pc, #232]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800350a:	4b36      	ldr	r3, [pc, #216]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003512:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d02e      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	429a      	cmp	r2, r3
 8003526:	d027      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003528:	4b2e      	ldr	r3, [pc, #184]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003530:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003532:	4b2e      	ldr	r3, [pc, #184]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003534:	2201      	movs	r2, #1
 8003536:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003538:	4b2c      	ldr	r3, [pc, #176]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800353e:	4a29      	ldr	r2, [pc, #164]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d014      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354e:	f7fd fd89 	bl	8001064 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003554:	e00a      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003556:	f7fd fd85 	bl	8001064 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	f241 3288 	movw	r2, #5000	; 0x1388
 8003564:	4293      	cmp	r3, r2
 8003566:	d901      	bls.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e036      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800356c:	4b1d      	ldr	r3, [pc, #116]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0ee      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003578:	4b1a      	ldr	r3, [pc, #104]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	4917      	ldr	r1, [pc, #92]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003586:	4313      	orrs	r3, r2
 8003588:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800358a:	7dfb      	ldrb	r3, [r7, #23]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d105      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003590:	4b14      	ldr	r3, [pc, #80]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	4a13      	ldr	r2, [pc, #76]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800359a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d008      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035a8:	4b0e      	ldr	r3, [pc, #56]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	490b      	ldr	r1, [pc, #44]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0310 	and.w	r3, r3, #16
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d008      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035c6:	4b07      	ldr	r3, [pc, #28]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	4904      	ldr	r1, [pc, #16]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3718      	adds	r7, #24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40021000 	.word	0x40021000
 80035e8:	40007000 	.word	0x40007000
 80035ec:	42420440 	.word	0x42420440

080035f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80035f0:	b084      	sub	sp, #16
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	f107 0014 	add.w	r0, r7, #20
 80035fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	bc80      	pop	{r7}
 800360c:	b004      	add	sp, #16
 800360e:	4770      	bx	lr

08003610 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003620:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003624:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	b29a      	uxth	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr

0800363c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003644:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003648:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	b29b      	uxth	r3, r3
 8003656:	43db      	mvns	r3, r3
 8003658:	b29b      	uxth	r3, r3
 800365a:	4013      	ands	r3, r2
 800365c:	b29a      	uxth	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr

08003670 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	460b      	mov	r3, r1
 800367a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	bc80      	pop	{r7}
 8003686:	4770      	bx	lr

08003688 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003688:	b084      	sub	sp, #16
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
 8003692:	f107 0014 	add.w	r0, r7, #20
 8003696:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bc80      	pop	{r7}
 80036c4:	b004      	add	sp, #16
 80036c6:	4770      	bx	lr

080036c8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b09b      	sub	sp, #108	; 0x6c
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80036ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ee:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	78db      	ldrb	r3, [r3, #3]
 80036f6:	2b03      	cmp	r3, #3
 80036f8:	d81f      	bhi.n	800373a <USB_ActivateEndpoint+0x72>
 80036fa:	a201      	add	r2, pc, #4	; (adr r2, 8003700 <USB_ActivateEndpoint+0x38>)
 80036fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003700:	08003711 	.word	0x08003711
 8003704:	0800372d 	.word	0x0800372d
 8003708:	08003743 	.word	0x08003743
 800370c:	0800371f 	.word	0x0800371f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003710:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003714:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003718:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800371c:	e012      	b.n	8003744 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800371e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003722:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003726:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800372a:	e00b      	b.n	8003744 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800372c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003730:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003734:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003738:	e004      	b.n	8003744 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003740:	e000      	b.n	8003744 <USB_ActivateEndpoint+0x7c>
      break;
 8003742:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	441a      	add	r2, r3
 800374e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003752:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003756:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800375a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800375e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003762:	b29b      	uxth	r3, r3
 8003764:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	881b      	ldrh	r3, [r3, #0]
 8003772:	b29b      	uxth	r3, r3
 8003774:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800377c:	b29a      	uxth	r2, r3
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	b29b      	uxth	r3, r3
 8003784:	4313      	orrs	r3, r2
 8003786:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	441a      	add	r2, r3
 8003794:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800379c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	7b1b      	ldrb	r3, [r3, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f040 8149 	bne.w	8003a48 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	785b      	ldrb	r3, [r3, #1]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 8084 	beq.w	80038c8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	617b      	str	r3, [r7, #20]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	461a      	mov	r2, r3
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	4413      	add	r3, r2
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	011a      	lsls	r2, r3, #4
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	4413      	add	r3, r2
 80037de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037e2:	613b      	str	r3, [r7, #16]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	88db      	ldrh	r3, [r3, #6]
 80037e8:	085b      	lsrs	r3, r3, #1
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	81fb      	strh	r3, [r7, #14]
 8003802:	89fb      	ldrh	r3, [r7, #14]
 8003804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003808:	2b00      	cmp	r3, #0
 800380a:	d01b      	beq.n	8003844 <USB_ActivateEndpoint+0x17c>
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	881b      	ldrh	r3, [r3, #0]
 8003818:	b29b      	uxth	r3, r3
 800381a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800381e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003822:	81bb      	strh	r3, [r7, #12]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	441a      	add	r2, r3
 800382e:	89bb      	ldrh	r3, [r7, #12]
 8003830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003834:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800383c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003840:	b29b      	uxth	r3, r3
 8003842:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	78db      	ldrb	r3, [r3, #3]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d020      	beq.n	800388e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	881b      	ldrh	r3, [r3, #0]
 8003858:	b29b      	uxth	r3, r3
 800385a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800385e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003862:	813b      	strh	r3, [r7, #8]
 8003864:	893b      	ldrh	r3, [r7, #8]
 8003866:	f083 0320 	eor.w	r3, r3, #32
 800386a:	813b      	strh	r3, [r7, #8]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	441a      	add	r2, r3
 8003876:	893b      	ldrh	r3, [r7, #8]
 8003878:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800387c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003888:	b29b      	uxth	r3, r3
 800388a:	8013      	strh	r3, [r2, #0]
 800388c:	e27f      	b.n	8003d8e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	881b      	ldrh	r3, [r3, #0]
 800389a:	b29b      	uxth	r3, r3
 800389c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038a4:	817b      	strh	r3, [r7, #10]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	441a      	add	r2, r3
 80038b0:	897b      	ldrh	r3, [r7, #10]
 80038b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	8013      	strh	r3, [r2, #0]
 80038c6:	e262      	b.n	8003d8e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	461a      	mov	r2, r3
 80038d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d8:	4413      	add	r3, r2
 80038da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	011a      	lsls	r2, r3, #4
 80038e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80038ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	88db      	ldrh	r3, [r3, #6]
 80038f0:	085b      	lsrs	r3, r3, #1
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fa:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003906:	b29b      	uxth	r3, r3
 8003908:	461a      	mov	r2, r3
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	4413      	add	r3, r2
 800390e:	627b      	str	r3, [r7, #36]	; 0x24
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	011a      	lsls	r2, r3, #4
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	4413      	add	r3, r2
 800391a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800391e:	623b      	str	r3, [r7, #32]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d112      	bne.n	800394e <USB_ActivateEndpoint+0x286>
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	b29b      	uxth	r3, r3
 800392e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003932:	b29a      	uxth	r2, r3
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	801a      	strh	r2, [r3, #0]
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	b29b      	uxth	r3, r3
 800393e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003946:	b29a      	uxth	r2, r3
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	801a      	strh	r2, [r3, #0]
 800394c:	e02f      	b.n	80039ae <USB_ActivateEndpoint+0x2e6>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	2b3e      	cmp	r3, #62	; 0x3e
 8003954:	d813      	bhi.n	800397e <USB_ActivateEndpoint+0x2b6>
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	085b      	lsrs	r3, r3, #1
 800395c:	663b      	str	r3, [r7, #96]	; 0x60
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <USB_ActivateEndpoint+0x2a8>
 800396a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800396c:	3301      	adds	r3, #1
 800396e:	663b      	str	r3, [r7, #96]	; 0x60
 8003970:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003972:	b29b      	uxth	r3, r3
 8003974:	029b      	lsls	r3, r3, #10
 8003976:	b29a      	uxth	r2, r3
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	801a      	strh	r2, [r3, #0]
 800397c:	e017      	b.n	80039ae <USB_ActivateEndpoint+0x2e6>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	095b      	lsrs	r3, r3, #5
 8003984:	663b      	str	r3, [r7, #96]	; 0x60
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f003 031f 	and.w	r3, r3, #31
 800398e:	2b00      	cmp	r3, #0
 8003990:	d102      	bne.n	8003998 <USB_ActivateEndpoint+0x2d0>
 8003992:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003994:	3b01      	subs	r3, #1
 8003996:	663b      	str	r3, [r7, #96]	; 0x60
 8003998:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800399a:	b29b      	uxth	r3, r3
 800399c:	029b      	lsls	r3, r3, #10
 800399e:	b29b      	uxth	r3, r3
 80039a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	83fb      	strh	r3, [r7, #30]
 80039bc:	8bfb      	ldrh	r3, [r7, #30]
 80039be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d01b      	beq.n	80039fe <USB_ActivateEndpoint+0x336>
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039dc:	83bb      	strh	r3, [r7, #28]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	441a      	add	r2, r3
 80039e8:	8bbb      	ldrh	r3, [r7, #28]
 80039ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a14:	837b      	strh	r3, [r7, #26]
 8003a16:	8b7b      	ldrh	r3, [r7, #26]
 8003a18:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003a1c:	837b      	strh	r3, [r7, #26]
 8003a1e:	8b7b      	ldrh	r3, [r7, #26]
 8003a20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a24:	837b      	strh	r3, [r7, #26]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	441a      	add	r2, r3
 8003a30:	8b7b      	ldrh	r3, [r7, #26]
 8003a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	8013      	strh	r3, [r2, #0]
 8003a46:	e1a2      	b.n	8003d8e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a5e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	441a      	add	r2, r3
 8003a6c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003a70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a78:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	461a      	mov	r2, r3
 8003a92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a94:	4413      	add	r3, r2
 8003a96:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	011a      	lsls	r2, r3, #4
 8003a9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003aa6:	657b      	str	r3, [r7, #84]	; 0x54
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	891b      	ldrh	r3, [r3, #8]
 8003aac:	085b      	lsrs	r3, r3, #1
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ab6:	801a      	strh	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	653b      	str	r3, [r7, #80]	; 0x50
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ac8:	4413      	add	r3, r2
 8003aca:	653b      	str	r3, [r7, #80]	; 0x50
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	011a      	lsls	r2, r3, #4
 8003ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	895b      	ldrh	r3, [r3, #10]
 8003ae0:	085b      	lsrs	r3, r3, #1
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aea:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	785b      	ldrb	r3, [r3, #1]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f040 8091 	bne.w	8003c18 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	881b      	ldrh	r3, [r3, #0]
 8003b02:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003b04:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d01b      	beq.n	8003b46 <USB_ActivateEndpoint+0x47e>
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	881b      	ldrh	r3, [r3, #0]
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b24:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	441a      	add	r2, r3
 8003b30:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003b32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	881b      	ldrh	r3, [r3, #0]
 8003b52:	873b      	strh	r3, [r7, #56]	; 0x38
 8003b54:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d01b      	beq.n	8003b96 <USB_ActivateEndpoint+0x4ce>
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b74:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	441a      	add	r2, r3
 8003b80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003b82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bac:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003bae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003bb0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003bb4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003bb6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003bb8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003bbc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	441a      	add	r2, r3
 8003bc8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003bca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bf4:	867b      	strh	r3, [r7, #50]	; 0x32
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	441a      	add	r2, r3
 8003c00:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003c02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	8013      	strh	r3, [r2, #0]
 8003c16:	e0ba      	b.n	8003d8e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003c28:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003c2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d01d      	beq.n	8003c70 <USB_ActivateEndpoint+0x5a8>
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	881b      	ldrh	r3, [r3, #0]
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	441a      	add	r2, r3
 8003c58:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003c5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003c80:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d01d      	beq.n	8003cc8 <USB_ActivateEndpoint+0x600>
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	881b      	ldrh	r3, [r3, #0]
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	441a      	add	r2, r3
 8003cb0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003cb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cc0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	78db      	ldrb	r3, [r3, #3]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d024      	beq.n	8003d1a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ce6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003cea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003cee:	f083 0320 	eor.w	r3, r3, #32
 8003cf2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	441a      	add	r2, r3
 8003d00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003d04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	8013      	strh	r3, [r2, #0]
 8003d18:	e01d      	b.n	8003d56 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d30:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	441a      	add	r2, r3
 8003d3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003d42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d6c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	441a      	add	r2, r3
 8003d78:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003d7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003d8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	376c      	adds	r7, #108	; 0x6c
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bc80      	pop	{r7}
 8003d9a:	4770      	bx	lr

08003d9c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b08d      	sub	sp, #52	; 0x34
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	7b1b      	ldrb	r3, [r3, #12]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f040 808e 	bne.w	8003ecc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	785b      	ldrb	r3, [r3, #1]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d044      	beq.n	8003e42 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	81bb      	strh	r3, [r7, #12]
 8003dc6:	89bb      	ldrh	r3, [r7, #12]
 8003dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d01b      	beq.n	8003e08 <USB_DeactivateEndpoint+0x6c>
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de6:	817b      	strh	r3, [r7, #10]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	441a      	add	r2, r3
 8003df2:	897b      	ldrh	r3, [r7, #10]
 8003df4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003df8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	881b      	ldrh	r3, [r3, #0]
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e1e:	813b      	strh	r3, [r7, #8]
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	441a      	add	r2, r3
 8003e2a:	893b      	ldrh	r3, [r7, #8]
 8003e2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	8013      	strh	r3, [r2, #0]
 8003e40:	e192      	b.n	8004168 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	827b      	strh	r3, [r7, #18]
 8003e50:	8a7b      	ldrh	r3, [r7, #18]
 8003e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d01b      	beq.n	8003e92 <USB_DeactivateEndpoint+0xf6>
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4413      	add	r3, r2
 8003e64:	881b      	ldrh	r3, [r3, #0]
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e70:	823b      	strh	r3, [r7, #16]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	441a      	add	r2, r3
 8003e7c:	8a3b      	ldrh	r3, [r7, #16]
 8003e7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea8:	81fb      	strh	r3, [r7, #14]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	441a      	add	r2, r3
 8003eb4:	89fb      	ldrh	r3, [r7, #14]
 8003eb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	8013      	strh	r3, [r2, #0]
 8003eca:	e14d      	b.n	8004168 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	785b      	ldrb	r3, [r3, #1]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f040 80a5 	bne.w	8004020 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4413      	add	r3, r2
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	843b      	strh	r3, [r7, #32]
 8003ee4:	8c3b      	ldrh	r3, [r7, #32]
 8003ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d01b      	beq.n	8003f26 <USB_DeactivateEndpoint+0x18a>
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	881b      	ldrh	r3, [r3, #0]
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f04:	83fb      	strh	r3, [r7, #30]
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	441a      	add	r2, r3
 8003f10:	8bfb      	ldrh	r3, [r7, #30]
 8003f12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	881b      	ldrh	r3, [r3, #0]
 8003f32:	83bb      	strh	r3, [r7, #28]
 8003f34:	8bbb      	ldrh	r3, [r7, #28]
 8003f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d01b      	beq.n	8003f76 <USB_DeactivateEndpoint+0x1da>
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f54:	837b      	strh	r3, [r7, #26]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	441a      	add	r2, r3
 8003f60:	8b7b      	ldrh	r3, [r7, #26]
 8003f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f6e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	881b      	ldrh	r3, [r3, #0]
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8c:	833b      	strh	r3, [r7, #24]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	441a      	add	r2, r3
 8003f98:	8b3b      	ldrh	r3, [r7, #24]
 8003f9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fa6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	881b      	ldrh	r3, [r3, #0]
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc4:	82fb      	strh	r3, [r7, #22]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	441a      	add	r2, r3
 8003fd0:	8afb      	ldrh	r3, [r7, #22]
 8003fd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4413      	add	r3, r2
 8003ff0:	881b      	ldrh	r3, [r3, #0]
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ffc:	82bb      	strh	r3, [r7, #20]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	441a      	add	r2, r3
 8004008:	8abb      	ldrh	r3, [r7, #20]
 800400a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800400e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800401a:	b29b      	uxth	r3, r3
 800401c:	8013      	strh	r3, [r2, #0]
 800401e:	e0a3      	b.n	8004168 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800402e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d01b      	beq.n	8004070 <USB_DeactivateEndpoint+0x2d4>
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4413      	add	r3, r2
 8004042:	881b      	ldrh	r3, [r3, #0]
 8004044:	b29b      	uxth	r3, r3
 8004046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800404a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800404e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	441a      	add	r2, r3
 800405a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800405c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004060:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004064:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800406c:	b29b      	uxth	r3, r3
 800406e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	881b      	ldrh	r3, [r3, #0]
 800407c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800407e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004084:	2b00      	cmp	r3, #0
 8004086:	d01b      	beq.n	80040c0 <USB_DeactivateEndpoint+0x324>
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	881b      	ldrh	r3, [r3, #0]
 8004094:	b29b      	uxth	r3, r3
 8004096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800409a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800409e:	853b      	strh	r3, [r7, #40]	; 0x28
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	441a      	add	r2, r3
 80040aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80040ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040bc:	b29b      	uxth	r3, r3
 80040be:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	441a      	add	r2, r3
 80040e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80040e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	881b      	ldrh	r3, [r3, #0]
 8004104:	b29b      	uxth	r3, r3
 8004106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800410a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800410e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	441a      	add	r2, r3
 800411a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800411c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004120:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004124:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800412c:	b29b      	uxth	r3, r3
 800412e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	b29b      	uxth	r3, r3
 800413e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004146:	847b      	strh	r3, [r7, #34]	; 0x22
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	441a      	add	r2, r3
 8004152:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004154:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004158:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800415c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004164:	b29b      	uxth	r3, r3
 8004166:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3734      	adds	r7, #52	; 0x34
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr

08004174 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b0c4      	sub	sp, #272	; 0x110
 8004178:	af00      	add	r7, sp, #0
 800417a:	1d3b      	adds	r3, r7, #4
 800417c:	6018      	str	r0, [r3, #0]
 800417e:	463b      	mov	r3, r7
 8004180:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004182:	463b      	mov	r3, r7
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	785b      	ldrb	r3, [r3, #1]
 8004188:	2b01      	cmp	r3, #1
 800418a:	f040 8557 	bne.w	8004c3c <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800418e:	463b      	mov	r3, r7
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	699a      	ldr	r2, [r3, #24]
 8004194:	463b      	mov	r3, r7
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	429a      	cmp	r2, r3
 800419c:	d905      	bls.n	80041aa <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800419e:	463b      	mov	r3, r7
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80041a8:	e004      	b.n	80041b4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80041aa:	463b      	mov	r3, r7
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80041b4:	463b      	mov	r3, r7
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	7b1b      	ldrb	r3, [r3, #12]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d12c      	bne.n	8004218 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80041be:	463b      	mov	r3, r7
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6959      	ldr	r1, [r3, #20]
 80041c4:	463b      	mov	r3, r7
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	88da      	ldrh	r2, [r3, #6]
 80041ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	1d38      	adds	r0, r7, #4
 80041d2:	6800      	ldr	r0, [r0, #0]
 80041d4:	f001 fa2c 	bl	8005630 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80041d8:	1d3b      	adds	r3, r7, #4
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	1d3b      	adds	r3, r7, #4
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	461a      	mov	r2, r3
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	4413      	add	r3, r2
 80041ee:	617b      	str	r3, [r7, #20]
 80041f0:	463b      	mov	r3, r7
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	011a      	lsls	r2, r3, #4
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	4413      	add	r3, r2
 80041fc:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004200:	f107 0310 	add.w	r3, r7, #16
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800420a:	b29a      	uxth	r2, r3
 800420c:	f107 0310 	add.w	r3, r7, #16
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	801a      	strh	r2, [r3, #0]
 8004214:	f000 bcdd 	b.w	8004bd2 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004218:	463b      	mov	r3, r7
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	78db      	ldrb	r3, [r3, #3]
 800421e:	2b02      	cmp	r3, #2
 8004220:	f040 8347 	bne.w	80048b2 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004224:	463b      	mov	r3, r7
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6a1a      	ldr	r2, [r3, #32]
 800422a:	463b      	mov	r3, r7
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	429a      	cmp	r2, r3
 8004232:	f240 82eb 	bls.w	800480c <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004236:	1d3b      	adds	r3, r7, #4
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	463b      	mov	r3, r7
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4413      	add	r3, r2
 8004244:	881b      	ldrh	r3, [r3, #0]
 8004246:	b29b      	uxth	r3, r3
 8004248:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800424c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004250:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004254:	1d3b      	adds	r3, r7, #4
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	463b      	mov	r3, r7
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	441a      	add	r2, r3
 8004262:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800426a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800426e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004276:	b29b      	uxth	r3, r3
 8004278:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800427a:	463b      	mov	r3, r7
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	6a1a      	ldr	r2, [r3, #32]
 8004280:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004284:	1ad2      	subs	r2, r2, r3
 8004286:	463b      	mov	r3, r7
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800428c:	1d3b      	adds	r3, r7, #4
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	463b      	mov	r3, r7
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	b29b      	uxth	r3, r3
 800429e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f000 8159 	beq.w	800455a <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80042a8:	1d3b      	adds	r3, r7, #4
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	637b      	str	r3, [r7, #52]	; 0x34
 80042ae:	463b      	mov	r3, r7
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	785b      	ldrb	r3, [r3, #1]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d164      	bne.n	8004382 <USB_EPStartXfer+0x20e>
 80042b8:	1d3b      	adds	r3, r7, #4
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042be:	1d3b      	adds	r3, r7, #4
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	461a      	mov	r2, r3
 80042ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042cc:	4413      	add	r3, r2
 80042ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042d0:	463b      	mov	r3, r7
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	011a      	lsls	r2, r3, #4
 80042d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042da:	4413      	add	r3, r2
 80042dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80042e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d112      	bne.n	8004310 <USB_EPStartXfer+0x19c>
 80042ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ec:	881b      	ldrh	r3, [r3, #0]
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f8:	801a      	strh	r2, [r3, #0]
 80042fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	b29b      	uxth	r3, r3
 8004300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004308:	b29a      	uxth	r2, r3
 800430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430c:	801a      	strh	r2, [r3, #0]
 800430e:	e054      	b.n	80043ba <USB_EPStartXfer+0x246>
 8004310:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004314:	2b3e      	cmp	r3, #62	; 0x3e
 8004316:	d817      	bhi.n	8004348 <USB_EPStartXfer+0x1d4>
 8004318:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800431c:	085b      	lsrs	r3, r3, #1
 800431e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004322:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d004      	beq.n	8004338 <USB_EPStartXfer+0x1c4>
 800432e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004332:	3301      	adds	r3, #1
 8004334:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800433c:	b29b      	uxth	r3, r3
 800433e:	029b      	lsls	r3, r3, #10
 8004340:	b29a      	uxth	r2, r3
 8004342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004344:	801a      	strh	r2, [r3, #0]
 8004346:	e038      	b.n	80043ba <USB_EPStartXfer+0x246>
 8004348:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800434c:	095b      	lsrs	r3, r3, #5
 800434e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004352:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004356:	f003 031f 	and.w	r3, r3, #31
 800435a:	2b00      	cmp	r3, #0
 800435c:	d104      	bne.n	8004368 <USB_EPStartXfer+0x1f4>
 800435e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004362:	3b01      	subs	r3, #1
 8004364:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800436c:	b29b      	uxth	r3, r3
 800436e:	029b      	lsls	r3, r3, #10
 8004370:	b29b      	uxth	r3, r3
 8004372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800437a:	b29a      	uxth	r2, r3
 800437c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437e:	801a      	strh	r2, [r3, #0]
 8004380:	e01b      	b.n	80043ba <USB_EPStartXfer+0x246>
 8004382:	463b      	mov	r3, r7
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	785b      	ldrb	r3, [r3, #1]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d116      	bne.n	80043ba <USB_EPStartXfer+0x246>
 800438c:	1d3b      	adds	r3, r7, #4
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004394:	b29b      	uxth	r3, r3
 8004396:	461a      	mov	r2, r3
 8004398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800439a:	4413      	add	r3, r2
 800439c:	637b      	str	r3, [r7, #52]	; 0x34
 800439e:	463b      	mov	r3, r7
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	011a      	lsls	r2, r3, #4
 80043a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043a8:	4413      	add	r3, r2
 80043aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043ae:	633b      	str	r3, [r7, #48]	; 0x30
 80043b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80043ba:	463b      	mov	r3, r7
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	895b      	ldrh	r3, [r3, #10]
 80043c0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80043c4:	463b      	mov	r3, r7
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6959      	ldr	r1, [r3, #20]
 80043ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80043d4:	1d38      	adds	r0, r7, #4
 80043d6:	6800      	ldr	r0, [r0, #0]
 80043d8:	f001 f92a 	bl	8005630 <USB_WritePMA>
            ep->xfer_buff += len;
 80043dc:	463b      	mov	r3, r7
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	695a      	ldr	r2, [r3, #20]
 80043e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043e6:	441a      	add	r2, r3
 80043e8:	463b      	mov	r3, r7
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80043ee:	463b      	mov	r3, r7
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6a1a      	ldr	r2, [r3, #32]
 80043f4:	463b      	mov	r3, r7
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d909      	bls.n	8004412 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80043fe:	463b      	mov	r3, r7
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6a1a      	ldr	r2, [r3, #32]
 8004404:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004408:	1ad2      	subs	r2, r2, r3
 800440a:	463b      	mov	r3, r7
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	621a      	str	r2, [r3, #32]
 8004410:	e008      	b.n	8004424 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8004412:	463b      	mov	r3, r7
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800441c:	463b      	mov	r3, r7
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2200      	movs	r2, #0
 8004422:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004424:	463b      	mov	r3, r7
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	785b      	ldrb	r3, [r3, #1]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d164      	bne.n	80044f8 <USB_EPStartXfer+0x384>
 800442e:	1d3b      	adds	r3, r7, #4
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	61fb      	str	r3, [r7, #28]
 8004434:	1d3b      	adds	r3, r7, #4
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800443c:	b29b      	uxth	r3, r3
 800443e:	461a      	mov	r2, r3
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	4413      	add	r3, r2
 8004444:	61fb      	str	r3, [r7, #28]
 8004446:	463b      	mov	r3, r7
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	011a      	lsls	r2, r3, #4
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	4413      	add	r3, r2
 8004452:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004456:	61bb      	str	r3, [r7, #24]
 8004458:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800445c:	2b00      	cmp	r3, #0
 800445e:	d112      	bne.n	8004486 <USB_EPStartXfer+0x312>
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	881b      	ldrh	r3, [r3, #0]
 8004464:	b29b      	uxth	r3, r3
 8004466:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800446a:	b29a      	uxth	r2, r3
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	801a      	strh	r2, [r3, #0]
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	b29b      	uxth	r3, r3
 8004476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800447a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800447e:	b29a      	uxth	r2, r3
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	801a      	strh	r2, [r3, #0]
 8004484:	e057      	b.n	8004536 <USB_EPStartXfer+0x3c2>
 8004486:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800448a:	2b3e      	cmp	r3, #62	; 0x3e
 800448c:	d817      	bhi.n	80044be <USB_EPStartXfer+0x34a>
 800448e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004492:	085b      	lsrs	r3, r3, #1
 8004494:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004498:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d004      	beq.n	80044ae <USB_EPStartXfer+0x33a>
 80044a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80044a8:	3301      	adds	r3, #1
 80044aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80044ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	029b      	lsls	r3, r3, #10
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	801a      	strh	r2, [r3, #0]
 80044bc:	e03b      	b.n	8004536 <USB_EPStartXfer+0x3c2>
 80044be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044c2:	095b      	lsrs	r3, r3, #5
 80044c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80044c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044cc:	f003 031f 	and.w	r3, r3, #31
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d104      	bne.n	80044de <USB_EPStartXfer+0x36a>
 80044d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80044d8:	3b01      	subs	r3, #1
 80044da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80044de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	029b      	lsls	r3, r3, #10
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	801a      	strh	r2, [r3, #0]
 80044f6:	e01e      	b.n	8004536 <USB_EPStartXfer+0x3c2>
 80044f8:	463b      	mov	r3, r7
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	785b      	ldrb	r3, [r3, #1]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d119      	bne.n	8004536 <USB_EPStartXfer+0x3c2>
 8004502:	1d3b      	adds	r3, r7, #4
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	627b      	str	r3, [r7, #36]	; 0x24
 8004508:	1d3b      	adds	r3, r7, #4
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004510:	b29b      	uxth	r3, r3
 8004512:	461a      	mov	r2, r3
 8004514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004516:	4413      	add	r3, r2
 8004518:	627b      	str	r3, [r7, #36]	; 0x24
 800451a:	463b      	mov	r3, r7
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	011a      	lsls	r2, r3, #4
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	4413      	add	r3, r2
 8004526:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800452a:	623b      	str	r3, [r7, #32]
 800452c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004530:	b29a      	uxth	r2, r3
 8004532:	6a3b      	ldr	r3, [r7, #32]
 8004534:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004536:	463b      	mov	r3, r7
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	891b      	ldrh	r3, [r3, #8]
 800453c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004540:	463b      	mov	r3, r7
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6959      	ldr	r1, [r3, #20]
 8004546:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800454a:	b29b      	uxth	r3, r3
 800454c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004550:	1d38      	adds	r0, r7, #4
 8004552:	6800      	ldr	r0, [r0, #0]
 8004554:	f001 f86c 	bl	8005630 <USB_WritePMA>
 8004558:	e33b      	b.n	8004bd2 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800455a:	463b      	mov	r3, r7
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	785b      	ldrb	r3, [r3, #1]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d164      	bne.n	800462e <USB_EPStartXfer+0x4ba>
 8004564:	1d3b      	adds	r3, r7, #4
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	64fb      	str	r3, [r7, #76]	; 0x4c
 800456a:	1d3b      	adds	r3, r7, #4
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004572:	b29b      	uxth	r3, r3
 8004574:	461a      	mov	r2, r3
 8004576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004578:	4413      	add	r3, r2
 800457a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800457c:	463b      	mov	r3, r7
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	011a      	lsls	r2, r3, #4
 8004584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004586:	4413      	add	r3, r2
 8004588:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800458c:	64bb      	str	r3, [r7, #72]	; 0x48
 800458e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004592:	2b00      	cmp	r3, #0
 8004594:	d112      	bne.n	80045bc <USB_EPStartXfer+0x448>
 8004596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004598:	881b      	ldrh	r3, [r3, #0]
 800459a:	b29b      	uxth	r3, r3
 800459c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045a4:	801a      	strh	r2, [r3, #0]
 80045a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045a8:	881b      	ldrh	r3, [r3, #0]
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045b8:	801a      	strh	r2, [r3, #0]
 80045ba:	e057      	b.n	800466c <USB_EPStartXfer+0x4f8>
 80045bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045c0:	2b3e      	cmp	r3, #62	; 0x3e
 80045c2:	d817      	bhi.n	80045f4 <USB_EPStartXfer+0x480>
 80045c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045c8:	085b      	lsrs	r3, r3, #1
 80045ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80045ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d004      	beq.n	80045e4 <USB_EPStartXfer+0x470>
 80045da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045de:	3301      	adds	r3, #1
 80045e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80045e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	029b      	lsls	r3, r3, #10
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045f0:	801a      	strh	r2, [r3, #0]
 80045f2:	e03b      	b.n	800466c <USB_EPStartXfer+0x4f8>
 80045f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045f8:	095b      	lsrs	r3, r3, #5
 80045fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80045fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004602:	f003 031f 	and.w	r3, r3, #31
 8004606:	2b00      	cmp	r3, #0
 8004608:	d104      	bne.n	8004614 <USB_EPStartXfer+0x4a0>
 800460a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800460e:	3b01      	subs	r3, #1
 8004610:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004614:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004618:	b29b      	uxth	r3, r3
 800461a:	029b      	lsls	r3, r3, #10
 800461c:	b29b      	uxth	r3, r3
 800461e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004626:	b29a      	uxth	r2, r3
 8004628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800462a:	801a      	strh	r2, [r3, #0]
 800462c:	e01e      	b.n	800466c <USB_EPStartXfer+0x4f8>
 800462e:	463b      	mov	r3, r7
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	785b      	ldrb	r3, [r3, #1]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d119      	bne.n	800466c <USB_EPStartXfer+0x4f8>
 8004638:	1d3b      	adds	r3, r7, #4
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	657b      	str	r3, [r7, #84]	; 0x54
 800463e:	1d3b      	adds	r3, r7, #4
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004646:	b29b      	uxth	r3, r3
 8004648:	461a      	mov	r2, r3
 800464a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800464c:	4413      	add	r3, r2
 800464e:	657b      	str	r3, [r7, #84]	; 0x54
 8004650:	463b      	mov	r3, r7
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	011a      	lsls	r2, r3, #4
 8004658:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800465a:	4413      	add	r3, r2
 800465c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004660:	653b      	str	r3, [r7, #80]	; 0x50
 8004662:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004666:	b29a      	uxth	r2, r3
 8004668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800466a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800466c:	463b      	mov	r3, r7
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	891b      	ldrh	r3, [r3, #8]
 8004672:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004676:	463b      	mov	r3, r7
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6959      	ldr	r1, [r3, #20]
 800467c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004680:	b29b      	uxth	r3, r3
 8004682:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004686:	1d38      	adds	r0, r7, #4
 8004688:	6800      	ldr	r0, [r0, #0]
 800468a:	f000 ffd1 	bl	8005630 <USB_WritePMA>
            ep->xfer_buff += len;
 800468e:	463b      	mov	r3, r7
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	695a      	ldr	r2, [r3, #20]
 8004694:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004698:	441a      	add	r2, r3
 800469a:	463b      	mov	r3, r7
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80046a0:	463b      	mov	r3, r7
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6a1a      	ldr	r2, [r3, #32]
 80046a6:	463b      	mov	r3, r7
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d909      	bls.n	80046c4 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80046b0:	463b      	mov	r3, r7
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6a1a      	ldr	r2, [r3, #32]
 80046b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ba:	1ad2      	subs	r2, r2, r3
 80046bc:	463b      	mov	r3, r7
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	621a      	str	r2, [r3, #32]
 80046c2:	e008      	b.n	80046d6 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80046c4:	463b      	mov	r3, r7
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80046ce:	463b      	mov	r3, r7
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2200      	movs	r2, #0
 80046d4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80046d6:	1d3b      	adds	r3, r7, #4
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	647b      	str	r3, [r7, #68]	; 0x44
 80046dc:	463b      	mov	r3, r7
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	785b      	ldrb	r3, [r3, #1]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d164      	bne.n	80047b0 <USB_EPStartXfer+0x63c>
 80046e6:	1d3b      	adds	r3, r7, #4
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046ec:	1d3b      	adds	r3, r7, #4
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	461a      	mov	r2, r3
 80046f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046fa:	4413      	add	r3, r2
 80046fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046fe:	463b      	mov	r3, r7
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	011a      	lsls	r2, r3, #4
 8004706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004708:	4413      	add	r3, r2
 800470a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800470e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004710:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004714:	2b00      	cmp	r3, #0
 8004716:	d112      	bne.n	800473e <USB_EPStartXfer+0x5ca>
 8004718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471a:	881b      	ldrh	r3, [r3, #0]
 800471c:	b29b      	uxth	r3, r3
 800471e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004722:	b29a      	uxth	r2, r3
 8004724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004726:	801a      	strh	r2, [r3, #0]
 8004728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	b29b      	uxth	r3, r3
 800472e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004732:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004736:	b29a      	uxth	r2, r3
 8004738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473a:	801a      	strh	r2, [r3, #0]
 800473c:	e054      	b.n	80047e8 <USB_EPStartXfer+0x674>
 800473e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004742:	2b3e      	cmp	r3, #62	; 0x3e
 8004744:	d817      	bhi.n	8004776 <USB_EPStartXfer+0x602>
 8004746:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800474a:	085b      	lsrs	r3, r3, #1
 800474c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004750:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	d004      	beq.n	8004766 <USB_EPStartXfer+0x5f2>
 800475c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004760:	3301      	adds	r3, #1
 8004762:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004766:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800476a:	b29b      	uxth	r3, r3
 800476c:	029b      	lsls	r3, r3, #10
 800476e:	b29a      	uxth	r2, r3
 8004770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004772:	801a      	strh	r2, [r3, #0]
 8004774:	e038      	b.n	80047e8 <USB_EPStartXfer+0x674>
 8004776:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800477a:	095b      	lsrs	r3, r3, #5
 800477c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004780:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004784:	f003 031f 	and.w	r3, r3, #31
 8004788:	2b00      	cmp	r3, #0
 800478a:	d104      	bne.n	8004796 <USB_EPStartXfer+0x622>
 800478c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004790:	3b01      	subs	r3, #1
 8004792:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004796:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800479a:	b29b      	uxth	r3, r3
 800479c:	029b      	lsls	r3, r3, #10
 800479e:	b29b      	uxth	r3, r3
 80047a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ac:	801a      	strh	r2, [r3, #0]
 80047ae:	e01b      	b.n	80047e8 <USB_EPStartXfer+0x674>
 80047b0:	463b      	mov	r3, r7
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	785b      	ldrb	r3, [r3, #1]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d116      	bne.n	80047e8 <USB_EPStartXfer+0x674>
 80047ba:	1d3b      	adds	r3, r7, #4
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	461a      	mov	r2, r3
 80047c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047c8:	4413      	add	r3, r2
 80047ca:	647b      	str	r3, [r7, #68]	; 0x44
 80047cc:	463b      	mov	r3, r7
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	011a      	lsls	r2, r3, #4
 80047d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047d6:	4413      	add	r3, r2
 80047d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047dc:	643b      	str	r3, [r7, #64]	; 0x40
 80047de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80047e8:	463b      	mov	r3, r7
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	895b      	ldrh	r3, [r3, #10]
 80047ee:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80047f2:	463b      	mov	r3, r7
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6959      	ldr	r1, [r3, #20]
 80047f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004802:	1d38      	adds	r0, r7, #4
 8004804:	6800      	ldr	r0, [r0, #0]
 8004806:	f000 ff13 	bl	8005630 <USB_WritePMA>
 800480a:	e1e2      	b.n	8004bd2 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800480c:	463b      	mov	r3, r7
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004816:	1d3b      	adds	r3, r7, #4
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	463b      	mov	r3, r7
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	b29b      	uxth	r3, r3
 8004828:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800482c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004830:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004834:	1d3b      	adds	r3, r7, #4
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	463b      	mov	r3, r7
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	441a      	add	r2, r3
 8004842:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004846:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800484a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800484e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004856:	b29b      	uxth	r3, r3
 8004858:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800485a:	1d3b      	adds	r3, r7, #4
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	663b      	str	r3, [r7, #96]	; 0x60
 8004860:	1d3b      	adds	r3, r7, #4
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004868:	b29b      	uxth	r3, r3
 800486a:	461a      	mov	r2, r3
 800486c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800486e:	4413      	add	r3, r2
 8004870:	663b      	str	r3, [r7, #96]	; 0x60
 8004872:	463b      	mov	r3, r7
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	011a      	lsls	r2, r3, #4
 800487a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800487c:	4413      	add	r3, r2
 800487e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004882:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004888:	b29a      	uxth	r2, r3
 800488a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800488c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800488e:	463b      	mov	r3, r7
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	891b      	ldrh	r3, [r3, #8]
 8004894:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004898:	463b      	mov	r3, r7
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6959      	ldr	r1, [r3, #20]
 800489e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80048a8:	1d38      	adds	r0, r7, #4
 80048aa:	6800      	ldr	r0, [r0, #0]
 80048ac:	f000 fec0 	bl	8005630 <USB_WritePMA>
 80048b0:	e18f      	b.n	8004bd2 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80048b2:	1d3b      	adds	r3, r7, #4
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	463b      	mov	r3, r7
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	881b      	ldrh	r3, [r3, #0]
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 808f 	beq.w	80049ec <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80048ce:	1d3b      	adds	r3, r7, #4
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80048d4:	463b      	mov	r3, r7
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	785b      	ldrb	r3, [r3, #1]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d164      	bne.n	80049a8 <USB_EPStartXfer+0x834>
 80048de:	1d3b      	adds	r3, r7, #4
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	673b      	str	r3, [r7, #112]	; 0x70
 80048e4:	1d3b      	adds	r3, r7, #4
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	461a      	mov	r2, r3
 80048f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048f2:	4413      	add	r3, r2
 80048f4:	673b      	str	r3, [r7, #112]	; 0x70
 80048f6:	463b      	mov	r3, r7
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	011a      	lsls	r2, r3, #4
 80048fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004900:	4413      	add	r3, r2
 8004902:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004906:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004908:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800490c:	2b00      	cmp	r3, #0
 800490e:	d112      	bne.n	8004936 <USB_EPStartXfer+0x7c2>
 8004910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	b29b      	uxth	r3, r3
 8004916:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800491a:	b29a      	uxth	r2, r3
 800491c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800491e:	801a      	strh	r2, [r3, #0]
 8004920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	b29b      	uxth	r3, r3
 8004926:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800492a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800492e:	b29a      	uxth	r2, r3
 8004930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004932:	801a      	strh	r2, [r3, #0]
 8004934:	e054      	b.n	80049e0 <USB_EPStartXfer+0x86c>
 8004936:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800493a:	2b3e      	cmp	r3, #62	; 0x3e
 800493c:	d817      	bhi.n	800496e <USB_EPStartXfer+0x7fa>
 800493e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004942:	085b      	lsrs	r3, r3, #1
 8004944:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004948:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b00      	cmp	r3, #0
 8004952:	d004      	beq.n	800495e <USB_EPStartXfer+0x7ea>
 8004954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004958:	3301      	adds	r3, #1
 800495a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800495e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004962:	b29b      	uxth	r3, r3
 8004964:	029b      	lsls	r3, r3, #10
 8004966:	b29a      	uxth	r2, r3
 8004968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800496a:	801a      	strh	r2, [r3, #0]
 800496c:	e038      	b.n	80049e0 <USB_EPStartXfer+0x86c>
 800496e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004972:	095b      	lsrs	r3, r3, #5
 8004974:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004978:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800497c:	f003 031f 	and.w	r3, r3, #31
 8004980:	2b00      	cmp	r3, #0
 8004982:	d104      	bne.n	800498e <USB_EPStartXfer+0x81a>
 8004984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004988:	3b01      	subs	r3, #1
 800498a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800498e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004992:	b29b      	uxth	r3, r3
 8004994:	029b      	lsls	r3, r3, #10
 8004996:	b29b      	uxth	r3, r3
 8004998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800499c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049a4:	801a      	strh	r2, [r3, #0]
 80049a6:	e01b      	b.n	80049e0 <USB_EPStartXfer+0x86c>
 80049a8:	463b      	mov	r3, r7
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	785b      	ldrb	r3, [r3, #1]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d116      	bne.n	80049e0 <USB_EPStartXfer+0x86c>
 80049b2:	1d3b      	adds	r3, r7, #4
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	461a      	mov	r2, r3
 80049be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049c0:	4413      	add	r3, r2
 80049c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80049c4:	463b      	mov	r3, r7
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	011a      	lsls	r2, r3, #4
 80049cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049ce:	4413      	add	r3, r2
 80049d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049d4:	677b      	str	r3, [r7, #116]	; 0x74
 80049d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049da:	b29a      	uxth	r2, r3
 80049dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049de:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80049e0:	463b      	mov	r3, r7
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	895b      	ldrh	r3, [r3, #10]
 80049e6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 80049ea:	e097      	b.n	8004b1c <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80049ec:	463b      	mov	r3, r7
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	785b      	ldrb	r3, [r3, #1]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d168      	bne.n	8004ac8 <USB_EPStartXfer+0x954>
 80049f6:	1d3b      	adds	r3, r7, #4
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049fe:	1d3b      	adds	r3, r7, #4
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	461a      	mov	r2, r3
 8004a0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a0e:	4413      	add	r3, r2
 8004a10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a14:	463b      	mov	r3, r7
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	011a      	lsls	r2, r3, #4
 8004a1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a20:	4413      	add	r3, r2
 8004a22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a26:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d112      	bne.n	8004a56 <USB_EPStartXfer+0x8e2>
 8004a30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a3e:	801a      	strh	r2, [r3, #0]
 8004a40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a52:	801a      	strh	r2, [r3, #0]
 8004a54:	e05d      	b.n	8004b12 <USB_EPStartXfer+0x99e>
 8004a56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a5a:	2b3e      	cmp	r3, #62	; 0x3e
 8004a5c:	d817      	bhi.n	8004a8e <USB_EPStartXfer+0x91a>
 8004a5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a62:	085b      	lsrs	r3, r3, #1
 8004a64:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004a68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d004      	beq.n	8004a7e <USB_EPStartXfer+0x90a>
 8004a74:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004a78:	3301      	adds	r3, #1
 8004a7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004a7e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	029b      	lsls	r3, r3, #10
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a8a:	801a      	strh	r2, [r3, #0]
 8004a8c:	e041      	b.n	8004b12 <USB_EPStartXfer+0x99e>
 8004a8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a92:	095b      	lsrs	r3, r3, #5
 8004a94:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a9c:	f003 031f 	and.w	r3, r3, #31
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d104      	bne.n	8004aae <USB_EPStartXfer+0x93a>
 8004aa4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004aae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	029b      	lsls	r3, r3, #10
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004abc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ac4:	801a      	strh	r2, [r3, #0]
 8004ac6:	e024      	b.n	8004b12 <USB_EPStartXfer+0x99e>
 8004ac8:	463b      	mov	r3, r7
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	785b      	ldrb	r3, [r3, #1]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d11f      	bne.n	8004b12 <USB_EPStartXfer+0x99e>
 8004ad2:	1d3b      	adds	r3, r7, #4
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ada:	1d3b      	adds	r3, r7, #4
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004aea:	4413      	add	r3, r2
 8004aec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004af0:	463b      	mov	r3, r7
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	011a      	lsls	r2, r3, #4
 8004af8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004afc:	4413      	add	r3, r2
 8004afe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b10:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004b12:	463b      	mov	r3, r7
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	891b      	ldrh	r3, [r3, #8]
 8004b18:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b1c:	463b      	mov	r3, r7
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6959      	ldr	r1, [r3, #20]
 8004b22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004b2c:	1d38      	adds	r0, r7, #4
 8004b2e:	6800      	ldr	r0, [r0, #0]
 8004b30:	f000 fd7e 	bl	8005630 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004b34:	463b      	mov	r3, r7
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	785b      	ldrb	r3, [r3, #1]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d122      	bne.n	8004b84 <USB_EPStartXfer+0xa10>
 8004b3e:	1d3b      	adds	r3, r7, #4
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	463b      	mov	r3, r7
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b58:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8004b5c:	1d3b      	adds	r3, r7, #4
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	463b      	mov	r3, r7
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	441a      	add	r2, r3
 8004b6a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8004b6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	8013      	strh	r3, [r2, #0]
 8004b82:	e026      	b.n	8004bd2 <USB_EPStartXfer+0xa5e>
 8004b84:	463b      	mov	r3, r7
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	785b      	ldrb	r3, [r3, #1]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d121      	bne.n	8004bd2 <USB_EPStartXfer+0xa5e>
 8004b8e:	1d3b      	adds	r3, r7, #4
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	463b      	mov	r3, r7
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8004bac:	1d3b      	adds	r3, r7, #4
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	463b      	mov	r3, r7
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	441a      	add	r2, r3
 8004bba:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004bbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004bd2:	1d3b      	adds	r3, r7, #4
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	463b      	mov	r3, r7
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4413      	add	r3, r2
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	f107 020e 	add.w	r2, r7, #14
 8004be8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bf0:	8013      	strh	r3, [r2, #0]
 8004bf2:	f107 030e 	add.w	r3, r7, #14
 8004bf6:	f107 020e 	add.w	r2, r7, #14
 8004bfa:	8812      	ldrh	r2, [r2, #0]
 8004bfc:	f082 0210 	eor.w	r2, r2, #16
 8004c00:	801a      	strh	r2, [r3, #0]
 8004c02:	f107 030e 	add.w	r3, r7, #14
 8004c06:	f107 020e 	add.w	r2, r7, #14
 8004c0a:	8812      	ldrh	r2, [r2, #0]
 8004c0c:	f082 0220 	eor.w	r2, r2, #32
 8004c10:	801a      	strh	r2, [r3, #0]
 8004c12:	1d3b      	adds	r3, r7, #4
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	463b      	mov	r3, r7
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	441a      	add	r2, r3
 8004c20:	f107 030e 	add.w	r3, r7, #14
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	8013      	strh	r3, [r2, #0]
 8004c3a:	e3b5      	b.n	80053a8 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004c3c:	463b      	mov	r3, r7
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	7b1b      	ldrb	r3, [r3, #12]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f040 8090 	bne.w	8004d68 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004c48:	463b      	mov	r3, r7
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	699a      	ldr	r2, [r3, #24]
 8004c4e:	463b      	mov	r3, r7
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d90e      	bls.n	8004c76 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8004c58:	463b      	mov	r3, r7
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8004c62:	463b      	mov	r3, r7
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	699a      	ldr	r2, [r3, #24]
 8004c68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c6c:	1ad2      	subs	r2, r2, r3
 8004c6e:	463b      	mov	r3, r7
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	619a      	str	r2, [r3, #24]
 8004c74:	e008      	b.n	8004c88 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8004c76:	463b      	mov	r3, r7
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8004c80:	463b      	mov	r3, r7
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2200      	movs	r2, #0
 8004c86:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004c88:	1d3b      	adds	r3, r7, #4
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c90:	1d3b      	adds	r3, r7, #4
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ca6:	463b      	mov	r3, r7
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	011a      	lsls	r2, r3, #4
 8004cae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d116      	bne.n	8004cf2 <USB_EPStartXfer+0xb7e>
 8004cc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cc8:	881b      	ldrh	r3, [r3, #0]
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cd6:	801a      	strh	r2, [r3, #0]
 8004cd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cdc:	881b      	ldrh	r3, [r3, #0]
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ce4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cee:	801a      	strh	r2, [r3, #0]
 8004cf0:	e32c      	b.n	800534c <USB_EPStartXfer+0x11d8>
 8004cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cf6:	2b3e      	cmp	r3, #62	; 0x3e
 8004cf8:	d818      	bhi.n	8004d2c <USB_EPStartXfer+0xbb8>
 8004cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cfe:	085b      	lsrs	r3, r3, #1
 8004d00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004d04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d004      	beq.n	8004d1a <USB_EPStartXfer+0xba6>
 8004d10:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004d14:	3301      	adds	r3, #1
 8004d16:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004d1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	029b      	lsls	r3, r3, #10
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d28:	801a      	strh	r2, [r3, #0]
 8004d2a:	e30f      	b.n	800534c <USB_EPStartXfer+0x11d8>
 8004d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d30:	095b      	lsrs	r3, r3, #5
 8004d32:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d3a:	f003 031f 	and.w	r3, r3, #31
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d104      	bne.n	8004d4c <USB_EPStartXfer+0xbd8>
 8004d42:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004d46:	3b01      	subs	r3, #1
 8004d48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004d4c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	029b      	lsls	r3, r3, #10
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d64:	801a      	strh	r2, [r3, #0]
 8004d66:	e2f1      	b.n	800534c <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004d68:	463b      	mov	r3, r7
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	78db      	ldrb	r3, [r3, #3]
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	f040 818f 	bne.w	8005092 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004d74:	463b      	mov	r3, r7
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	785b      	ldrb	r3, [r3, #1]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d175      	bne.n	8004e6a <USB_EPStartXfer+0xcf6>
 8004d7e:	1d3b      	adds	r3, r7, #4
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d86:	1d3b      	adds	r3, r7, #4
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	461a      	mov	r2, r3
 8004d92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004d96:	4413      	add	r3, r2
 8004d98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d9c:	463b      	mov	r3, r7
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	011a      	lsls	r2, r3, #4
 8004da4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004da8:	4413      	add	r3, r2
 8004daa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004dae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004db2:	463b      	mov	r3, r7
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d116      	bne.n	8004dea <USB_EPStartXfer+0xc76>
 8004dbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dc0:	881b      	ldrh	r3, [r3, #0]
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dce:	801a      	strh	r2, [r3, #0]
 8004dd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004de6:	801a      	strh	r2, [r3, #0]
 8004de8:	e065      	b.n	8004eb6 <USB_EPStartXfer+0xd42>
 8004dea:	463b      	mov	r3, r7
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	2b3e      	cmp	r3, #62	; 0x3e
 8004df2:	d81a      	bhi.n	8004e2a <USB_EPStartXfer+0xcb6>
 8004df4:	463b      	mov	r3, r7
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	085b      	lsrs	r3, r3, #1
 8004dfc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e00:	463b      	mov	r3, r7
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d004      	beq.n	8004e18 <USB_EPStartXfer+0xca4>
 8004e0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e12:	3301      	adds	r3, #1
 8004e14:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	029b      	lsls	r3, r3, #10
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e26:	801a      	strh	r2, [r3, #0]
 8004e28:	e045      	b.n	8004eb6 <USB_EPStartXfer+0xd42>
 8004e2a:	463b      	mov	r3, r7
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	095b      	lsrs	r3, r3, #5
 8004e32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e36:	463b      	mov	r3, r7
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	f003 031f 	and.w	r3, r3, #31
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d104      	bne.n	8004e4e <USB_EPStartXfer+0xcda>
 8004e44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	029b      	lsls	r3, r3, #10
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e66:	801a      	strh	r2, [r3, #0]
 8004e68:	e025      	b.n	8004eb6 <USB_EPStartXfer+0xd42>
 8004e6a:	463b      	mov	r3, r7
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	785b      	ldrb	r3, [r3, #1]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d120      	bne.n	8004eb6 <USB_EPStartXfer+0xd42>
 8004e74:	1d3b      	adds	r3, r7, #4
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e7c:	1d3b      	adds	r3, r7, #4
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	461a      	mov	r2, r3
 8004e88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e92:	463b      	mov	r3, r7
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	011a      	lsls	r2, r3, #4
 8004e9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ea8:	463b      	mov	r3, r7
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004eb4:	801a      	strh	r2, [r3, #0]
 8004eb6:	1d3b      	adds	r3, r7, #4
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ebe:	463b      	mov	r3, r7
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	785b      	ldrb	r3, [r3, #1]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d175      	bne.n	8004fb4 <USB_EPStartXfer+0xe40>
 8004ec8:	1d3b      	adds	r3, r7, #4
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ed0:	1d3b      	adds	r3, r7, #4
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	461a      	mov	r2, r3
 8004edc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ee6:	463b      	mov	r3, r7
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	011a      	lsls	r2, r3, #4
 8004eee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ef8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004efc:	463b      	mov	r3, r7
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d116      	bne.n	8004f34 <USB_EPStartXfer+0xdc0>
 8004f06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f0a:	881b      	ldrh	r3, [r3, #0]
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f18:	801a      	strh	r2, [r3, #0]
 8004f1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f30:	801a      	strh	r2, [r3, #0]
 8004f32:	e061      	b.n	8004ff8 <USB_EPStartXfer+0xe84>
 8004f34:	463b      	mov	r3, r7
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	2b3e      	cmp	r3, #62	; 0x3e
 8004f3c:	d81a      	bhi.n	8004f74 <USB_EPStartXfer+0xe00>
 8004f3e:	463b      	mov	r3, r7
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	085b      	lsrs	r3, r3, #1
 8004f46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f4a:	463b      	mov	r3, r7
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d004      	beq.n	8004f62 <USB_EPStartXfer+0xdee>
 8004f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	029b      	lsls	r3, r3, #10
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f70:	801a      	strh	r2, [r3, #0]
 8004f72:	e041      	b.n	8004ff8 <USB_EPStartXfer+0xe84>
 8004f74:	463b      	mov	r3, r7
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	095b      	lsrs	r3, r3, #5
 8004f7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f80:	463b      	mov	r3, r7
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	f003 031f 	and.w	r3, r3, #31
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d104      	bne.n	8004f98 <USB_EPStartXfer+0xe24>
 8004f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f92:	3b01      	subs	r3, #1
 8004f94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	029b      	lsls	r3, r3, #10
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fb0:	801a      	strh	r2, [r3, #0]
 8004fb2:	e021      	b.n	8004ff8 <USB_EPStartXfer+0xe84>
 8004fb4:	463b      	mov	r3, r7
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	785b      	ldrb	r3, [r3, #1]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d11c      	bne.n	8004ff8 <USB_EPStartXfer+0xe84>
 8004fbe:	1d3b      	adds	r3, r7, #4
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	461a      	mov	r2, r3
 8004fca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004fce:	4413      	add	r3, r2
 8004fd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004fd4:	463b      	mov	r3, r7
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	011a      	lsls	r2, r3, #4
 8004fdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fe6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004fea:	463b      	mov	r3, r7
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004ff6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004ff8:	463b      	mov	r3, r7
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 81a4 	beq.w	800534c <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005004:	1d3b      	adds	r3, r7, #4
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	463b      	mov	r3, r7
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	881b      	ldrh	r3, [r3, #0]
 8005014:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005018:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800501c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d005      	beq.n	8005030 <USB_EPStartXfer+0xebc>
 8005024:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10d      	bne.n	800504c <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005030:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005038:	2b00      	cmp	r3, #0
 800503a:	f040 8187 	bne.w	800534c <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800503e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005046:	2b00      	cmp	r3, #0
 8005048:	f040 8180 	bne.w	800534c <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800504c:	1d3b      	adds	r3, r7, #4
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	463b      	mov	r3, r7
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	881b      	ldrh	r3, [r3, #0]
 800505c:	b29b      	uxth	r3, r3
 800505e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005066:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800506a:	1d3b      	adds	r3, r7, #4
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	463b      	mov	r3, r7
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	441a      	add	r2, r3
 8005078:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800507c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005080:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005084:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005088:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800508c:	b29b      	uxth	r3, r3
 800508e:	8013      	strh	r3, [r2, #0]
 8005090:	e15c      	b.n	800534c <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005092:	463b      	mov	r3, r7
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	78db      	ldrb	r3, [r3, #3]
 8005098:	2b01      	cmp	r3, #1
 800509a:	f040 8155 	bne.w	8005348 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800509e:	463b      	mov	r3, r7
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	699a      	ldr	r2, [r3, #24]
 80050a4:	463b      	mov	r3, r7
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d90e      	bls.n	80050cc <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80050ae:	463b      	mov	r3, r7
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80050b8:	463b      	mov	r3, r7
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699a      	ldr	r2, [r3, #24]
 80050be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050c2:	1ad2      	subs	r2, r2, r3
 80050c4:	463b      	mov	r3, r7
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	619a      	str	r2, [r3, #24]
 80050ca:	e008      	b.n	80050de <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 80050cc:	463b      	mov	r3, r7
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 80050d6:	463b      	mov	r3, r7
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2200      	movs	r2, #0
 80050dc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80050de:	463b      	mov	r3, r7
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	785b      	ldrb	r3, [r3, #1]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d16f      	bne.n	80051c8 <USB_EPStartXfer+0x1054>
 80050e8:	1d3b      	adds	r3, r7, #4
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050f0:	1d3b      	adds	r3, r7, #4
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	461a      	mov	r2, r3
 80050fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005100:	4413      	add	r3, r2
 8005102:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005106:	463b      	mov	r3, r7
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	011a      	lsls	r2, r3, #4
 800510e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005112:	4413      	add	r3, r2
 8005114:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005118:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800511c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005120:	2b00      	cmp	r3, #0
 8005122:	d116      	bne.n	8005152 <USB_EPStartXfer+0xfde>
 8005124:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	b29b      	uxth	r3, r3
 800512c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005130:	b29a      	uxth	r2, r3
 8005132:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005136:	801a      	strh	r2, [r3, #0]
 8005138:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800513c:	881b      	ldrh	r3, [r3, #0]
 800513e:	b29b      	uxth	r3, r3
 8005140:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005144:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005148:	b29a      	uxth	r2, r3
 800514a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800514e:	801a      	strh	r2, [r3, #0]
 8005150:	e05f      	b.n	8005212 <USB_EPStartXfer+0x109e>
 8005152:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005156:	2b3e      	cmp	r3, #62	; 0x3e
 8005158:	d818      	bhi.n	800518c <USB_EPStartXfer+0x1018>
 800515a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800515e:	085b      	lsrs	r3, r3, #1
 8005160:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005164:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b00      	cmp	r3, #0
 800516e:	d004      	beq.n	800517a <USB_EPStartXfer+0x1006>
 8005170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005174:	3301      	adds	r3, #1
 8005176:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800517a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800517e:	b29b      	uxth	r3, r3
 8005180:	029b      	lsls	r3, r3, #10
 8005182:	b29a      	uxth	r2, r3
 8005184:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005188:	801a      	strh	r2, [r3, #0]
 800518a:	e042      	b.n	8005212 <USB_EPStartXfer+0x109e>
 800518c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005190:	095b      	lsrs	r3, r3, #5
 8005192:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005196:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800519a:	f003 031f 	and.w	r3, r3, #31
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d104      	bne.n	80051ac <USB_EPStartXfer+0x1038>
 80051a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051a6:	3b01      	subs	r3, #1
 80051a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80051ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	029b      	lsls	r3, r3, #10
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051be:	b29a      	uxth	r2, r3
 80051c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051c4:	801a      	strh	r2, [r3, #0]
 80051c6:	e024      	b.n	8005212 <USB_EPStartXfer+0x109e>
 80051c8:	463b      	mov	r3, r7
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	785b      	ldrb	r3, [r3, #1]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d11f      	bne.n	8005212 <USB_EPStartXfer+0x109e>
 80051d2:	1d3b      	adds	r3, r7, #4
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80051da:	1d3b      	adds	r3, r7, #4
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	461a      	mov	r2, r3
 80051e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051ea:	4413      	add	r3, r2
 80051ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80051f0:	463b      	mov	r3, r7
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	011a      	lsls	r2, r3, #4
 80051f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051fc:	4413      	add	r3, r2
 80051fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005202:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005206:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800520a:	b29a      	uxth	r2, r3
 800520c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005210:	801a      	strh	r2, [r3, #0]
 8005212:	1d3b      	adds	r3, r7, #4
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800521a:	463b      	mov	r3, r7
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	785b      	ldrb	r3, [r3, #1]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d16f      	bne.n	8005304 <USB_EPStartXfer+0x1190>
 8005224:	1d3b      	adds	r3, r7, #4
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800522c:	1d3b      	adds	r3, r7, #4
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005234:	b29b      	uxth	r3, r3
 8005236:	461a      	mov	r2, r3
 8005238:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800523c:	4413      	add	r3, r2
 800523e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005242:	463b      	mov	r3, r7
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	011a      	lsls	r2, r3, #4
 800524a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800524e:	4413      	add	r3, r2
 8005250:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005254:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005258:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800525c:	2b00      	cmp	r3, #0
 800525e:	d116      	bne.n	800528e <USB_EPStartXfer+0x111a>
 8005260:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	b29b      	uxth	r3, r3
 8005268:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800526c:	b29a      	uxth	r2, r3
 800526e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005272:	801a      	strh	r2, [r3, #0]
 8005274:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	b29b      	uxth	r3, r3
 800527c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005280:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005284:	b29a      	uxth	r2, r3
 8005286:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800528a:	801a      	strh	r2, [r3, #0]
 800528c:	e05e      	b.n	800534c <USB_EPStartXfer+0x11d8>
 800528e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005292:	2b3e      	cmp	r3, #62	; 0x3e
 8005294:	d818      	bhi.n	80052c8 <USB_EPStartXfer+0x1154>
 8005296:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800529a:	085b      	lsrs	r3, r3, #1
 800529c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80052a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d004      	beq.n	80052b6 <USB_EPStartXfer+0x1142>
 80052ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052b0:	3301      	adds	r3, #1
 80052b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80052b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	029b      	lsls	r3, r3, #10
 80052be:	b29a      	uxth	r2, r3
 80052c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80052c4:	801a      	strh	r2, [r3, #0]
 80052c6:	e041      	b.n	800534c <USB_EPStartXfer+0x11d8>
 80052c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052cc:	095b      	lsrs	r3, r3, #5
 80052ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80052d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052d6:	f003 031f 	and.w	r3, r3, #31
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d104      	bne.n	80052e8 <USB_EPStartXfer+0x1174>
 80052de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052e2:	3b01      	subs	r3, #1
 80052e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80052e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	029b      	lsls	r3, r3, #10
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005300:	801a      	strh	r2, [r3, #0]
 8005302:	e023      	b.n	800534c <USB_EPStartXfer+0x11d8>
 8005304:	463b      	mov	r3, r7
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	785b      	ldrb	r3, [r3, #1]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d11e      	bne.n	800534c <USB_EPStartXfer+0x11d8>
 800530e:	1d3b      	adds	r3, r7, #4
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005316:	b29b      	uxth	r3, r3
 8005318:	461a      	mov	r2, r3
 800531a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800531e:	4413      	add	r3, r2
 8005320:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005324:	463b      	mov	r3, r7
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	011a      	lsls	r2, r3, #4
 800532c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005330:	4413      	add	r3, r2
 8005332:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005336:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800533a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800533e:	b29a      	uxth	r2, r3
 8005340:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005344:	801a      	strh	r2, [r3, #0]
 8005346:	e001      	b.n	800534c <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e02e      	b.n	80053aa <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800534c:	1d3b      	adds	r3, r7, #4
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	463b      	mov	r3, r7
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	881b      	ldrh	r3, [r3, #0]
 800535c:	b29b      	uxth	r3, r3
 800535e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005366:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800536a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800536e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005372:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005376:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800537a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800537e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005382:	1d3b      	adds	r3, r7, #4
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	463b      	mov	r3, r7
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	441a      	add	r2, r3
 8005390:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005394:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005398:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800539c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	785b      	ldrb	r3, [r3, #1]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d020      	beq.n	8005408 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4413      	add	r3, r2
 80053d0:	881b      	ldrh	r3, [r3, #0]
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053dc:	81bb      	strh	r3, [r7, #12]
 80053de:	89bb      	ldrh	r3, [r7, #12]
 80053e0:	f083 0310 	eor.w	r3, r3, #16
 80053e4:	81bb      	strh	r3, [r7, #12]
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	441a      	add	r2, r3
 80053f0:	89bb      	ldrh	r3, [r7, #12]
 80053f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005402:	b29b      	uxth	r3, r3
 8005404:	8013      	strh	r3, [r2, #0]
 8005406:	e01f      	b.n	8005448 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	b29b      	uxth	r3, r3
 8005416:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800541a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800541e:	81fb      	strh	r3, [r7, #14]
 8005420:	89fb      	ldrh	r3, [r7, #14]
 8005422:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005426:	81fb      	strh	r3, [r7, #14]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	441a      	add	r2, r3
 8005432:	89fb      	ldrh	r3, [r7, #14]
 8005434:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005438:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800543c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005444:	b29b      	uxth	r3, r3
 8005446:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3714      	adds	r7, #20
 800544e:	46bd      	mov	sp, r7
 8005450:	bc80      	pop	{r7}
 8005452:	4770      	bx	lr

08005454 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	7b1b      	ldrb	r3, [r3, #12]
 8005462:	2b00      	cmp	r3, #0
 8005464:	f040 809d 	bne.w	80055a2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	785b      	ldrb	r3, [r3, #1]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d04c      	beq.n	800550a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	881b      	ldrh	r3, [r3, #0]
 800547c:	823b      	strh	r3, [r7, #16]
 800547e:	8a3b      	ldrh	r3, [r7, #16]
 8005480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005484:	2b00      	cmp	r3, #0
 8005486:	d01b      	beq.n	80054c0 <USB_EPClearStall+0x6c>
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	b29b      	uxth	r3, r3
 8005496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800549a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549e:	81fb      	strh	r3, [r7, #14]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	441a      	add	r2, r3
 80054aa:	89fb      	ldrh	r3, [r7, #14]
 80054ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054bc:	b29b      	uxth	r3, r3
 80054be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	78db      	ldrb	r3, [r3, #3]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d06c      	beq.n	80055a2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054de:	81bb      	strh	r3, [r7, #12]
 80054e0:	89bb      	ldrh	r3, [r7, #12]
 80054e2:	f083 0320 	eor.w	r3, r3, #32
 80054e6:	81bb      	strh	r3, [r7, #12]
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	441a      	add	r2, r3
 80054f2:	89bb      	ldrh	r3, [r7, #12]
 80054f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005504:	b29b      	uxth	r3, r3
 8005506:	8013      	strh	r3, [r2, #0]
 8005508:	e04b      	b.n	80055a2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	881b      	ldrh	r3, [r3, #0]
 8005516:	82fb      	strh	r3, [r7, #22]
 8005518:	8afb      	ldrh	r3, [r7, #22]
 800551a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d01b      	beq.n	800555a <USB_EPClearStall+0x106>
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	b29b      	uxth	r3, r3
 8005530:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005538:	82bb      	strh	r3, [r7, #20]
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	441a      	add	r2, r3
 8005544:	8abb      	ldrh	r3, [r7, #20]
 8005546:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800554a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800554e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005556:	b29b      	uxth	r3, r3
 8005558:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4413      	add	r3, r2
 8005564:	881b      	ldrh	r3, [r3, #0]
 8005566:	b29b      	uxth	r3, r3
 8005568:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800556c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005570:	827b      	strh	r3, [r7, #18]
 8005572:	8a7b      	ldrh	r3, [r7, #18]
 8005574:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005578:	827b      	strh	r3, [r7, #18]
 800557a:	8a7b      	ldrh	r3, [r7, #18]
 800557c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005580:	827b      	strh	r3, [r7, #18]
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	441a      	add	r2, r3
 800558c:	8a7b      	ldrh	r3, [r7, #18]
 800558e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005592:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800559a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800559e:	b29b      	uxth	r3, r3
 80055a0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	371c      	adds	r7, #28
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bc80      	pop	{r7}
 80055ac:	4770      	bx	lr

080055ae <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b083      	sub	sp, #12
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
 80055b6:	460b      	mov	r3, r1
 80055b8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80055ba:	78fb      	ldrb	r3, [r7, #3]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d103      	bne.n	80055c8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2280      	movs	r2, #128	; 0x80
 80055c4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bc80      	pop	{r7}
 80055d2:	4770      	bx	lr

080055d4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bc80      	pop	{r7}
 80055e6:	4770      	bx	lr

080055e8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	370c      	adds	r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bc80      	pop	{r7}
 80055fa:	4770      	bx	lr

080055fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800560a:	b29b      	uxth	r3, r3
 800560c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800560e:	68fb      	ldr	r3, [r7, #12]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	bc80      	pop	{r7}
 8005618:	4770      	bx	lr

0800561a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800561a:	b480      	push	{r7}
 800561c:	b083      	sub	sp, #12
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
 8005622:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	bc80      	pop	{r7}
 800562e:	4770      	bx	lr

08005630 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005630:	b480      	push	{r7}
 8005632:	b08d      	sub	sp, #52	; 0x34
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	4611      	mov	r1, r2
 800563c:	461a      	mov	r2, r3
 800563e:	460b      	mov	r3, r1
 8005640:	80fb      	strh	r3, [r7, #6]
 8005642:	4613      	mov	r3, r2
 8005644:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005646:	88bb      	ldrh	r3, [r7, #4]
 8005648:	3301      	adds	r3, #1
 800564a:	085b      	lsrs	r3, r3, #1
 800564c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005656:	88fb      	ldrh	r3, [r7, #6]
 8005658:	005a      	lsls	r2, r3, #1
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	4413      	add	r3, r2
 800565e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005662:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005664:	6a3b      	ldr	r3, [r7, #32]
 8005666:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005668:	e01e      	b.n	80056a8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800566a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	3301      	adds	r3, #1
 8005674:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	b29b      	uxth	r3, r3
 800567c:	021b      	lsls	r3, r3, #8
 800567e:	b29b      	uxth	r3, r3
 8005680:	461a      	mov	r2, r3
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	4313      	orrs	r3, r2
 8005686:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	b29a      	uxth	r2, r3
 800568c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005692:	3302      	adds	r3, #2
 8005694:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005698:	3302      	adds	r3, #2
 800569a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800569c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569e:	3301      	adds	r3, #1
 80056a0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80056a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a4:	3b01      	subs	r3, #1
 80056a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1dd      	bne.n	800566a <USB_WritePMA+0x3a>
  }
}
 80056ae:	bf00      	nop
 80056b0:	3734      	adds	r7, #52	; 0x34
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bc80      	pop	{r7}
 80056b6:	4770      	bx	lr

080056b8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b08b      	sub	sp, #44	; 0x2c
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	4611      	mov	r1, r2
 80056c4:	461a      	mov	r2, r3
 80056c6:	460b      	mov	r3, r1
 80056c8:	80fb      	strh	r3, [r7, #6]
 80056ca:	4613      	mov	r3, r2
 80056cc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80056ce:	88bb      	ldrh	r3, [r7, #4]
 80056d0:	085b      	lsrs	r3, r3, #1
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80056de:	88fb      	ldrh	r3, [r7, #6]
 80056e0:	005a      	lsls	r2, r3, #1
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	4413      	add	r3, r2
 80056e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056ea:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	627b      	str	r3, [r7, #36]	; 0x24
 80056f0:	e01b      	b.n	800572a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	3302      	adds	r3, #2
 80056fe:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	b2da      	uxtb	r2, r3
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	3301      	adds	r3, #1
 800570c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	0a1b      	lsrs	r3, r3, #8
 8005712:	b2da      	uxtb	r2, r3
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	3301      	adds	r3, #1
 800571c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	3302      	adds	r3, #2
 8005722:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	3b01      	subs	r3, #1
 8005728:	627b      	str	r3, [r7, #36]	; 0x24
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1e0      	bne.n	80056f2 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005730:	88bb      	ldrh	r3, [r7, #4]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	b29b      	uxth	r3, r3
 8005738:	2b00      	cmp	r3, #0
 800573a:	d007      	beq.n	800574c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	881b      	ldrh	r3, [r3, #0]
 8005740:	b29b      	uxth	r3, r3
 8005742:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	b2da      	uxtb	r2, r3
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	701a      	strb	r2, [r3, #0]
  }
}
 800574c:	bf00      	nop
 800574e:	372c      	adds	r7, #44	; 0x2c
 8005750:	46bd      	mov	sp, r7
 8005752:	bc80      	pop	{r7}
 8005754:	4770      	bx	lr

08005756 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b084      	sub	sp, #16
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	460b      	mov	r3, r1
 8005760:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005762:	2300      	movs	r3, #0
 8005764:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	7c1b      	ldrb	r3, [r3, #16]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d115      	bne.n	800579a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800576e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005772:	2202      	movs	r2, #2
 8005774:	2181      	movs	r1, #129	; 0x81
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f001 fe81 	bl	800747e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005782:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005786:	2202      	movs	r2, #2
 8005788:	2101      	movs	r1, #1
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f001 fe77 	bl	800747e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005798:	e012      	b.n	80057c0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800579a:	2340      	movs	r3, #64	; 0x40
 800579c:	2202      	movs	r2, #2
 800579e:	2181      	movs	r1, #129	; 0x81
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f001 fe6c 	bl	800747e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80057ac:	2340      	movs	r3, #64	; 0x40
 80057ae:	2202      	movs	r2, #2
 80057b0:	2101      	movs	r1, #1
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f001 fe63 	bl	800747e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80057c0:	2308      	movs	r3, #8
 80057c2:	2203      	movs	r2, #3
 80057c4:	2182      	movs	r1, #130	; 0x82
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f001 fe59 	bl	800747e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80057d2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80057d6:	f001 ff79 	bl	80076cc <USBD_static_malloc>
 80057da:	4602      	mov	r2, r0
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d102      	bne.n	80057f2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80057ec:	2301      	movs	r3, #1
 80057ee:	73fb      	strb	r3, [r7, #15]
 80057f0:	e026      	b.n	8005840 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057f8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2200      	movs	r2, #0
 8005808:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2200      	movs	r2, #0
 8005810:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	7c1b      	ldrb	r3, [r3, #16]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d109      	bne.n	8005830 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005822:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005826:	2101      	movs	r1, #1
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f001 ff19 	bl	8007660 <USBD_LL_PrepareReceive>
 800582e:	e007      	b.n	8005840 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005836:	2340      	movs	r3, #64	; 0x40
 8005838:	2101      	movs	r1, #1
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f001 ff10 	bl	8007660 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005840:	7bfb      	ldrb	r3, [r7, #15]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b084      	sub	sp, #16
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	460b      	mov	r3, r1
 8005854:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800585a:	2181      	movs	r1, #129	; 0x81
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f001 fe34 	bl	80074ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005868:	2101      	movs	r1, #1
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f001 fe2d 	bl	80074ca <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005878:	2182      	movs	r1, #130	; 0x82
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f001 fe25 	bl	80074ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00e      	beq.n	80058ae <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058a0:	4618      	mov	r0, r3
 80058a2:	f001 ff1f 	bl	80076e4 <USBD_static_free>
    pdev->pClassData = NULL;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80058ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058c8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80058ca:	2300      	movs	r3, #0
 80058cc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80058ce:	2300      	movs	r3, #0
 80058d0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80058d2:	2300      	movs	r3, #0
 80058d4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d039      	beq.n	8005956 <USBD_CDC_Setup+0x9e>
 80058e2:	2b20      	cmp	r3, #32
 80058e4:	d17c      	bne.n	80059e0 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	88db      	ldrh	r3, [r3, #6]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d029      	beq.n	8005942 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	b25b      	sxtb	r3, r3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	da11      	bge.n	800591c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	683a      	ldr	r2, [r7, #0]
 8005902:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005904:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005906:	683a      	ldr	r2, [r7, #0]
 8005908:	88d2      	ldrh	r2, [r2, #6]
 800590a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800590c:	6939      	ldr	r1, [r7, #16]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	88db      	ldrh	r3, [r3, #6]
 8005912:	461a      	mov	r2, r3
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f001 f9f9 	bl	8006d0c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800591a:	e068      	b.n	80059ee <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	785a      	ldrb	r2, [r3, #1]
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	88db      	ldrh	r3, [r3, #6]
 800592a:	b2da      	uxtb	r2, r3
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005932:	6939      	ldr	r1, [r7, #16]
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	88db      	ldrh	r3, [r3, #6]
 8005938:	461a      	mov	r2, r3
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f001 fa14 	bl	8006d68 <USBD_CtlPrepareRx>
      break;
 8005940:	e055      	b.n	80059ee <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	7850      	ldrb	r0, [r2, #1]
 800594e:	2200      	movs	r2, #0
 8005950:	6839      	ldr	r1, [r7, #0]
 8005952:	4798      	blx	r3
      break;
 8005954:	e04b      	b.n	80059ee <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	785b      	ldrb	r3, [r3, #1]
 800595a:	2b0a      	cmp	r3, #10
 800595c:	d017      	beq.n	800598e <USBD_CDC_Setup+0xd6>
 800595e:	2b0b      	cmp	r3, #11
 8005960:	d029      	beq.n	80059b6 <USBD_CDC_Setup+0xfe>
 8005962:	2b00      	cmp	r3, #0
 8005964:	d133      	bne.n	80059ce <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800596c:	2b03      	cmp	r3, #3
 800596e:	d107      	bne.n	8005980 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005970:	f107 030c 	add.w	r3, r7, #12
 8005974:	2202      	movs	r2, #2
 8005976:	4619      	mov	r1, r3
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f001 f9c7 	bl	8006d0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800597e:	e02e      	b.n	80059de <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005980:	6839      	ldr	r1, [r7, #0]
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f001 f958 	bl	8006c38 <USBD_CtlError>
            ret = USBD_FAIL;
 8005988:	2302      	movs	r3, #2
 800598a:	75fb      	strb	r3, [r7, #23]
          break;
 800598c:	e027      	b.n	80059de <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005994:	2b03      	cmp	r3, #3
 8005996:	d107      	bne.n	80059a8 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005998:	f107 030f 	add.w	r3, r7, #15
 800599c:	2201      	movs	r2, #1
 800599e:	4619      	mov	r1, r3
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f001 f9b3 	bl	8006d0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80059a6:	e01a      	b.n	80059de <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80059a8:	6839      	ldr	r1, [r7, #0]
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f001 f944 	bl	8006c38 <USBD_CtlError>
            ret = USBD_FAIL;
 80059b0:	2302      	movs	r3, #2
 80059b2:	75fb      	strb	r3, [r7, #23]
          break;
 80059b4:	e013      	b.n	80059de <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059bc:	2b03      	cmp	r3, #3
 80059be:	d00d      	beq.n	80059dc <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80059c0:	6839      	ldr	r1, [r7, #0]
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f001 f938 	bl	8006c38 <USBD_CtlError>
            ret = USBD_FAIL;
 80059c8:	2302      	movs	r3, #2
 80059ca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80059cc:	e006      	b.n	80059dc <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80059ce:	6839      	ldr	r1, [r7, #0]
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f001 f931 	bl	8006c38 <USBD_CtlError>
          ret = USBD_FAIL;
 80059d6:	2302      	movs	r3, #2
 80059d8:	75fb      	strb	r3, [r7, #23]
          break;
 80059da:	e000      	b.n	80059de <USBD_CDC_Setup+0x126>
          break;
 80059dc:	bf00      	nop
      }
      break;
 80059de:	e006      	b.n	80059ee <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80059e0:	6839      	ldr	r1, [r7, #0]
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f001 f928 	bl	8006c38 <USBD_CtlError>
      ret = USBD_FAIL;
 80059e8:	2302      	movs	r3, #2
 80059ea:	75fb      	strb	r3, [r7, #23]
      break;
 80059ec:	bf00      	nop
  }

  return ret;
 80059ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3718      	adds	r7, #24
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	460b      	mov	r3, r1
 8005a02:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a0a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a12:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d03a      	beq.n	8005a94 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005a1e:	78fa      	ldrb	r2, [r7, #3]
 8005a20:	6879      	ldr	r1, [r7, #4]
 8005a22:	4613      	mov	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	440b      	add	r3, r1
 8005a2c:	331c      	adds	r3, #28
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d029      	beq.n	8005a88 <USBD_CDC_DataIn+0x90>
 8005a34:	78fa      	ldrb	r2, [r7, #3]
 8005a36:	6879      	ldr	r1, [r7, #4]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	440b      	add	r3, r1
 8005a42:	331c      	adds	r3, #28
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	78f9      	ldrb	r1, [r7, #3]
 8005a48:	68b8      	ldr	r0, [r7, #8]
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	440b      	add	r3, r1
 8005a50:	00db      	lsls	r3, r3, #3
 8005a52:	4403      	add	r3, r0
 8005a54:	3338      	adds	r3, #56	; 0x38
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	fbb2 f1f3 	udiv	r1, r2, r3
 8005a5c:	fb03 f301 	mul.w	r3, r3, r1
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d110      	bne.n	8005a88 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005a66:	78fa      	ldrb	r2, [r7, #3]
 8005a68:	6879      	ldr	r1, [r7, #4]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4413      	add	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	440b      	add	r3, r1
 8005a74:	331c      	adds	r3, #28
 8005a76:	2200      	movs	r2, #0
 8005a78:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005a7a:	78f9      	ldrb	r1, [r7, #3]
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	2200      	movs	r2, #0
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f001 fdca 	bl	800761a <USBD_LL_Transmit>
 8005a86:	e003      	b.n	8005a90 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005a90:	2300      	movs	r3, #0
 8005a92:	e000      	b.n	8005a96 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005a94:	2302      	movs	r3, #2
  }
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b084      	sub	sp, #16
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ab0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005ab2:	78fb      	ldrb	r3, [r7, #3]
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f001 fdf5 	bl	80076a6 <USBD_LL_GetRxDataSize>
 8005abc:	4602      	mov	r2, r0
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00d      	beq.n	8005aea <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	4798      	blx	r3

    return USBD_OK;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	e000      	b.n	8005aec <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005aea:	2302      	movs	r3, #2
  }
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b02:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d015      	beq.n	8005b3a <USBD_CDC_EP0_RxReady+0x46>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005b14:	2bff      	cmp	r3, #255	; 0xff
 8005b16:	d010      	beq.n	8005b3a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005b26:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005b2e:	b292      	uxth	r2, r2
 8005b30:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	22ff      	movs	r2, #255	; 0xff
 8005b36:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2243      	movs	r2, #67	; 0x43
 8005b50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005b52:	4b03      	ldr	r3, [pc, #12]	; (8005b60 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bc80      	pop	{r7}
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	20000098 	.word	0x20000098

08005b64 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2243      	movs	r2, #67	; 0x43
 8005b70:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005b72:	4b03      	ldr	r3, [pc, #12]	; (8005b80 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bc80      	pop	{r7}
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	20000054 	.word	0x20000054

08005b84 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2243      	movs	r2, #67	; 0x43
 8005b90:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005b92:	4b03      	ldr	r3, [pc, #12]	; (8005ba0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bc80      	pop	{r7}
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	200000dc 	.word	0x200000dc

08005ba4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	220a      	movs	r2, #10
 8005bb0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005bb2:	4b03      	ldr	r3, [pc, #12]	; (8005bc0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bc80      	pop	{r7}
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	20000010 	.word	0x20000010

08005bc4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005bce:	2302      	movs	r3, #2
 8005bd0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d005      	beq.n	8005be4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005be0:	2300      	movs	r3, #0
 8005be2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bc80      	pop	{r7}
 8005bee:	4770      	bx	lr

08005bf0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c04:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005c0e:	88fa      	ldrh	r2, [r7, #6]
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	371c      	adds	r7, #28
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bc80      	pop	{r7}
 8005c20:	4770      	bx	lr

08005c22 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b085      	sub	sp, #20
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
 8005c2a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c32:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3714      	adds	r7, #20
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bc80      	pop	{r7}
 8005c46:	4770      	bx	lr

08005c48 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c56:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d01c      	beq.n	8005c9c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d115      	bne.n	8005c98 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	2181      	movs	r1, #129	; 0x81
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f001 fcc3 	bl	800761a <USBD_LL_Transmit>

      return USBD_OK;
 8005c94:	2300      	movs	r3, #0
 8005c96:	e002      	b.n	8005c9e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e000      	b.n	8005c9e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005c9c:	2302      	movs	r3, #2
  }
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b084      	sub	sp, #16
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cb4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d017      	beq.n	8005cf0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	7c1b      	ldrb	r3, [r3, #16]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d109      	bne.n	8005cdc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005cce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cd2:	2101      	movs	r1, #1
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f001 fcc3 	bl	8007660 <USBD_LL_PrepareReceive>
 8005cda:	e007      	b.n	8005cec <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ce2:	2340      	movs	r3, #64	; 0x40
 8005ce4:	2101      	movs	r1, #1
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f001 fcba 	bl	8007660 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005cec:	2300      	movs	r3, #0
 8005cee:	e000      	b.n	8005cf2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005cf0:	2302      	movs	r3, #2
  }
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b084      	sub	sp, #16
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	60f8      	str	r0, [r7, #12]
 8005d02:	60b9      	str	r1, [r7, #8]
 8005d04:	4613      	mov	r3, r2
 8005d06:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005d0e:	2302      	movs	r3, #2
 8005d10:	e01a      	b.n	8005d48 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d003      	beq.n	8005d24 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	79fa      	ldrb	r2, [r7, #7]
 8005d3e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f001 fb27 	bl	8007394 <USBD_LL_Init>

  return USBD_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d006      	beq.n	8005d72 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	73fb      	strb	r3, [r7, #15]
 8005d70:	e001      	b.n	8005d76 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005d72:	2302      	movs	r3, #2
 8005d74:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bc80      	pop	{r7}
 8005d80:	4770      	bx	lr

08005d82 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b082      	sub	sp, #8
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f001 fb5c 	bl	8007448 <USBD_LL_Start>

  return USBD_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b083      	sub	sp, #12
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bc80      	pop	{r7}
 8005dac:	4770      	bx	lr

08005dae <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b084      	sub	sp, #16
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	460b      	mov	r3, r1
 8005db8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005dba:	2302      	movs	r3, #2
 8005dbc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00c      	beq.n	8005de2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	78fa      	ldrb	r2, [r7, #3]
 8005dd2:	4611      	mov	r1, r2
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	4798      	blx	r3
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005dde:	2300      	movs	r3, #0
 8005de0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	460b      	mov	r3, r1
 8005df6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	78fa      	ldrb	r2, [r7, #3]
 8005e02:	4611      	mov	r1, r2
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	4798      	blx	r3

  return USBD_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3708      	adds	r7, #8
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b082      	sub	sp, #8
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
 8005e1a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005e22:	6839      	ldr	r1, [r7, #0]
 8005e24:	4618      	mov	r0, r3
 8005e26:	f000 fecb 	bl	8006bc0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005e38:	461a      	mov	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005e46:	f003 031f 	and.w	r3, r3, #31
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d00c      	beq.n	8005e68 <USBD_LL_SetupStage+0x56>
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d302      	bcc.n	8005e58 <USBD_LL_SetupStage+0x46>
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d010      	beq.n	8005e78 <USBD_LL_SetupStage+0x66>
 8005e56:	e017      	b.n	8005e88 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005e5e:	4619      	mov	r1, r3
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 f9cb 	bl	80061fc <USBD_StdDevReq>
      break;
 8005e66:	e01a      	b.n	8005e9e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005e6e:	4619      	mov	r1, r3
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 fa2d 	bl	80062d0 <USBD_StdItfReq>
      break;
 8005e76:	e012      	b.n	8005e9e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005e7e:	4619      	mov	r1, r3
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fa6b 	bl	800635c <USBD_StdEPReq>
      break;
 8005e86:	e00a      	b.n	8005e9e <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005e8e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	4619      	mov	r1, r3
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f001 fb36 	bl	8007508 <USBD_LL_StallEP>
      break;
 8005e9c:	bf00      	nop
  }

  return USBD_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3708      	adds	r7, #8
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	607a      	str	r2, [r7, #4]
 8005eb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005eb6:	7afb      	ldrb	r3, [r7, #11]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d14b      	bne.n	8005f54 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005ec2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005eca:	2b03      	cmp	r3, #3
 8005ecc:	d134      	bne.n	8005f38 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d919      	bls.n	8005f0e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	68da      	ldr	r2, [r3, #12]
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	1ad2      	subs	r2, r2, r3
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	68da      	ldr	r2, [r3, #12]
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d203      	bcs.n	8005efc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	e002      	b.n	8005f02 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	461a      	mov	r2, r3
 8005f04:	6879      	ldr	r1, [r7, #4]
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f000 ff4c 	bl	8006da4 <USBD_CtlContinueRx>
 8005f0c:	e038      	b.n	8005f80 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00a      	beq.n	8005f30 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d105      	bne.n	8005f30 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 ff49 	bl	8006dc8 <USBD_CtlSendStatus>
 8005f36:	e023      	b.n	8005f80 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f3e:	2b05      	cmp	r3, #5
 8005f40:	d11e      	bne.n	8005f80 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f001 fadb 	bl	8007508 <USBD_LL_StallEP>
 8005f52:	e015      	b.n	8005f80 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00d      	beq.n	8005f7c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005f66:	2b03      	cmp	r3, #3
 8005f68:	d108      	bne.n	8005f7c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	7afa      	ldrb	r2, [r7, #11]
 8005f74:	4611      	mov	r1, r2
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	4798      	blx	r3
 8005f7a:	e001      	b.n	8005f80 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	e000      	b.n	8005f82 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3718      	adds	r7, #24
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b086      	sub	sp, #24
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	60f8      	str	r0, [r7, #12]
 8005f92:	460b      	mov	r3, r1
 8005f94:	607a      	str	r2, [r7, #4]
 8005f96:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005f98:	7afb      	ldrb	r3, [r7, #11]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d17f      	bne.n	800609e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	3314      	adds	r3, #20
 8005fa2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d15c      	bne.n	8006068 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	68da      	ldr	r2, [r3, #12]
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d915      	bls.n	8005fe6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	68da      	ldr	r2, [r3, #12]
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	1ad2      	subs	r2, r2, r3
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	461a      	mov	r2, r3
 8005fd0:	6879      	ldr	r1, [r7, #4]
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f000 feb6 	bl	8006d44 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005fd8:	2300      	movs	r3, #0
 8005fda:	2200      	movs	r2, #0
 8005fdc:	2100      	movs	r1, #0
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f001 fb3e 	bl	8007660 <USBD_LL_PrepareReceive>
 8005fe4:	e04e      	b.n	8006084 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	6912      	ldr	r2, [r2, #16]
 8005fee:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ff2:	fb02 f201 	mul.w	r2, r2, r1
 8005ff6:	1a9b      	subs	r3, r3, r2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d11c      	bne.n	8006036 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	689a      	ldr	r2, [r3, #8]
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006004:	429a      	cmp	r2, r3
 8006006:	d316      	bcc.n	8006036 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	689a      	ldr	r2, [r3, #8]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006012:	429a      	cmp	r2, r3
 8006014:	d20f      	bcs.n	8006036 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006016:	2200      	movs	r2, #0
 8006018:	2100      	movs	r1, #0
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f000 fe92 	bl	8006d44 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006028:	2300      	movs	r3, #0
 800602a:	2200      	movs	r2, #0
 800602c:	2100      	movs	r1, #0
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f001 fb16 	bl	8007660 <USBD_LL_PrepareReceive>
 8006034:	e026      	b.n	8006084 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00a      	beq.n	8006058 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006048:	2b03      	cmp	r3, #3
 800604a:	d105      	bne.n	8006058 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006058:	2180      	movs	r1, #128	; 0x80
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f001 fa54 	bl	8007508 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f000 fec4 	bl	8006dee <USBD_CtlReceiveStatus>
 8006066:	e00d      	b.n	8006084 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800606e:	2b04      	cmp	r3, #4
 8006070:	d004      	beq.n	800607c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006078:	2b00      	cmp	r3, #0
 800607a:	d103      	bne.n	8006084 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800607c:	2180      	movs	r1, #128	; 0x80
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f001 fa42 	bl	8007508 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800608a:	2b01      	cmp	r3, #1
 800608c:	d11d      	bne.n	80060ca <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f7ff fe83 	bl	8005d9a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800609c:	e015      	b.n	80060ca <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00d      	beq.n	80060c6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80060b0:	2b03      	cmp	r3, #3
 80060b2:	d108      	bne.n	80060c6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060ba:	695b      	ldr	r3, [r3, #20]
 80060bc:	7afa      	ldrb	r2, [r7, #11]
 80060be:	4611      	mov	r1, r2
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	4798      	blx	r3
 80060c4:	e001      	b.n	80060ca <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80060c6:	2302      	movs	r3, #2
 80060c8:	e000      	b.n	80060cc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3718      	adds	r7, #24
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060dc:	2340      	movs	r3, #64	; 0x40
 80060de:	2200      	movs	r2, #0
 80060e0:	2100      	movs	r1, #0
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f001 f9cb 	bl	800747e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2240      	movs	r2, #64	; 0x40
 80060f4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060f8:	2340      	movs	r3, #64	; 0x40
 80060fa:	2200      	movs	r2, #0
 80060fc:	2180      	movs	r1, #128	; 0x80
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f001 f9bd 	bl	800747e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2240      	movs	r2, #64	; 0x40
 800610e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006134:	2b00      	cmp	r3, #0
 8006136:	d009      	beq.n	800614c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	6852      	ldr	r2, [r2, #4]
 8006144:	b2d2      	uxtb	r2, r2
 8006146:	4611      	mov	r1, r2
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	4798      	blx	r3
  }

  return USBD_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006156:	b480      	push	{r7}
 8006158:	b083      	sub	sp, #12
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
 800615e:	460b      	mov	r3, r1
 8006160:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	78fa      	ldrb	r2, [r7, #3]
 8006166:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	bc80      	pop	{r7}
 8006172:	4770      	bx	lr

08006174 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2204      	movs	r2, #4
 800618c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	bc80      	pop	{r7}
 800619a:	4770      	bx	lr

0800619c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061aa:	2b04      	cmp	r3, #4
 80061ac:	d105      	bne.n	80061ba <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bc80      	pop	{r7}
 80061c4:	4770      	bx	lr

080061c6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b082      	sub	sp, #8
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061d4:	2b03      	cmp	r3, #3
 80061d6:	d10b      	bne.n	80061f0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061de:	69db      	ldr	r3, [r3, #28]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d005      	beq.n	80061f0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061ea:	69db      	ldr	r3, [r3, #28]
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
	...

080061fc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006212:	2b20      	cmp	r3, #32
 8006214:	d004      	beq.n	8006220 <USBD_StdDevReq+0x24>
 8006216:	2b40      	cmp	r3, #64	; 0x40
 8006218:	d002      	beq.n	8006220 <USBD_StdDevReq+0x24>
 800621a:	2b00      	cmp	r3, #0
 800621c:	d008      	beq.n	8006230 <USBD_StdDevReq+0x34>
 800621e:	e04c      	b.n	80062ba <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	6839      	ldr	r1, [r7, #0]
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	4798      	blx	r3
      break;
 800622e:	e049      	b.n	80062c4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	785b      	ldrb	r3, [r3, #1]
 8006234:	2b09      	cmp	r3, #9
 8006236:	d83a      	bhi.n	80062ae <USBD_StdDevReq+0xb2>
 8006238:	a201      	add	r2, pc, #4	; (adr r2, 8006240 <USBD_StdDevReq+0x44>)
 800623a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623e:	bf00      	nop
 8006240:	08006291 	.word	0x08006291
 8006244:	080062a5 	.word	0x080062a5
 8006248:	080062af 	.word	0x080062af
 800624c:	0800629b 	.word	0x0800629b
 8006250:	080062af 	.word	0x080062af
 8006254:	08006273 	.word	0x08006273
 8006258:	08006269 	.word	0x08006269
 800625c:	080062af 	.word	0x080062af
 8006260:	08006287 	.word	0x08006287
 8006264:	0800627d 	.word	0x0800627d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f9d4 	bl	8006618 <USBD_GetDescriptor>
          break;
 8006270:	e022      	b.n	80062b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006272:	6839      	ldr	r1, [r7, #0]
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 fb37 	bl	80068e8 <USBD_SetAddress>
          break;
 800627a:	e01d      	b.n	80062b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800627c:	6839      	ldr	r1, [r7, #0]
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 fb74 	bl	800696c <USBD_SetConfig>
          break;
 8006284:	e018      	b.n	80062b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006286:	6839      	ldr	r1, [r7, #0]
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 fbfd 	bl	8006a88 <USBD_GetConfig>
          break;
 800628e:	e013      	b.n	80062b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006290:	6839      	ldr	r1, [r7, #0]
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fc2c 	bl	8006af0 <USBD_GetStatus>
          break;
 8006298:	e00e      	b.n	80062b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800629a:	6839      	ldr	r1, [r7, #0]
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 fc5a 	bl	8006b56 <USBD_SetFeature>
          break;
 80062a2:	e009      	b.n	80062b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80062a4:	6839      	ldr	r1, [r7, #0]
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fc69 	bl	8006b7e <USBD_ClrFeature>
          break;
 80062ac:	e004      	b.n	80062b8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80062ae:	6839      	ldr	r1, [r7, #0]
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 fcc1 	bl	8006c38 <USBD_CtlError>
          break;
 80062b6:	bf00      	nop
      }
      break;
 80062b8:	e004      	b.n	80062c4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80062ba:	6839      	ldr	r1, [r7, #0]
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 fcbb 	bl	8006c38 <USBD_CtlError>
      break;
 80062c2:	bf00      	nop
  }

  return ret;
 80062c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop

080062d0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062da:	2300      	movs	r3, #0
 80062dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062e6:	2b20      	cmp	r3, #32
 80062e8:	d003      	beq.n	80062f2 <USBD_StdItfReq+0x22>
 80062ea:	2b40      	cmp	r3, #64	; 0x40
 80062ec:	d001      	beq.n	80062f2 <USBD_StdItfReq+0x22>
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d12a      	bne.n	8006348 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062f8:	3b01      	subs	r3, #1
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d81d      	bhi.n	800633a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	889b      	ldrh	r3, [r3, #4]
 8006302:	b2db      	uxtb	r3, r3
 8006304:	2b01      	cmp	r3, #1
 8006306:	d813      	bhi.n	8006330 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	6839      	ldr	r1, [r7, #0]
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	4798      	blx	r3
 8006316:	4603      	mov	r3, r0
 8006318:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	88db      	ldrh	r3, [r3, #6]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d110      	bne.n	8006344 <USBD_StdItfReq+0x74>
 8006322:	7bfb      	ldrb	r3, [r7, #15]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10d      	bne.n	8006344 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fd4d 	bl	8006dc8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800632e:	e009      	b.n	8006344 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006330:	6839      	ldr	r1, [r7, #0]
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fc80 	bl	8006c38 <USBD_CtlError>
          break;
 8006338:	e004      	b.n	8006344 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800633a:	6839      	ldr	r1, [r7, #0]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fc7b 	bl	8006c38 <USBD_CtlError>
          break;
 8006342:	e000      	b.n	8006346 <USBD_StdItfReq+0x76>
          break;
 8006344:	bf00      	nop
      }
      break;
 8006346:	e004      	b.n	8006352 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006348:	6839      	ldr	r1, [r7, #0]
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fc74 	bl	8006c38 <USBD_CtlError>
      break;
 8006350:	bf00      	nop
  }

  return USBD_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006366:	2300      	movs	r3, #0
 8006368:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	889b      	ldrh	r3, [r3, #4]
 800636e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006378:	2b20      	cmp	r3, #32
 800637a:	d004      	beq.n	8006386 <USBD_StdEPReq+0x2a>
 800637c:	2b40      	cmp	r3, #64	; 0x40
 800637e:	d002      	beq.n	8006386 <USBD_StdEPReq+0x2a>
 8006380:	2b00      	cmp	r3, #0
 8006382:	d008      	beq.n	8006396 <USBD_StdEPReq+0x3a>
 8006384:	e13d      	b.n	8006602 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	6839      	ldr	r1, [r7, #0]
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	4798      	blx	r3
      break;
 8006394:	e13a      	b.n	800660c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800639e:	2b20      	cmp	r3, #32
 80063a0:	d10a      	bne.n	80063b8 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	6839      	ldr	r1, [r7, #0]
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	4798      	blx	r3
 80063b0:	4603      	mov	r3, r0
 80063b2:	73fb      	strb	r3, [r7, #15]

        return ret;
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
 80063b6:	e12a      	b.n	800660e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	785b      	ldrb	r3, [r3, #1]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d03e      	beq.n	800643e <USBD_StdEPReq+0xe2>
 80063c0:	2b03      	cmp	r3, #3
 80063c2:	d002      	beq.n	80063ca <USBD_StdEPReq+0x6e>
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d070      	beq.n	80064aa <USBD_StdEPReq+0x14e>
 80063c8:	e115      	b.n	80065f6 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d002      	beq.n	80063da <USBD_StdEPReq+0x7e>
 80063d4:	2b03      	cmp	r3, #3
 80063d6:	d015      	beq.n	8006404 <USBD_StdEPReq+0xa8>
 80063d8:	e02b      	b.n	8006432 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063da:	7bbb      	ldrb	r3, [r7, #14]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00c      	beq.n	80063fa <USBD_StdEPReq+0x9e>
 80063e0:	7bbb      	ldrb	r3, [r7, #14]
 80063e2:	2b80      	cmp	r3, #128	; 0x80
 80063e4:	d009      	beq.n	80063fa <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80063e6:	7bbb      	ldrb	r3, [r7, #14]
 80063e8:	4619      	mov	r1, r3
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f001 f88c 	bl	8007508 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80063f0:	2180      	movs	r1, #128	; 0x80
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f001 f888 	bl	8007508 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80063f8:	e020      	b.n	800643c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80063fa:	6839      	ldr	r1, [r7, #0]
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 fc1b 	bl	8006c38 <USBD_CtlError>
              break;
 8006402:	e01b      	b.n	800643c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	885b      	ldrh	r3, [r3, #2]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10e      	bne.n	800642a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800640c:	7bbb      	ldrb	r3, [r7, #14]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00b      	beq.n	800642a <USBD_StdEPReq+0xce>
 8006412:	7bbb      	ldrb	r3, [r7, #14]
 8006414:	2b80      	cmp	r3, #128	; 0x80
 8006416:	d008      	beq.n	800642a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	88db      	ldrh	r3, [r3, #6]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d104      	bne.n	800642a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006420:	7bbb      	ldrb	r3, [r7, #14]
 8006422:	4619      	mov	r1, r3
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f001 f86f 	bl	8007508 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 fccc 	bl	8006dc8 <USBD_CtlSendStatus>

              break;
 8006430:	e004      	b.n	800643c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006432:	6839      	ldr	r1, [r7, #0]
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 fbff 	bl	8006c38 <USBD_CtlError>
              break;
 800643a:	bf00      	nop
          }
          break;
 800643c:	e0e0      	b.n	8006600 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006444:	2b02      	cmp	r3, #2
 8006446:	d002      	beq.n	800644e <USBD_StdEPReq+0xf2>
 8006448:	2b03      	cmp	r3, #3
 800644a:	d015      	beq.n	8006478 <USBD_StdEPReq+0x11c>
 800644c:	e026      	b.n	800649c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800644e:	7bbb      	ldrb	r3, [r7, #14]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00c      	beq.n	800646e <USBD_StdEPReq+0x112>
 8006454:	7bbb      	ldrb	r3, [r7, #14]
 8006456:	2b80      	cmp	r3, #128	; 0x80
 8006458:	d009      	beq.n	800646e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800645a:	7bbb      	ldrb	r3, [r7, #14]
 800645c:	4619      	mov	r1, r3
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f001 f852 	bl	8007508 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006464:	2180      	movs	r1, #128	; 0x80
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f001 f84e 	bl	8007508 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800646c:	e01c      	b.n	80064a8 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800646e:	6839      	ldr	r1, [r7, #0]
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fbe1 	bl	8006c38 <USBD_CtlError>
              break;
 8006476:	e017      	b.n	80064a8 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	885b      	ldrh	r3, [r3, #2]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d112      	bne.n	80064a6 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006480:	7bbb      	ldrb	r3, [r7, #14]
 8006482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006486:	2b00      	cmp	r3, #0
 8006488:	d004      	beq.n	8006494 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800648a:	7bbb      	ldrb	r3, [r7, #14]
 800648c:	4619      	mov	r1, r3
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f001 f859 	bl	8007546 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 fc97 	bl	8006dc8 <USBD_CtlSendStatus>
              }
              break;
 800649a:	e004      	b.n	80064a6 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800649c:	6839      	ldr	r1, [r7, #0]
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fbca 	bl	8006c38 <USBD_CtlError>
              break;
 80064a4:	e000      	b.n	80064a8 <USBD_StdEPReq+0x14c>
              break;
 80064a6:	bf00      	nop
          }
          break;
 80064a8:	e0aa      	b.n	8006600 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d002      	beq.n	80064ba <USBD_StdEPReq+0x15e>
 80064b4:	2b03      	cmp	r3, #3
 80064b6:	d032      	beq.n	800651e <USBD_StdEPReq+0x1c2>
 80064b8:	e097      	b.n	80065ea <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064ba:	7bbb      	ldrb	r3, [r7, #14]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d007      	beq.n	80064d0 <USBD_StdEPReq+0x174>
 80064c0:	7bbb      	ldrb	r3, [r7, #14]
 80064c2:	2b80      	cmp	r3, #128	; 0x80
 80064c4:	d004      	beq.n	80064d0 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80064c6:	6839      	ldr	r1, [r7, #0]
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fbb5 	bl	8006c38 <USBD_CtlError>
                break;
 80064ce:	e091      	b.n	80065f4 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	da0b      	bge.n	80064f0 <USBD_StdEPReq+0x194>
 80064d8:	7bbb      	ldrb	r3, [r7, #14]
 80064da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064de:	4613      	mov	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	4413      	add	r3, r2
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	3310      	adds	r3, #16
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	4413      	add	r3, r2
 80064ec:	3304      	adds	r3, #4
 80064ee:	e00b      	b.n	8006508 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80064f0:	7bbb      	ldrb	r3, [r7, #14]
 80064f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064f6:	4613      	mov	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4413      	add	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	4413      	add	r3, r2
 8006506:	3304      	adds	r3, #4
 8006508:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	2200      	movs	r2, #0
 800650e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	2202      	movs	r2, #2
 8006514:	4619      	mov	r1, r3
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fbf8 	bl	8006d0c <USBD_CtlSendData>
              break;
 800651c:	e06a      	b.n	80065f4 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800651e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006522:	2b00      	cmp	r3, #0
 8006524:	da11      	bge.n	800654a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006526:	7bbb      	ldrb	r3, [r7, #14]
 8006528:	f003 020f 	and.w	r2, r3, #15
 800652c:	6879      	ldr	r1, [r7, #4]
 800652e:	4613      	mov	r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4413      	add	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	440b      	add	r3, r1
 8006538:	3318      	adds	r3, #24
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d117      	bne.n	8006570 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006540:	6839      	ldr	r1, [r7, #0]
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fb78 	bl	8006c38 <USBD_CtlError>
                  break;
 8006548:	e054      	b.n	80065f4 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800654a:	7bbb      	ldrb	r3, [r7, #14]
 800654c:	f003 020f 	and.w	r2, r3, #15
 8006550:	6879      	ldr	r1, [r7, #4]
 8006552:	4613      	mov	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4413      	add	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	440b      	add	r3, r1
 800655c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d104      	bne.n	8006570 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006566:	6839      	ldr	r1, [r7, #0]
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 fb65 	bl	8006c38 <USBD_CtlError>
                  break;
 800656e:	e041      	b.n	80065f4 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006570:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006574:	2b00      	cmp	r3, #0
 8006576:	da0b      	bge.n	8006590 <USBD_StdEPReq+0x234>
 8006578:	7bbb      	ldrb	r3, [r7, #14]
 800657a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800657e:	4613      	mov	r3, r2
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	4413      	add	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	3310      	adds	r3, #16
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	4413      	add	r3, r2
 800658c:	3304      	adds	r3, #4
 800658e:	e00b      	b.n	80065a8 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006590:	7bbb      	ldrb	r3, [r7, #14]
 8006592:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006596:	4613      	mov	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	4413      	add	r3, r2
 80065a6:	3304      	adds	r3, #4
 80065a8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80065aa:	7bbb      	ldrb	r3, [r7, #14]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d002      	beq.n	80065b6 <USBD_StdEPReq+0x25a>
 80065b0:	7bbb      	ldrb	r3, [r7, #14]
 80065b2:	2b80      	cmp	r3, #128	; 0x80
 80065b4:	d103      	bne.n	80065be <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	2200      	movs	r2, #0
 80065ba:	601a      	str	r2, [r3, #0]
 80065bc:	e00e      	b.n	80065dc <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80065be:	7bbb      	ldrb	r3, [r7, #14]
 80065c0:	4619      	mov	r1, r3
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 ffde 	bl	8007584 <USBD_LL_IsStallEP>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	2201      	movs	r2, #1
 80065d2:	601a      	str	r2, [r3, #0]
 80065d4:	e002      	b.n	80065dc <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	2200      	movs	r2, #0
 80065da:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	2202      	movs	r2, #2
 80065e0:	4619      	mov	r1, r3
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 fb92 	bl	8006d0c <USBD_CtlSendData>
              break;
 80065e8:	e004      	b.n	80065f4 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80065ea:	6839      	ldr	r1, [r7, #0]
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 fb23 	bl	8006c38 <USBD_CtlError>
              break;
 80065f2:	bf00      	nop
          }
          break;
 80065f4:	e004      	b.n	8006600 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80065f6:	6839      	ldr	r1, [r7, #0]
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 fb1d 	bl	8006c38 <USBD_CtlError>
          break;
 80065fe:	bf00      	nop
      }
      break;
 8006600:	e004      	b.n	800660c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006602:	6839      	ldr	r1, [r7, #0]
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 fb17 	bl	8006c38 <USBD_CtlError>
      break;
 800660a:	bf00      	nop
  }

  return ret;
 800660c:	7bfb      	ldrb	r3, [r7, #15]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
	...

08006618 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006622:	2300      	movs	r3, #0
 8006624:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006626:	2300      	movs	r3, #0
 8006628:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800662a:	2300      	movs	r3, #0
 800662c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	885b      	ldrh	r3, [r3, #2]
 8006632:	0a1b      	lsrs	r3, r3, #8
 8006634:	b29b      	uxth	r3, r3
 8006636:	3b01      	subs	r3, #1
 8006638:	2b06      	cmp	r3, #6
 800663a:	f200 8128 	bhi.w	800688e <USBD_GetDescriptor+0x276>
 800663e:	a201      	add	r2, pc, #4	; (adr r2, 8006644 <USBD_GetDescriptor+0x2c>)
 8006640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006644:	08006661 	.word	0x08006661
 8006648:	08006679 	.word	0x08006679
 800664c:	080066b9 	.word	0x080066b9
 8006650:	0800688f 	.word	0x0800688f
 8006654:	0800688f 	.word	0x0800688f
 8006658:	0800682f 	.word	0x0800682f
 800665c:	0800685b 	.word	0x0800685b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	7c12      	ldrb	r2, [r2, #16]
 800666c:	f107 0108 	add.w	r1, r7, #8
 8006670:	4610      	mov	r0, r2
 8006672:	4798      	blx	r3
 8006674:	60f8      	str	r0, [r7, #12]
      break;
 8006676:	e112      	b.n	800689e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	7c1b      	ldrb	r3, [r3, #16]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10d      	bne.n	800669c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006688:	f107 0208 	add.w	r2, r7, #8
 800668c:	4610      	mov	r0, r2
 800668e:	4798      	blx	r3
 8006690:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	3301      	adds	r3, #1
 8006696:	2202      	movs	r2, #2
 8006698:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800669a:	e100      	b.n	800689e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a4:	f107 0208 	add.w	r2, r7, #8
 80066a8:	4610      	mov	r0, r2
 80066aa:	4798      	blx	r3
 80066ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	3301      	adds	r3, #1
 80066b2:	2202      	movs	r2, #2
 80066b4:	701a      	strb	r2, [r3, #0]
      break;
 80066b6:	e0f2      	b.n	800689e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	885b      	ldrh	r3, [r3, #2]
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b05      	cmp	r3, #5
 80066c0:	f200 80ac 	bhi.w	800681c <USBD_GetDescriptor+0x204>
 80066c4:	a201      	add	r2, pc, #4	; (adr r2, 80066cc <USBD_GetDescriptor+0xb4>)
 80066c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ca:	bf00      	nop
 80066cc:	080066e5 	.word	0x080066e5
 80066d0:	08006719 	.word	0x08006719
 80066d4:	0800674d 	.word	0x0800674d
 80066d8:	08006781 	.word	0x08006781
 80066dc:	080067b5 	.word	0x080067b5
 80066e0:	080067e9 	.word	0x080067e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00b      	beq.n	8006708 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	7c12      	ldrb	r2, [r2, #16]
 80066fc:	f107 0108 	add.w	r1, r7, #8
 8006700:	4610      	mov	r0, r2
 8006702:	4798      	blx	r3
 8006704:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006706:	e091      	b.n	800682c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006708:	6839      	ldr	r1, [r7, #0]
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fa94 	bl	8006c38 <USBD_CtlError>
            err++;
 8006710:	7afb      	ldrb	r3, [r7, #11]
 8006712:	3301      	adds	r3, #1
 8006714:	72fb      	strb	r3, [r7, #11]
          break;
 8006716:	e089      	b.n	800682c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00b      	beq.n	800673c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	7c12      	ldrb	r2, [r2, #16]
 8006730:	f107 0108 	add.w	r1, r7, #8
 8006734:	4610      	mov	r0, r2
 8006736:	4798      	blx	r3
 8006738:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800673a:	e077      	b.n	800682c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800673c:	6839      	ldr	r1, [r7, #0]
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fa7a 	bl	8006c38 <USBD_CtlError>
            err++;
 8006744:	7afb      	ldrb	r3, [r7, #11]
 8006746:	3301      	adds	r3, #1
 8006748:	72fb      	strb	r3, [r7, #11]
          break;
 800674a:	e06f      	b.n	800682c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00b      	beq.n	8006770 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	7c12      	ldrb	r2, [r2, #16]
 8006764:	f107 0108 	add.w	r1, r7, #8
 8006768:	4610      	mov	r0, r2
 800676a:	4798      	blx	r3
 800676c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800676e:	e05d      	b.n	800682c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006770:	6839      	ldr	r1, [r7, #0]
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fa60 	bl	8006c38 <USBD_CtlError>
            err++;
 8006778:	7afb      	ldrb	r3, [r7, #11]
 800677a:	3301      	adds	r3, #1
 800677c:	72fb      	strb	r3, [r7, #11]
          break;
 800677e:	e055      	b.n	800682c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00b      	beq.n	80067a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	7c12      	ldrb	r2, [r2, #16]
 8006798:	f107 0108 	add.w	r1, r7, #8
 800679c:	4610      	mov	r0, r2
 800679e:	4798      	blx	r3
 80067a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067a2:	e043      	b.n	800682c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067a4:	6839      	ldr	r1, [r7, #0]
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 fa46 	bl	8006c38 <USBD_CtlError>
            err++;
 80067ac:	7afb      	ldrb	r3, [r7, #11]
 80067ae:	3301      	adds	r3, #1
 80067b0:	72fb      	strb	r3, [r7, #11]
          break;
 80067b2:	e03b      	b.n	800682c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067ba:	695b      	ldr	r3, [r3, #20]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00b      	beq.n	80067d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067c6:	695b      	ldr	r3, [r3, #20]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	7c12      	ldrb	r2, [r2, #16]
 80067cc:	f107 0108 	add.w	r1, r7, #8
 80067d0:	4610      	mov	r0, r2
 80067d2:	4798      	blx	r3
 80067d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067d6:	e029      	b.n	800682c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067d8:	6839      	ldr	r1, [r7, #0]
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 fa2c 	bl	8006c38 <USBD_CtlError>
            err++;
 80067e0:	7afb      	ldrb	r3, [r7, #11]
 80067e2:	3301      	adds	r3, #1
 80067e4:	72fb      	strb	r3, [r7, #11]
          break;
 80067e6:	e021      	b.n	800682c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00b      	beq.n	800680c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	7c12      	ldrb	r2, [r2, #16]
 8006800:	f107 0108 	add.w	r1, r7, #8
 8006804:	4610      	mov	r0, r2
 8006806:	4798      	blx	r3
 8006808:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800680a:	e00f      	b.n	800682c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800680c:	6839      	ldr	r1, [r7, #0]
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fa12 	bl	8006c38 <USBD_CtlError>
            err++;
 8006814:	7afb      	ldrb	r3, [r7, #11]
 8006816:	3301      	adds	r3, #1
 8006818:	72fb      	strb	r3, [r7, #11]
          break;
 800681a:	e007      	b.n	800682c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800681c:	6839      	ldr	r1, [r7, #0]
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fa0a 	bl	8006c38 <USBD_CtlError>
          err++;
 8006824:	7afb      	ldrb	r3, [r7, #11]
 8006826:	3301      	adds	r3, #1
 8006828:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800682a:	e038      	b.n	800689e <USBD_GetDescriptor+0x286>
 800682c:	e037      	b.n	800689e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	7c1b      	ldrb	r3, [r3, #16]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d109      	bne.n	800684a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800683c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800683e:	f107 0208 	add.w	r2, r7, #8
 8006842:	4610      	mov	r0, r2
 8006844:	4798      	blx	r3
 8006846:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006848:	e029      	b.n	800689e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800684a:	6839      	ldr	r1, [r7, #0]
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 f9f3 	bl	8006c38 <USBD_CtlError>
        err++;
 8006852:	7afb      	ldrb	r3, [r7, #11]
 8006854:	3301      	adds	r3, #1
 8006856:	72fb      	strb	r3, [r7, #11]
      break;
 8006858:	e021      	b.n	800689e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	7c1b      	ldrb	r3, [r3, #16]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10d      	bne.n	800687e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686a:	f107 0208 	add.w	r2, r7, #8
 800686e:	4610      	mov	r0, r2
 8006870:	4798      	blx	r3
 8006872:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	3301      	adds	r3, #1
 8006878:	2207      	movs	r2, #7
 800687a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800687c:	e00f      	b.n	800689e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800687e:	6839      	ldr	r1, [r7, #0]
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 f9d9 	bl	8006c38 <USBD_CtlError>
        err++;
 8006886:	7afb      	ldrb	r3, [r7, #11]
 8006888:	3301      	adds	r3, #1
 800688a:	72fb      	strb	r3, [r7, #11]
      break;
 800688c:	e007      	b.n	800689e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800688e:	6839      	ldr	r1, [r7, #0]
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 f9d1 	bl	8006c38 <USBD_CtlError>
      err++;
 8006896:	7afb      	ldrb	r3, [r7, #11]
 8006898:	3301      	adds	r3, #1
 800689a:	72fb      	strb	r3, [r7, #11]
      break;
 800689c:	bf00      	nop
  }

  if (err != 0U)
 800689e:	7afb      	ldrb	r3, [r7, #11]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d11c      	bne.n	80068de <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80068a4:	893b      	ldrh	r3, [r7, #8]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d011      	beq.n	80068ce <USBD_GetDescriptor+0x2b6>
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	88db      	ldrh	r3, [r3, #6]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00d      	beq.n	80068ce <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	88da      	ldrh	r2, [r3, #6]
 80068b6:	893b      	ldrh	r3, [r7, #8]
 80068b8:	4293      	cmp	r3, r2
 80068ba:	bf28      	it	cs
 80068bc:	4613      	movcs	r3, r2
 80068be:	b29b      	uxth	r3, r3
 80068c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80068c2:	893b      	ldrh	r3, [r7, #8]
 80068c4:	461a      	mov	r2, r3
 80068c6:	68f9      	ldr	r1, [r7, #12]
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 fa1f 	bl	8006d0c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	88db      	ldrh	r3, [r3, #6]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d104      	bne.n	80068e0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fa76 	bl	8006dc8 <USBD_CtlSendStatus>
 80068dc:	e000      	b.n	80068e0 <USBD_GetDescriptor+0x2c8>
    return;
 80068de:	bf00      	nop
    }
  }
}
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop

080068e8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	889b      	ldrh	r3, [r3, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d130      	bne.n	800695c <USBD_SetAddress+0x74>
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	88db      	ldrh	r3, [r3, #6]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d12c      	bne.n	800695c <USBD_SetAddress+0x74>
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	885b      	ldrh	r3, [r3, #2]
 8006906:	2b7f      	cmp	r3, #127	; 0x7f
 8006908:	d828      	bhi.n	800695c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	885b      	ldrh	r3, [r3, #2]
 800690e:	b2db      	uxtb	r3, r3
 8006910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006914:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800691c:	2b03      	cmp	r3, #3
 800691e:	d104      	bne.n	800692a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006920:	6839      	ldr	r1, [r7, #0]
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f988 	bl	8006c38 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006928:	e01c      	b.n	8006964 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	7bfa      	ldrb	r2, [r7, #15]
 800692e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006932:	7bfb      	ldrb	r3, [r7, #15]
 8006934:	4619      	mov	r1, r3
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fe50 	bl	80075dc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fa43 	bl	8006dc8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006942:	7bfb      	ldrb	r3, [r7, #15]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d004      	beq.n	8006952 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2202      	movs	r2, #2
 800694c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006950:	e008      	b.n	8006964 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800695a:	e003      	b.n	8006964 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800695c:	6839      	ldr	r1, [r7, #0]
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f96a 	bl	8006c38 <USBD_CtlError>
  }
}
 8006964:	bf00      	nop
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	885b      	ldrh	r3, [r3, #2]
 800697a:	b2da      	uxtb	r2, r3
 800697c:	4b41      	ldr	r3, [pc, #260]	; (8006a84 <USBD_SetConfig+0x118>)
 800697e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006980:	4b40      	ldr	r3, [pc, #256]	; (8006a84 <USBD_SetConfig+0x118>)
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d904      	bls.n	8006992 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006988:	6839      	ldr	r1, [r7, #0]
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f954 	bl	8006c38 <USBD_CtlError>
 8006990:	e075      	b.n	8006a7e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006998:	2b02      	cmp	r3, #2
 800699a:	d002      	beq.n	80069a2 <USBD_SetConfig+0x36>
 800699c:	2b03      	cmp	r3, #3
 800699e:	d023      	beq.n	80069e8 <USBD_SetConfig+0x7c>
 80069a0:	e062      	b.n	8006a68 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80069a2:	4b38      	ldr	r3, [pc, #224]	; (8006a84 <USBD_SetConfig+0x118>)
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d01a      	beq.n	80069e0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80069aa:	4b36      	ldr	r3, [pc, #216]	; (8006a84 <USBD_SetConfig+0x118>)
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	461a      	mov	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2203      	movs	r2, #3
 80069b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80069bc:	4b31      	ldr	r3, [pc, #196]	; (8006a84 <USBD_SetConfig+0x118>)
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	4619      	mov	r1, r3
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7ff f9f3 	bl	8005dae <USBD_SetClassConfig>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d104      	bne.n	80069d8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80069ce:	6839      	ldr	r1, [r7, #0]
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 f931 	bl	8006c38 <USBD_CtlError>
            return;
 80069d6:	e052      	b.n	8006a7e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 f9f5 	bl	8006dc8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80069de:	e04e      	b.n	8006a7e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 f9f1 	bl	8006dc8 <USBD_CtlSendStatus>
        break;
 80069e6:	e04a      	b.n	8006a7e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80069e8:	4b26      	ldr	r3, [pc, #152]	; (8006a84 <USBD_SetConfig+0x118>)
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d112      	bne.n	8006a16 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2202      	movs	r2, #2
 80069f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80069f8:	4b22      	ldr	r3, [pc, #136]	; (8006a84 <USBD_SetConfig+0x118>)
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	461a      	mov	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006a02:	4b20      	ldr	r3, [pc, #128]	; (8006a84 <USBD_SetConfig+0x118>)
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	4619      	mov	r1, r3
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7ff f9ef 	bl	8005dec <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f9da 	bl	8006dc8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006a14:	e033      	b.n	8006a7e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006a16:	4b1b      	ldr	r3, [pc, #108]	; (8006a84 <USBD_SetConfig+0x118>)
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d01d      	beq.n	8006a60 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7ff f9dd 	bl	8005dec <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006a32:	4b14      	ldr	r3, [pc, #80]	; (8006a84 <USBD_SetConfig+0x118>)
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	461a      	mov	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006a3c:	4b11      	ldr	r3, [pc, #68]	; (8006a84 <USBD_SetConfig+0x118>)
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	4619      	mov	r1, r3
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f7ff f9b3 	bl	8005dae <USBD_SetClassConfig>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d104      	bne.n	8006a58 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006a4e:	6839      	ldr	r1, [r7, #0]
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 f8f1 	bl	8006c38 <USBD_CtlError>
            return;
 8006a56:	e012      	b.n	8006a7e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f9b5 	bl	8006dc8 <USBD_CtlSendStatus>
        break;
 8006a5e:	e00e      	b.n	8006a7e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f9b1 	bl	8006dc8 <USBD_CtlSendStatus>
        break;
 8006a66:	e00a      	b.n	8006a7e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006a68:	6839      	ldr	r1, [r7, #0]
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f8e4 	bl	8006c38 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006a70:	4b04      	ldr	r3, [pc, #16]	; (8006a84 <USBD_SetConfig+0x118>)
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	4619      	mov	r1, r3
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7ff f9b8 	bl	8005dec <USBD_ClrClassConfig>
        break;
 8006a7c:	bf00      	nop
    }
  }
}
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	2000020c 	.word	0x2000020c

08006a88 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	88db      	ldrh	r3, [r3, #6]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d004      	beq.n	8006aa4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a9a:	6839      	ldr	r1, [r7, #0]
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f8cb 	bl	8006c38 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006aa2:	e021      	b.n	8006ae8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	db17      	blt.n	8006ade <USBD_GetConfig+0x56>
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	dd02      	ble.n	8006ab8 <USBD_GetConfig+0x30>
 8006ab2:	2b03      	cmp	r3, #3
 8006ab4:	d00b      	beq.n	8006ace <USBD_GetConfig+0x46>
 8006ab6:	e012      	b.n	8006ade <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	3308      	adds	r3, #8
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f920 	bl	8006d0c <USBD_CtlSendData>
        break;
 8006acc:	e00c      	b.n	8006ae8 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	3304      	adds	r3, #4
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f918 	bl	8006d0c <USBD_CtlSendData>
        break;
 8006adc:	e004      	b.n	8006ae8 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006ade:	6839      	ldr	r1, [r7, #0]
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f8a9 	bl	8006c38 <USBD_CtlError>
        break;
 8006ae6:	bf00      	nop
}
 8006ae8:	bf00      	nop
 8006aea:	3708      	adds	r7, #8
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b00:	3b01      	subs	r3, #1
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d81e      	bhi.n	8006b44 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	88db      	ldrh	r3, [r3, #6]
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d004      	beq.n	8006b18 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006b0e:	6839      	ldr	r1, [r7, #0]
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f891 	bl	8006c38 <USBD_CtlError>
        break;
 8006b16:	e01a      	b.n	8006b4e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d005      	beq.n	8006b34 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	f043 0202 	orr.w	r2, r3, #2
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	330c      	adds	r3, #12
 8006b38:	2202      	movs	r2, #2
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 f8e5 	bl	8006d0c <USBD_CtlSendData>
      break;
 8006b42:	e004      	b.n	8006b4e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006b44:	6839      	ldr	r1, [r7, #0]
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f876 	bl	8006c38 <USBD_CtlError>
      break;
 8006b4c:	bf00      	nop
  }
}
 8006b4e:	bf00      	nop
 8006b50:	3708      	adds	r7, #8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b082      	sub	sp, #8
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
 8006b5e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	885b      	ldrh	r3, [r3, #2]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d106      	bne.n	8006b76 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 f929 	bl	8006dc8 <USBD_CtlSendStatus>
  }
}
 8006b76:	bf00      	nop
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b082      	sub	sp, #8
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d80b      	bhi.n	8006bac <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	885b      	ldrh	r3, [r3, #2]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d10c      	bne.n	8006bb6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 f90f 	bl	8006dc8 <USBD_CtlSendStatus>
      }
      break;
 8006baa:	e004      	b.n	8006bb6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006bac:	6839      	ldr	r1, [r7, #0]
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f842 	bl	8006c38 <USBD_CtlError>
      break;
 8006bb4:	e000      	b.n	8006bb8 <USBD_ClrFeature+0x3a>
      break;
 8006bb6:	bf00      	nop
  }
}
 8006bb8:	bf00      	nop
 8006bba:	3708      	adds	r7, #8
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	781a      	ldrb	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	785a      	ldrb	r2, [r3, #1]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	3302      	adds	r3, #2
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	3303      	adds	r3, #3
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	021b      	lsls	r3, r3, #8
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	4413      	add	r3, r2
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	3304      	adds	r3, #4
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	3305      	adds	r3, #5
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	021b      	lsls	r3, r3, #8
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	4413      	add	r3, r2
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	3306      	adds	r3, #6
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	3307      	adds	r3, #7
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	021b      	lsls	r3, r3, #8
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	4413      	add	r3, r2
 8006c28:	b29a      	uxth	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	80da      	strh	r2, [r3, #6]

}
 8006c2e:	bf00      	nop
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bc80      	pop	{r7}
 8006c36:	4770      	bx	lr

08006c38 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006c42:	2180      	movs	r1, #128	; 0x80
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fc5f 	bl	8007508 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 fc5b 	bl	8007508 <USBD_LL_StallEP>
}
 8006c52:	bf00      	nop
 8006c54:	3708      	adds	r7, #8
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b086      	sub	sp, #24
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	60f8      	str	r0, [r7, #12]
 8006c62:	60b9      	str	r1, [r7, #8]
 8006c64:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c66:	2300      	movs	r3, #0
 8006c68:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d032      	beq.n	8006cd6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f000 f834 	bl	8006cde <USBD_GetLen>
 8006c76:	4603      	mov	r3, r0
 8006c78:	3301      	adds	r3, #1
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	005b      	lsls	r3, r3, #1
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006c84:	7dfb      	ldrb	r3, [r7, #23]
 8006c86:	1c5a      	adds	r2, r3, #1
 8006c88:	75fa      	strb	r2, [r7, #23]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	4413      	add	r3, r2
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	7812      	ldrb	r2, [r2, #0]
 8006c94:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006c96:	7dfb      	ldrb	r3, [r7, #23]
 8006c98:	1c5a      	adds	r2, r3, #1
 8006c9a:	75fa      	strb	r2, [r7, #23]
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	2203      	movs	r2, #3
 8006ca4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006ca6:	e012      	b.n	8006cce <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	1c5a      	adds	r2, r3, #1
 8006cac:	60fa      	str	r2, [r7, #12]
 8006cae:	7dfa      	ldrb	r2, [r7, #23]
 8006cb0:	1c51      	adds	r1, r2, #1
 8006cb2:	75f9      	strb	r1, [r7, #23]
 8006cb4:	4611      	mov	r1, r2
 8006cb6:	68ba      	ldr	r2, [r7, #8]
 8006cb8:	440a      	add	r2, r1
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006cbe:	7dfb      	ldrb	r3, [r7, #23]
 8006cc0:	1c5a      	adds	r2, r3, #1
 8006cc2:	75fa      	strb	r2, [r7, #23]
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	4413      	add	r3, r2
 8006cca:	2200      	movs	r2, #0
 8006ccc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1e8      	bne.n	8006ca8 <USBD_GetString+0x4e>
    }
  }
}
 8006cd6:	bf00      	nop
 8006cd8:	3718      	adds	r7, #24
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b085      	sub	sp, #20
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006cea:	e005      	b.n	8006cf8 <USBD_GetLen+0x1a>
  {
    len++;
 8006cec:	7bfb      	ldrb	r3, [r7, #15]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1f5      	bne.n	8006cec <USBD_GetLen+0xe>
  }

  return len;
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3714      	adds	r7, #20
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bc80      	pop	{r7}
 8006d0a:	4770      	bx	lr

08006d0c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	4613      	mov	r3, r2
 8006d18:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2202      	movs	r2, #2
 8006d1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006d22:	88fa      	ldrh	r2, [r7, #6]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006d28:	88fa      	ldrh	r2, [r7, #6]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d2e:	88fb      	ldrh	r3, [r7, #6]
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	2100      	movs	r1, #0
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f000 fc70 	bl	800761a <USBD_LL_Transmit>

  return USBD_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	4613      	mov	r3, r2
 8006d50:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d52:	88fb      	ldrh	r3, [r7, #6]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	2100      	movs	r1, #0
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f000 fc5e 	bl	800761a <USBD_LL_Transmit>

  return USBD_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	4613      	mov	r3, r2
 8006d74:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2203      	movs	r2, #3
 8006d7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006d7e:	88fa      	ldrh	r2, [r7, #6]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006d86:	88fa      	ldrh	r2, [r7, #6]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d8e:	88fb      	ldrh	r3, [r7, #6]
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	2100      	movs	r1, #0
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f000 fc63 	bl	8007660 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	4613      	mov	r3, r2
 8006db0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006db2:	88fb      	ldrh	r3, [r7, #6]
 8006db4:	68ba      	ldr	r2, [r7, #8]
 8006db6:	2100      	movs	r1, #0
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f000 fc51 	bl	8007660 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2204      	movs	r2, #4
 8006dd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006dd8:	2300      	movs	r3, #0
 8006dda:	2200      	movs	r2, #0
 8006ddc:	2100      	movs	r1, #0
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 fc1b 	bl	800761a <USBD_LL_Transmit>

  return USBD_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3708      	adds	r7, #8
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b082      	sub	sp, #8
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2205      	movs	r2, #5
 8006dfa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006dfe:	2300      	movs	r3, #0
 8006e00:	2200      	movs	r2, #0
 8006e02:	2100      	movs	r1, #0
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 fc2b 	bl	8007660 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	4912      	ldr	r1, [pc, #72]	; (8006e64 <MX_USB_DEVICE_Init+0x50>)
 8006e1c:	4812      	ldr	r0, [pc, #72]	; (8006e68 <MX_USB_DEVICE_Init+0x54>)
 8006e1e:	f7fe ff6c 	bl	8005cfa <USBD_Init>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d001      	beq.n	8006e2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006e28:	f7f9 ffec 	bl	8000e04 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006e2c:	490f      	ldr	r1, [pc, #60]	; (8006e6c <MX_USB_DEVICE_Init+0x58>)
 8006e2e:	480e      	ldr	r0, [pc, #56]	; (8006e68 <MX_USB_DEVICE_Init+0x54>)
 8006e30:	f7fe ff8e 	bl	8005d50 <USBD_RegisterClass>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d001      	beq.n	8006e3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006e3a:	f7f9 ffe3 	bl	8000e04 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006e3e:	490c      	ldr	r1, [pc, #48]	; (8006e70 <MX_USB_DEVICE_Init+0x5c>)
 8006e40:	4809      	ldr	r0, [pc, #36]	; (8006e68 <MX_USB_DEVICE_Init+0x54>)
 8006e42:	f7fe febf 	bl	8005bc4 <USBD_CDC_RegisterInterface>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d001      	beq.n	8006e50 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006e4c:	f7f9 ffda 	bl	8000e04 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006e50:	4805      	ldr	r0, [pc, #20]	; (8006e68 <MX_USB_DEVICE_Init+0x54>)
 8006e52:	f7fe ff96 	bl	8005d82 <USBD_Start>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d001      	beq.n	8006e60 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006e5c:	f7f9 ffd2 	bl	8000e04 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e60:	bf00      	nop
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	20000130 	.word	0x20000130
 8006e68:	20000834 	.word	0x20000834
 8006e6c:	2000001c 	.word	0x2000001c
 8006e70:	20000120 	.word	0x20000120

08006e74 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006e78:	2200      	movs	r2, #0
 8006e7a:	4905      	ldr	r1, [pc, #20]	; (8006e90 <CDC_Init_FS+0x1c>)
 8006e7c:	4805      	ldr	r0, [pc, #20]	; (8006e94 <CDC_Init_FS+0x20>)
 8006e7e:	f7fe feb7 	bl	8005bf0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006e82:	4905      	ldr	r1, [pc, #20]	; (8006e98 <CDC_Init_FS+0x24>)
 8006e84:	4803      	ldr	r0, [pc, #12]	; (8006e94 <CDC_Init_FS+0x20>)
 8006e86:	f7fe fecc 	bl	8005c22 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006e8a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	20000b00 	.word	0x20000b00
 8006e94:	20000834 	.word	0x20000834
 8006e98:	20000af8 	.word	0x20000af8

08006e9c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006ea0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bc80      	pop	{r7}
 8006ea8:	4770      	bx	lr
	...

08006eac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	6039      	str	r1, [r7, #0]
 8006eb6:	71fb      	strb	r3, [r7, #7]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006ebc:	79fb      	ldrb	r3, [r7, #7]
 8006ebe:	2b23      	cmp	r3, #35	; 0x23
 8006ec0:	d84a      	bhi.n	8006f58 <CDC_Control_FS+0xac>
 8006ec2:	a201      	add	r2, pc, #4	; (adr r2, 8006ec8 <CDC_Control_FS+0x1c>)
 8006ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec8:	08006f59 	.word	0x08006f59
 8006ecc:	08006f59 	.word	0x08006f59
 8006ed0:	08006f59 	.word	0x08006f59
 8006ed4:	08006f59 	.word	0x08006f59
 8006ed8:	08006f59 	.word	0x08006f59
 8006edc:	08006f59 	.word	0x08006f59
 8006ee0:	08006f59 	.word	0x08006f59
 8006ee4:	08006f59 	.word	0x08006f59
 8006ee8:	08006f59 	.word	0x08006f59
 8006eec:	08006f59 	.word	0x08006f59
 8006ef0:	08006f59 	.word	0x08006f59
 8006ef4:	08006f59 	.word	0x08006f59
 8006ef8:	08006f59 	.word	0x08006f59
 8006efc:	08006f59 	.word	0x08006f59
 8006f00:	08006f59 	.word	0x08006f59
 8006f04:	08006f59 	.word	0x08006f59
 8006f08:	08006f59 	.word	0x08006f59
 8006f0c:	08006f59 	.word	0x08006f59
 8006f10:	08006f59 	.word	0x08006f59
 8006f14:	08006f59 	.word	0x08006f59
 8006f18:	08006f59 	.word	0x08006f59
 8006f1c:	08006f59 	.word	0x08006f59
 8006f20:	08006f59 	.word	0x08006f59
 8006f24:	08006f59 	.word	0x08006f59
 8006f28:	08006f59 	.word	0x08006f59
 8006f2c:	08006f59 	.word	0x08006f59
 8006f30:	08006f59 	.word	0x08006f59
 8006f34:	08006f59 	.word	0x08006f59
 8006f38:	08006f59 	.word	0x08006f59
 8006f3c:	08006f59 	.word	0x08006f59
 8006f40:	08006f59 	.word	0x08006f59
 8006f44:	08006f59 	.word	0x08006f59
 8006f48:	08006f59 	.word	0x08006f59
 8006f4c:	08006f59 	.word	0x08006f59
 8006f50:	08006f59 	.word	0x08006f59
 8006f54:	08006f59 	.word	0x08006f59
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006f58:	bf00      	nop
  }

  return (USBD_OK);
 8006f5a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bc80      	pop	{r7}
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop

08006f68 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006f72:	6879      	ldr	r1, [r7, #4]
 8006f74:	4807      	ldr	r0, [pc, #28]	; (8006f94 <CDC_Receive_FS+0x2c>)
 8006f76:	f7fe fe54 	bl	8005c22 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006f7a:	4806      	ldr	r0, [pc, #24]	; (8006f94 <CDC_Receive_FS+0x2c>)
 8006f7c:	f7fe fe93 	bl	8005ca6 <USBD_CDC_ReceivePacket>
  CDC_Recive_Callback(Buf, Len);
 8006f80:	6839      	ldr	r1, [r7, #0]
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f7f9 ff1c 	bl	8000dc0 <CDC_Recive_Callback>
  return (USBD_OK);
 8006f88:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3708      	adds	r7, #8
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	20000834 	.word	0x20000834

08006f98 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006fa8:	4b0d      	ldr	r3, [pc, #52]	; (8006fe0 <CDC_Transmit_FS+0x48>)
 8006faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d001      	beq.n	8006fbe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e00b      	b.n	8006fd6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006fbe:	887b      	ldrh	r3, [r7, #2]
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	6879      	ldr	r1, [r7, #4]
 8006fc4:	4806      	ldr	r0, [pc, #24]	; (8006fe0 <CDC_Transmit_FS+0x48>)
 8006fc6:	f7fe fe13 	bl	8005bf0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006fca:	4805      	ldr	r0, [pc, #20]	; (8006fe0 <CDC_Transmit_FS+0x48>)
 8006fcc:	f7fe fe3c 	bl	8005c48 <USBD_CDC_TransmitPacket>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	20000834 	.word	0x20000834

08006fe4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	4603      	mov	r3, r0
 8006fec:	6039      	str	r1, [r7, #0]
 8006fee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	2212      	movs	r2, #18
 8006ff4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006ff6:	4b03      	ldr	r3, [pc, #12]	; (8007004 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bc80      	pop	{r7}
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	2000014c 	.word	0x2000014c

08007008 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	4603      	mov	r3, r0
 8007010:	6039      	str	r1, [r7, #0]
 8007012:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	2204      	movs	r2, #4
 8007018:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800701a:	4b03      	ldr	r3, [pc, #12]	; (8007028 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800701c:	4618      	mov	r0, r3
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	bc80      	pop	{r7}
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	20000160 	.word	0x20000160

0800702c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	4603      	mov	r3, r0
 8007034:	6039      	str	r1, [r7, #0]
 8007036:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007038:	79fb      	ldrb	r3, [r7, #7]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d105      	bne.n	800704a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	4907      	ldr	r1, [pc, #28]	; (8007060 <USBD_FS_ProductStrDescriptor+0x34>)
 8007042:	4808      	ldr	r0, [pc, #32]	; (8007064 <USBD_FS_ProductStrDescriptor+0x38>)
 8007044:	f7ff fe09 	bl	8006c5a <USBD_GetString>
 8007048:	e004      	b.n	8007054 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	4904      	ldr	r1, [pc, #16]	; (8007060 <USBD_FS_ProductStrDescriptor+0x34>)
 800704e:	4805      	ldr	r0, [pc, #20]	; (8007064 <USBD_FS_ProductStrDescriptor+0x38>)
 8007050:	f7ff fe03 	bl	8006c5a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007054:	4b02      	ldr	r3, [pc, #8]	; (8007060 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007056:	4618      	mov	r0, r3
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	20000b04 	.word	0x20000b04
 8007064:	08007d14 	.word	0x08007d14

08007068 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	4603      	mov	r3, r0
 8007070:	6039      	str	r1, [r7, #0]
 8007072:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	4904      	ldr	r1, [pc, #16]	; (8007088 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007078:	4804      	ldr	r0, [pc, #16]	; (800708c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800707a:	f7ff fdee 	bl	8006c5a <USBD_GetString>
  return USBD_StrDesc;
 800707e:	4b02      	ldr	r3, [pc, #8]	; (8007088 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007080:	4618      	mov	r0, r3
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	20000b04 	.word	0x20000b04
 800708c:	08007d2c 	.word	0x08007d2c

08007090 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	4603      	mov	r3, r0
 8007098:	6039      	str	r1, [r7, #0]
 800709a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	221a      	movs	r2, #26
 80070a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80070a2:	f000 f843 	bl	800712c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80070a6:	4b02      	ldr	r3, [pc, #8]	; (80070b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3708      	adds	r7, #8
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	20000164 	.word	0x20000164

080070b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	4603      	mov	r3, r0
 80070bc:	6039      	str	r1, [r7, #0]
 80070be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80070c0:	79fb      	ldrb	r3, [r7, #7]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d105      	bne.n	80070d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	4907      	ldr	r1, [pc, #28]	; (80070e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80070ca:	4808      	ldr	r0, [pc, #32]	; (80070ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80070cc:	f7ff fdc5 	bl	8006c5a <USBD_GetString>
 80070d0:	e004      	b.n	80070dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070d2:	683a      	ldr	r2, [r7, #0]
 80070d4:	4904      	ldr	r1, [pc, #16]	; (80070e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80070d6:	4805      	ldr	r0, [pc, #20]	; (80070ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80070d8:	f7ff fdbf 	bl	8006c5a <USBD_GetString>
  }
  return USBD_StrDesc;
 80070dc:	4b02      	ldr	r3, [pc, #8]	; (80070e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3708      	adds	r7, #8
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	20000b04 	.word	0x20000b04
 80070ec:	08007d40 	.word	0x08007d40

080070f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	4603      	mov	r3, r0
 80070f8:	6039      	str	r1, [r7, #0]
 80070fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80070fc:	79fb      	ldrb	r3, [r7, #7]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d105      	bne.n	800710e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	4907      	ldr	r1, [pc, #28]	; (8007124 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007106:	4808      	ldr	r0, [pc, #32]	; (8007128 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007108:	f7ff fda7 	bl	8006c5a <USBD_GetString>
 800710c:	e004      	b.n	8007118 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800710e:	683a      	ldr	r2, [r7, #0]
 8007110:	4904      	ldr	r1, [pc, #16]	; (8007124 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007112:	4805      	ldr	r0, [pc, #20]	; (8007128 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007114:	f7ff fda1 	bl	8006c5a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007118:	4b02      	ldr	r3, [pc, #8]	; (8007124 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800711a:	4618      	mov	r0, r3
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	20000b04 	.word	0x20000b04
 8007128:	08007d4c 	.word	0x08007d4c

0800712c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007132:	4b0f      	ldr	r3, [pc, #60]	; (8007170 <Get_SerialNum+0x44>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007138:	4b0e      	ldr	r3, [pc, #56]	; (8007174 <Get_SerialNum+0x48>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800713e:	4b0e      	ldr	r3, [pc, #56]	; (8007178 <Get_SerialNum+0x4c>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4413      	add	r3, r2
 800714a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d009      	beq.n	8007166 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007152:	2208      	movs	r2, #8
 8007154:	4909      	ldr	r1, [pc, #36]	; (800717c <Get_SerialNum+0x50>)
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f000 f814 	bl	8007184 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800715c:	2204      	movs	r2, #4
 800715e:	4908      	ldr	r1, [pc, #32]	; (8007180 <Get_SerialNum+0x54>)
 8007160:	68b8      	ldr	r0, [r7, #8]
 8007162:	f000 f80f 	bl	8007184 <IntToUnicode>
  }
}
 8007166:	bf00      	nop
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	1ffff7e8 	.word	0x1ffff7e8
 8007174:	1ffff7ec 	.word	0x1ffff7ec
 8007178:	1ffff7f0 	.word	0x1ffff7f0
 800717c:	20000166 	.word	0x20000166
 8007180:	20000176 	.word	0x20000176

08007184 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007184:	b480      	push	{r7}
 8007186:	b087      	sub	sp, #28
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	4613      	mov	r3, r2
 8007190:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007192:	2300      	movs	r3, #0
 8007194:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007196:	2300      	movs	r3, #0
 8007198:	75fb      	strb	r3, [r7, #23]
 800719a:	e027      	b.n	80071ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	0f1b      	lsrs	r3, r3, #28
 80071a0:	2b09      	cmp	r3, #9
 80071a2:	d80b      	bhi.n	80071bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	0f1b      	lsrs	r3, r3, #28
 80071a8:	b2da      	uxtb	r2, r3
 80071aa:	7dfb      	ldrb	r3, [r7, #23]
 80071ac:	005b      	lsls	r3, r3, #1
 80071ae:	4619      	mov	r1, r3
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	440b      	add	r3, r1
 80071b4:	3230      	adds	r2, #48	; 0x30
 80071b6:	b2d2      	uxtb	r2, r2
 80071b8:	701a      	strb	r2, [r3, #0]
 80071ba:	e00a      	b.n	80071d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	0f1b      	lsrs	r3, r3, #28
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	7dfb      	ldrb	r3, [r7, #23]
 80071c4:	005b      	lsls	r3, r3, #1
 80071c6:	4619      	mov	r1, r3
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	440b      	add	r3, r1
 80071cc:	3237      	adds	r2, #55	; 0x37
 80071ce:	b2d2      	uxtb	r2, r2
 80071d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	011b      	lsls	r3, r3, #4
 80071d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80071d8:	7dfb      	ldrb	r3, [r7, #23]
 80071da:	005b      	lsls	r3, r3, #1
 80071dc:	3301      	adds	r3, #1
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	4413      	add	r3, r2
 80071e2:	2200      	movs	r2, #0
 80071e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80071e6:	7dfb      	ldrb	r3, [r7, #23]
 80071e8:	3301      	adds	r3, #1
 80071ea:	75fb      	strb	r3, [r7, #23]
 80071ec:	7dfa      	ldrb	r2, [r7, #23]
 80071ee:	79fb      	ldrb	r3, [r7, #7]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d3d3      	bcc.n	800719c <IntToUnicode+0x18>
  }
}
 80071f4:	bf00      	nop
 80071f6:	371c      	adds	r7, #28
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bc80      	pop	{r7}
 80071fc:	4770      	bx	lr
	...

08007200 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a11      	ldr	r2, [pc, #68]	; (8007254 <HAL_PCD_MspInit+0x54>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d11b      	bne.n	800724a <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007212:	4b11      	ldr	r3, [pc, #68]	; (8007258 <HAL_PCD_MspInit+0x58>)
 8007214:	69db      	ldr	r3, [r3, #28]
 8007216:	4a10      	ldr	r2, [pc, #64]	; (8007258 <HAL_PCD_MspInit+0x58>)
 8007218:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800721c:	61d3      	str	r3, [r2, #28]
 800721e:	4b0e      	ldr	r3, [pc, #56]	; (8007258 <HAL_PCD_MspInit+0x58>)
 8007220:	69db      	ldr	r3, [r3, #28]
 8007222:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007226:	60fb      	str	r3, [r7, #12]
 8007228:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800722a:	2200      	movs	r2, #0
 800722c:	2100      	movs	r1, #0
 800722e:	2013      	movs	r0, #19
 8007230:	f7f9 fff9 	bl	8001226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8007234:	2013      	movs	r0, #19
 8007236:	f7fa f812 	bl	800125e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800723a:	2200      	movs	r2, #0
 800723c:	2100      	movs	r1, #0
 800723e:	2014      	movs	r0, #20
 8007240:	f7f9 fff1 	bl	8001226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007244:	2014      	movs	r0, #20
 8007246:	f7fa f80a 	bl	800125e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800724a:	bf00      	nop
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	40005c00 	.word	0x40005c00
 8007258:	40021000 	.word	0x40021000

0800725c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007270:	4619      	mov	r1, r3
 8007272:	4610      	mov	r0, r2
 8007274:	f7fe fdcd 	bl	8005e12 <USBD_LL_SetupStage>
}
 8007278:	bf00      	nop
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	460b      	mov	r3, r1
 800728a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007292:	78fa      	ldrb	r2, [r7, #3]
 8007294:	6879      	ldr	r1, [r7, #4]
 8007296:	4613      	mov	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4413      	add	r3, r2
 800729c:	00db      	lsls	r3, r3, #3
 800729e:	440b      	add	r3, r1
 80072a0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	78fb      	ldrb	r3, [r7, #3]
 80072a8:	4619      	mov	r1, r3
 80072aa:	f7fe fdfd 	bl	8005ea8 <USBD_LL_DataOutStage>
}
 80072ae:	bf00      	nop
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b082      	sub	sp, #8
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	460b      	mov	r3, r1
 80072c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80072c8:	78fa      	ldrb	r2, [r7, #3]
 80072ca:	6879      	ldr	r1, [r7, #4]
 80072cc:	4613      	mov	r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4413      	add	r3, r2
 80072d2:	00db      	lsls	r3, r3, #3
 80072d4:	440b      	add	r3, r1
 80072d6:	333c      	adds	r3, #60	; 0x3c
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	78fb      	ldrb	r3, [r7, #3]
 80072dc:	4619      	mov	r1, r3
 80072de:	f7fe fe54 	bl	8005f8a <USBD_LL_DataInStage>
}
 80072e2:	bf00      	nop
 80072e4:	3708      	adds	r7, #8
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b082      	sub	sp, #8
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7fe ff64 	bl	80061c6 <USBD_LL_SOF>
}
 80072fe:	bf00      	nop
 8007300:	3708      	adds	r7, #8
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b084      	sub	sp, #16
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800730e:	2301      	movs	r3, #1
 8007310:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	2b02      	cmp	r3, #2
 8007318:	d001      	beq.n	800731e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800731a:	f7f9 fd73 	bl	8000e04 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007324:	7bfa      	ldrb	r2, [r7, #15]
 8007326:	4611      	mov	r1, r2
 8007328:	4618      	mov	r0, r3
 800732a:	f7fe ff14 	bl	8006156 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007334:	4618      	mov	r0, r3
 8007336:	f7fe fecd 	bl	80060d4 <USBD_LL_Reset>
}
 800733a:	bf00      	nop
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
	...

08007344 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007352:	4618      	mov	r0, r3
 8007354:	f7fe ff0e 	bl	8006174 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d005      	beq.n	800736c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007360:	4b04      	ldr	r3, [pc, #16]	; (8007374 <HAL_PCD_SuspendCallback+0x30>)
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	4a03      	ldr	r2, [pc, #12]	; (8007374 <HAL_PCD_SuspendCallback+0x30>)
 8007366:	f043 0306 	orr.w	r3, r3, #6
 800736a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800736c:	bf00      	nop
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	e000ed00 	.word	0xe000ed00

08007378 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007386:	4618      	mov	r0, r3
 8007388:	f7fe ff08 	bl	800619c <USBD_LL_Resume>
}
 800738c:	bf00      	nop
 800738e:	3708      	adds	r7, #8
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800739c:	4a28      	ldr	r2, [pc, #160]	; (8007440 <USBD_LL_Init+0xac>)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a26      	ldr	r2, [pc, #152]	; (8007440 <USBD_LL_Init+0xac>)
 80073a8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80073ac:	4b24      	ldr	r3, [pc, #144]	; (8007440 <USBD_LL_Init+0xac>)
 80073ae:	4a25      	ldr	r2, [pc, #148]	; (8007444 <USBD_LL_Init+0xb0>)
 80073b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80073b2:	4b23      	ldr	r3, [pc, #140]	; (8007440 <USBD_LL_Init+0xac>)
 80073b4:	2208      	movs	r2, #8
 80073b6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80073b8:	4b21      	ldr	r3, [pc, #132]	; (8007440 <USBD_LL_Init+0xac>)
 80073ba:	2202      	movs	r2, #2
 80073bc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80073be:	4b20      	ldr	r3, [pc, #128]	; (8007440 <USBD_LL_Init+0xac>)
 80073c0:	2200      	movs	r2, #0
 80073c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80073c4:	4b1e      	ldr	r3, [pc, #120]	; (8007440 <USBD_LL_Init+0xac>)
 80073c6:	2200      	movs	r2, #0
 80073c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80073ca:	4b1d      	ldr	r3, [pc, #116]	; (8007440 <USBD_LL_Init+0xac>)
 80073cc:	2200      	movs	r2, #0
 80073ce:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80073d0:	481b      	ldr	r0, [pc, #108]	; (8007440 <USBD_LL_Init+0xac>)
 80073d2:	f7fa f8ea 	bl	80015aa <HAL_PCD_Init>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80073dc:	f7f9 fd12 	bl	8000e04 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80073e6:	2318      	movs	r3, #24
 80073e8:	2200      	movs	r2, #0
 80073ea:	2100      	movs	r1, #0
 80073ec:	f7fb fc1e 	bl	8002c2c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80073f6:	2358      	movs	r3, #88	; 0x58
 80073f8:	2200      	movs	r2, #0
 80073fa:	2180      	movs	r1, #128	; 0x80
 80073fc:	f7fb fc16 	bl	8002c2c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007406:	23c0      	movs	r3, #192	; 0xc0
 8007408:	2200      	movs	r2, #0
 800740a:	2181      	movs	r1, #129	; 0x81
 800740c:	f7fb fc0e 	bl	8002c2c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007416:	f44f 7388 	mov.w	r3, #272	; 0x110
 800741a:	2200      	movs	r2, #0
 800741c:	2101      	movs	r1, #1
 800741e:	f7fb fc05 	bl	8002c2c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007428:	f44f 7380 	mov.w	r3, #256	; 0x100
 800742c:	2200      	movs	r2, #0
 800742e:	2182      	movs	r1, #130	; 0x82
 8007430:	f7fb fbfc 	bl	8002c2c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3708      	adds	r7, #8
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	20000c04 	.word	0x20000c04
 8007444:	40005c00 	.word	0x40005c00

08007448 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007450:	2300      	movs	r3, #0
 8007452:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007454:	2300      	movs	r3, #0
 8007456:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800745e:	4618      	mov	r0, r3
 8007460:	f7fa f9ae 	bl	80017c0 <HAL_PCD_Start>
 8007464:	4603      	mov	r3, r0
 8007466:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007468:	7bfb      	ldrb	r3, [r7, #15]
 800746a:	4618      	mov	r0, r3
 800746c:	f000 f94e 	bl	800770c <USBD_Get_USB_Status>
 8007470:	4603      	mov	r3, r0
 8007472:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007474:	7bbb      	ldrb	r3, [r7, #14]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b084      	sub	sp, #16
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	4608      	mov	r0, r1
 8007488:	4611      	mov	r1, r2
 800748a:	461a      	mov	r2, r3
 800748c:	4603      	mov	r3, r0
 800748e:	70fb      	strb	r3, [r7, #3]
 8007490:	460b      	mov	r3, r1
 8007492:	70bb      	strb	r3, [r7, #2]
 8007494:	4613      	mov	r3, r2
 8007496:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007498:	2300      	movs	r3, #0
 800749a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800749c:	2300      	movs	r3, #0
 800749e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80074a6:	78bb      	ldrb	r3, [r7, #2]
 80074a8:	883a      	ldrh	r2, [r7, #0]
 80074aa:	78f9      	ldrb	r1, [r7, #3]
 80074ac:	f7fa fb28 	bl	8001b00 <HAL_PCD_EP_Open>
 80074b0:	4603      	mov	r3, r0
 80074b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 f928 	bl	800770c <USBD_Get_USB_Status>
 80074bc:	4603      	mov	r3, r0
 80074be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b084      	sub	sp, #16
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
 80074d2:	460b      	mov	r3, r1
 80074d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074da:	2300      	movs	r3, #0
 80074dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074e4:	78fa      	ldrb	r2, [r7, #3]
 80074e6:	4611      	mov	r1, r2
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7fa fb6f 	bl	8001bcc <HAL_PCD_EP_Close>
 80074ee:	4603      	mov	r3, r0
 80074f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074f2:	7bfb      	ldrb	r3, [r7, #15]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f000 f909 	bl	800770c <USBD_Get_USB_Status>
 80074fa:	4603      	mov	r3, r0
 80074fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007500:	4618      	mov	r0, r3
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	460b      	mov	r3, r1
 8007512:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007514:	2300      	movs	r3, #0
 8007516:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007518:	2300      	movs	r3, #0
 800751a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007522:	78fa      	ldrb	r2, [r7, #3]
 8007524:	4611      	mov	r1, r2
 8007526:	4618      	mov	r0, r3
 8007528:	f7fa fc2f 	bl	8001d8a <HAL_PCD_EP_SetStall>
 800752c:	4603      	mov	r3, r0
 800752e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007530:	7bfb      	ldrb	r3, [r7, #15]
 8007532:	4618      	mov	r0, r3
 8007534:	f000 f8ea 	bl	800770c <USBD_Get_USB_Status>
 8007538:	4603      	mov	r3, r0
 800753a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800753c:	7bbb      	ldrb	r3, [r7, #14]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b084      	sub	sp, #16
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	460b      	mov	r3, r1
 8007550:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007552:	2300      	movs	r3, #0
 8007554:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007560:	78fa      	ldrb	r2, [r7, #3]
 8007562:	4611      	mov	r1, r2
 8007564:	4618      	mov	r0, r3
 8007566:	f7fa fc70 	bl	8001e4a <HAL_PCD_EP_ClrStall>
 800756a:	4603      	mov	r3, r0
 800756c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800756e:	7bfb      	ldrb	r3, [r7, #15]
 8007570:	4618      	mov	r0, r3
 8007572:	f000 f8cb 	bl	800770c <USBD_Get_USB_Status>
 8007576:	4603      	mov	r3, r0
 8007578:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800757a:	7bbb      	ldrb	r3, [r7, #14]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	460b      	mov	r3, r1
 800758e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007596:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007598:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800759c:	2b00      	cmp	r3, #0
 800759e:	da0c      	bge.n	80075ba <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80075a0:	78fb      	ldrb	r3, [r7, #3]
 80075a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075a6:	68f9      	ldr	r1, [r7, #12]
 80075a8:	1c5a      	adds	r2, r3, #1
 80075aa:	4613      	mov	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4413      	add	r3, r2
 80075b0:	00db      	lsls	r3, r3, #3
 80075b2:	440b      	add	r3, r1
 80075b4:	3302      	adds	r3, #2
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	e00b      	b.n	80075d2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80075ba:	78fb      	ldrb	r3, [r7, #3]
 80075bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075c0:	68f9      	ldr	r1, [r7, #12]
 80075c2:	4613      	mov	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4413      	add	r3, r2
 80075c8:	00db      	lsls	r3, r3, #3
 80075ca:	440b      	add	r3, r1
 80075cc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80075d0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3714      	adds	r7, #20
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bc80      	pop	{r7}
 80075da:	4770      	bx	lr

080075dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	460b      	mov	r3, r1
 80075e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075e8:	2300      	movs	r3, #0
 80075ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075ec:	2300      	movs	r3, #0
 80075ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075f6:	78fa      	ldrb	r2, [r7, #3]
 80075f8:	4611      	mov	r1, r2
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fa fa5b 	bl	8001ab6 <HAL_PCD_SetAddress>
 8007600:	4603      	mov	r3, r0
 8007602:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007604:	7bfb      	ldrb	r3, [r7, #15]
 8007606:	4618      	mov	r0, r3
 8007608:	f000 f880 	bl	800770c <USBD_Get_USB_Status>
 800760c:	4603      	mov	r3, r0
 800760e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007610:	7bbb      	ldrb	r3, [r7, #14]
}
 8007612:	4618      	mov	r0, r3
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b086      	sub	sp, #24
 800761e:	af00      	add	r7, sp, #0
 8007620:	60f8      	str	r0, [r7, #12]
 8007622:	607a      	str	r2, [r7, #4]
 8007624:	461a      	mov	r2, r3
 8007626:	460b      	mov	r3, r1
 8007628:	72fb      	strb	r3, [r7, #11]
 800762a:	4613      	mov	r3, r2
 800762c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800762e:	2300      	movs	r3, #0
 8007630:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007632:	2300      	movs	r3, #0
 8007634:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800763c:	893b      	ldrh	r3, [r7, #8]
 800763e:	7af9      	ldrb	r1, [r7, #11]
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	f7fa fb5f 	bl	8001d04 <HAL_PCD_EP_Transmit>
 8007646:	4603      	mov	r3, r0
 8007648:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800764a:	7dfb      	ldrb	r3, [r7, #23]
 800764c:	4618      	mov	r0, r3
 800764e:	f000 f85d 	bl	800770c <USBD_Get_USB_Status>
 8007652:	4603      	mov	r3, r0
 8007654:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007656:	7dbb      	ldrb	r3, [r7, #22]
}
 8007658:	4618      	mov	r0, r3
 800765a:	3718      	adds	r7, #24
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	607a      	str	r2, [r7, #4]
 800766a:	461a      	mov	r2, r3
 800766c:	460b      	mov	r3, r1
 800766e:	72fb      	strb	r3, [r7, #11]
 8007670:	4613      	mov	r3, r2
 8007672:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007674:	2300      	movs	r3, #0
 8007676:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007678:	2300      	movs	r3, #0
 800767a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007682:	893b      	ldrh	r3, [r7, #8]
 8007684:	7af9      	ldrb	r1, [r7, #11]
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	f7fa fae8 	bl	8001c5c <HAL_PCD_EP_Receive>
 800768c:	4603      	mov	r3, r0
 800768e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007690:	7dfb      	ldrb	r3, [r7, #23]
 8007692:	4618      	mov	r0, r3
 8007694:	f000 f83a 	bl	800770c <USBD_Get_USB_Status>
 8007698:	4603      	mov	r3, r0
 800769a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800769c:	7dbb      	ldrb	r3, [r7, #22]
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3718      	adds	r7, #24
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b082      	sub	sp, #8
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
 80076ae:	460b      	mov	r3, r1
 80076b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076b8:	78fa      	ldrb	r2, [r7, #3]
 80076ba:	4611      	mov	r1, r2
 80076bc:	4618      	mov	r0, r3
 80076be:	f7fa fb0a 	bl	8001cd6 <HAL_PCD_EP_GetRxCount>
 80076c2:	4603      	mov	r3, r0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3708      	adds	r7, #8
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80076d4:	4b02      	ldr	r3, [pc, #8]	; (80076e0 <USBD_static_malloc+0x14>)
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	370c      	adds	r7, #12
 80076da:	46bd      	mov	sp, r7
 80076dc:	bc80      	pop	{r7}
 80076de:	4770      	bx	lr
 80076e0:	20000210 	.word	0x20000210

080076e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]

}
 80076ec:	bf00      	nop
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bc80      	pop	{r7}
 80076f4:	4770      	bx	lr

080076f6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076f6:	b480      	push	{r7}
 80076f8:	b083      	sub	sp, #12
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
 80076fe:	460b      	mov	r3, r1
 8007700:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007702:	bf00      	nop
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	bc80      	pop	{r7}
 800770a:	4770      	bx	lr

0800770c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	4603      	mov	r3, r0
 8007714:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007716:	2300      	movs	r3, #0
 8007718:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800771a:	79fb      	ldrb	r3, [r7, #7]
 800771c:	2b03      	cmp	r3, #3
 800771e:	d817      	bhi.n	8007750 <USBD_Get_USB_Status+0x44>
 8007720:	a201      	add	r2, pc, #4	; (adr r2, 8007728 <USBD_Get_USB_Status+0x1c>)
 8007722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007726:	bf00      	nop
 8007728:	08007739 	.word	0x08007739
 800772c:	0800773f 	.word	0x0800773f
 8007730:	08007745 	.word	0x08007745
 8007734:	0800774b 	.word	0x0800774b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007738:	2300      	movs	r3, #0
 800773a:	73fb      	strb	r3, [r7, #15]
    break;
 800773c:	e00b      	b.n	8007756 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800773e:	2302      	movs	r3, #2
 8007740:	73fb      	strb	r3, [r7, #15]
    break;
 8007742:	e008      	b.n	8007756 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007744:	2301      	movs	r3, #1
 8007746:	73fb      	strb	r3, [r7, #15]
    break;
 8007748:	e005      	b.n	8007756 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800774a:	2302      	movs	r3, #2
 800774c:	73fb      	strb	r3, [r7, #15]
    break;
 800774e:	e002      	b.n	8007756 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007750:	2302      	movs	r3, #2
 8007752:	73fb      	strb	r3, [r7, #15]
    break;
 8007754:	bf00      	nop
  }
  return usb_status;
 8007756:	7bfb      	ldrb	r3, [r7, #15]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	bc80      	pop	{r7}
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop

08007764 <__errno>:
 8007764:	4b01      	ldr	r3, [pc, #4]	; (800776c <__errno+0x8>)
 8007766:	6818      	ldr	r0, [r3, #0]
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	20000180 	.word	0x20000180

08007770 <__libc_init_array>:
 8007770:	b570      	push	{r4, r5, r6, lr}
 8007772:	2500      	movs	r5, #0
 8007774:	4e0c      	ldr	r6, [pc, #48]	; (80077a8 <__libc_init_array+0x38>)
 8007776:	4c0d      	ldr	r4, [pc, #52]	; (80077ac <__libc_init_array+0x3c>)
 8007778:	1ba4      	subs	r4, r4, r6
 800777a:	10a4      	asrs	r4, r4, #2
 800777c:	42a5      	cmp	r5, r4
 800777e:	d109      	bne.n	8007794 <__libc_init_array+0x24>
 8007780:	f000 fab0 	bl	8007ce4 <_init>
 8007784:	2500      	movs	r5, #0
 8007786:	4e0a      	ldr	r6, [pc, #40]	; (80077b0 <__libc_init_array+0x40>)
 8007788:	4c0a      	ldr	r4, [pc, #40]	; (80077b4 <__libc_init_array+0x44>)
 800778a:	1ba4      	subs	r4, r4, r6
 800778c:	10a4      	asrs	r4, r4, #2
 800778e:	42a5      	cmp	r5, r4
 8007790:	d105      	bne.n	800779e <__libc_init_array+0x2e>
 8007792:	bd70      	pop	{r4, r5, r6, pc}
 8007794:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007798:	4798      	blx	r3
 800779a:	3501      	adds	r5, #1
 800779c:	e7ee      	b.n	800777c <__libc_init_array+0xc>
 800779e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077a2:	4798      	blx	r3
 80077a4:	3501      	adds	r5, #1
 80077a6:	e7f2      	b.n	800778e <__libc_init_array+0x1e>
 80077a8:	08007da0 	.word	0x08007da0
 80077ac:	08007da0 	.word	0x08007da0
 80077b0:	08007da0 	.word	0x08007da0
 80077b4:	08007da4 	.word	0x08007da4

080077b8 <memset>:
 80077b8:	4603      	mov	r3, r0
 80077ba:	4402      	add	r2, r0
 80077bc:	4293      	cmp	r3, r2
 80077be:	d100      	bne.n	80077c2 <memset+0xa>
 80077c0:	4770      	bx	lr
 80077c2:	f803 1b01 	strb.w	r1, [r3], #1
 80077c6:	e7f9      	b.n	80077bc <memset+0x4>

080077c8 <rand>:
 80077c8:	b538      	push	{r3, r4, r5, lr}
 80077ca:	4b13      	ldr	r3, [pc, #76]	; (8007818 <rand+0x50>)
 80077cc:	681c      	ldr	r4, [r3, #0]
 80077ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80077d0:	b97b      	cbnz	r3, 80077f2 <rand+0x2a>
 80077d2:	2018      	movs	r0, #24
 80077d4:	f000 f82c 	bl	8007830 <malloc>
 80077d8:	4a10      	ldr	r2, [pc, #64]	; (800781c <rand+0x54>)
 80077da:	4b11      	ldr	r3, [pc, #68]	; (8007820 <rand+0x58>)
 80077dc:	63a0      	str	r0, [r4, #56]	; 0x38
 80077de:	e9c0 2300 	strd	r2, r3, [r0]
 80077e2:	4b10      	ldr	r3, [pc, #64]	; (8007824 <rand+0x5c>)
 80077e4:	2201      	movs	r2, #1
 80077e6:	6083      	str	r3, [r0, #8]
 80077e8:	230b      	movs	r3, #11
 80077ea:	8183      	strh	r3, [r0, #12]
 80077ec:	2300      	movs	r3, #0
 80077ee:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80077f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80077f4:	480c      	ldr	r0, [pc, #48]	; (8007828 <rand+0x60>)
 80077f6:	690a      	ldr	r2, [r1, #16]
 80077f8:	694b      	ldr	r3, [r1, #20]
 80077fa:	4350      	muls	r0, r2
 80077fc:	4c0b      	ldr	r4, [pc, #44]	; (800782c <rand+0x64>)
 80077fe:	fb04 0003 	mla	r0, r4, r3, r0
 8007802:	fba2 2304 	umull	r2, r3, r2, r4
 8007806:	4403      	add	r3, r0
 8007808:	1c54      	adds	r4, r2, #1
 800780a:	f143 0500 	adc.w	r5, r3, #0
 800780e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8007812:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8007816:	bd38      	pop	{r3, r4, r5, pc}
 8007818:	20000180 	.word	0x20000180
 800781c:	abcd330e 	.word	0xabcd330e
 8007820:	e66d1234 	.word	0xe66d1234
 8007824:	0005deec 	.word	0x0005deec
 8007828:	5851f42d 	.word	0x5851f42d
 800782c:	4c957f2d 	.word	0x4c957f2d

08007830 <malloc>:
 8007830:	4b02      	ldr	r3, [pc, #8]	; (800783c <malloc+0xc>)
 8007832:	4601      	mov	r1, r0
 8007834:	6818      	ldr	r0, [r3, #0]
 8007836:	f000 b803 	b.w	8007840 <_malloc_r>
 800783a:	bf00      	nop
 800783c:	20000180 	.word	0x20000180

08007840 <_malloc_r>:
 8007840:	b570      	push	{r4, r5, r6, lr}
 8007842:	1ccd      	adds	r5, r1, #3
 8007844:	f025 0503 	bic.w	r5, r5, #3
 8007848:	3508      	adds	r5, #8
 800784a:	2d0c      	cmp	r5, #12
 800784c:	bf38      	it	cc
 800784e:	250c      	movcc	r5, #12
 8007850:	2d00      	cmp	r5, #0
 8007852:	4606      	mov	r6, r0
 8007854:	db01      	blt.n	800785a <_malloc_r+0x1a>
 8007856:	42a9      	cmp	r1, r5
 8007858:	d903      	bls.n	8007862 <_malloc_r+0x22>
 800785a:	230c      	movs	r3, #12
 800785c:	6033      	str	r3, [r6, #0]
 800785e:	2000      	movs	r0, #0
 8007860:	bd70      	pop	{r4, r5, r6, pc}
 8007862:	f000 f857 	bl	8007914 <__malloc_lock>
 8007866:	4a21      	ldr	r2, [pc, #132]	; (80078ec <_malloc_r+0xac>)
 8007868:	6814      	ldr	r4, [r2, #0]
 800786a:	4621      	mov	r1, r4
 800786c:	b991      	cbnz	r1, 8007894 <_malloc_r+0x54>
 800786e:	4c20      	ldr	r4, [pc, #128]	; (80078f0 <_malloc_r+0xb0>)
 8007870:	6823      	ldr	r3, [r4, #0]
 8007872:	b91b      	cbnz	r3, 800787c <_malloc_r+0x3c>
 8007874:	4630      	mov	r0, r6
 8007876:	f000 f83d 	bl	80078f4 <_sbrk_r>
 800787a:	6020      	str	r0, [r4, #0]
 800787c:	4629      	mov	r1, r5
 800787e:	4630      	mov	r0, r6
 8007880:	f000 f838 	bl	80078f4 <_sbrk_r>
 8007884:	1c43      	adds	r3, r0, #1
 8007886:	d124      	bne.n	80078d2 <_malloc_r+0x92>
 8007888:	230c      	movs	r3, #12
 800788a:	4630      	mov	r0, r6
 800788c:	6033      	str	r3, [r6, #0]
 800788e:	f000 f842 	bl	8007916 <__malloc_unlock>
 8007892:	e7e4      	b.n	800785e <_malloc_r+0x1e>
 8007894:	680b      	ldr	r3, [r1, #0]
 8007896:	1b5b      	subs	r3, r3, r5
 8007898:	d418      	bmi.n	80078cc <_malloc_r+0x8c>
 800789a:	2b0b      	cmp	r3, #11
 800789c:	d90f      	bls.n	80078be <_malloc_r+0x7e>
 800789e:	600b      	str	r3, [r1, #0]
 80078a0:	18cc      	adds	r4, r1, r3
 80078a2:	50cd      	str	r5, [r1, r3]
 80078a4:	4630      	mov	r0, r6
 80078a6:	f000 f836 	bl	8007916 <__malloc_unlock>
 80078aa:	f104 000b 	add.w	r0, r4, #11
 80078ae:	1d23      	adds	r3, r4, #4
 80078b0:	f020 0007 	bic.w	r0, r0, #7
 80078b4:	1ac3      	subs	r3, r0, r3
 80078b6:	d0d3      	beq.n	8007860 <_malloc_r+0x20>
 80078b8:	425a      	negs	r2, r3
 80078ba:	50e2      	str	r2, [r4, r3]
 80078bc:	e7d0      	b.n	8007860 <_malloc_r+0x20>
 80078be:	684b      	ldr	r3, [r1, #4]
 80078c0:	428c      	cmp	r4, r1
 80078c2:	bf16      	itet	ne
 80078c4:	6063      	strne	r3, [r4, #4]
 80078c6:	6013      	streq	r3, [r2, #0]
 80078c8:	460c      	movne	r4, r1
 80078ca:	e7eb      	b.n	80078a4 <_malloc_r+0x64>
 80078cc:	460c      	mov	r4, r1
 80078ce:	6849      	ldr	r1, [r1, #4]
 80078d0:	e7cc      	b.n	800786c <_malloc_r+0x2c>
 80078d2:	1cc4      	adds	r4, r0, #3
 80078d4:	f024 0403 	bic.w	r4, r4, #3
 80078d8:	42a0      	cmp	r0, r4
 80078da:	d005      	beq.n	80078e8 <_malloc_r+0xa8>
 80078dc:	1a21      	subs	r1, r4, r0
 80078de:	4630      	mov	r0, r6
 80078e0:	f000 f808 	bl	80078f4 <_sbrk_r>
 80078e4:	3001      	adds	r0, #1
 80078e6:	d0cf      	beq.n	8007888 <_malloc_r+0x48>
 80078e8:	6025      	str	r5, [r4, #0]
 80078ea:	e7db      	b.n	80078a4 <_malloc_r+0x64>
 80078ec:	20000430 	.word	0x20000430
 80078f0:	20000434 	.word	0x20000434

080078f4 <_sbrk_r>:
 80078f4:	b538      	push	{r3, r4, r5, lr}
 80078f6:	2300      	movs	r3, #0
 80078f8:	4c05      	ldr	r4, [pc, #20]	; (8007910 <_sbrk_r+0x1c>)
 80078fa:	4605      	mov	r5, r0
 80078fc:	4608      	mov	r0, r1
 80078fe:	6023      	str	r3, [r4, #0]
 8007900:	f7f9 faf6 	bl	8000ef0 <_sbrk>
 8007904:	1c43      	adds	r3, r0, #1
 8007906:	d102      	bne.n	800790e <_sbrk_r+0x1a>
 8007908:	6823      	ldr	r3, [r4, #0]
 800790a:	b103      	cbz	r3, 800790e <_sbrk_r+0x1a>
 800790c:	602b      	str	r3, [r5, #0]
 800790e:	bd38      	pop	{r3, r4, r5, pc}
 8007910:	20000ef0 	.word	0x20000ef0

08007914 <__malloc_lock>:
 8007914:	4770      	bx	lr

08007916 <__malloc_unlock>:
 8007916:	4770      	bx	lr

08007918 <exp>:
 8007918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800791c:	b08b      	sub	sp, #44	; 0x2c
 800791e:	4604      	mov	r4, r0
 8007920:	460d      	mov	r5, r1
 8007922:	f000 f871 	bl	8007a08 <__ieee754_exp>
 8007926:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8007a04 <exp+0xec>
 800792a:	4606      	mov	r6, r0
 800792c:	f998 3000 	ldrsb.w	r3, [r8]
 8007930:	460f      	mov	r7, r1
 8007932:	3301      	adds	r3, #1
 8007934:	d02c      	beq.n	8007990 <exp+0x78>
 8007936:	4620      	mov	r0, r4
 8007938:	4629      	mov	r1, r5
 800793a:	f000 f9cb 	bl	8007cd4 <finite>
 800793e:	b338      	cbz	r0, 8007990 <exp+0x78>
 8007940:	a329      	add	r3, pc, #164	; (adr r3, 80079e8 <exp+0xd0>)
 8007942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007946:	4620      	mov	r0, r4
 8007948:	4629      	mov	r1, r5
 800794a:	f7f9 f84d 	bl	80009e8 <__aeabi_dcmpgt>
 800794e:	4681      	mov	r9, r0
 8007950:	2800      	cmp	r0, #0
 8007952:	d02d      	beq.n	80079b0 <exp+0x98>
 8007954:	2303      	movs	r3, #3
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	4b27      	ldr	r3, [pc, #156]	; (80079f8 <exp+0xe0>)
 800795a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800795e:	9301      	str	r3, [sp, #4]
 8007960:	2300      	movs	r3, #0
 8007962:	9308      	str	r3, [sp, #32]
 8007964:	f998 3000 	ldrsb.w	r3, [r8]
 8007968:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800796c:	b9ab      	cbnz	r3, 800799a <exp+0x82>
 800796e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007972:	4b22      	ldr	r3, [pc, #136]	; (80079fc <exp+0xe4>)
 8007974:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007978:	4668      	mov	r0, sp
 800797a:	f000 f9b1 	bl	8007ce0 <matherr>
 800797e:	b190      	cbz	r0, 80079a6 <exp+0x8e>
 8007980:	9b08      	ldr	r3, [sp, #32]
 8007982:	b11b      	cbz	r3, 800798c <exp+0x74>
 8007984:	f7ff feee 	bl	8007764 <__errno>
 8007988:	9b08      	ldr	r3, [sp, #32]
 800798a:	6003      	str	r3, [r0, #0]
 800798c:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8007990:	4630      	mov	r0, r6
 8007992:	4639      	mov	r1, r7
 8007994:	b00b      	add	sp, #44	; 0x2c
 8007996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800799a:	2000      	movs	r0, #0
 800799c:	4918      	ldr	r1, [pc, #96]	; (8007a00 <exp+0xe8>)
 800799e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d1e8      	bne.n	8007978 <exp+0x60>
 80079a6:	f7ff fedd 	bl	8007764 <__errno>
 80079aa:	2322      	movs	r3, #34	; 0x22
 80079ac:	6003      	str	r3, [r0, #0]
 80079ae:	e7e7      	b.n	8007980 <exp+0x68>
 80079b0:	a30f      	add	r3, pc, #60	; (adr r3, 80079f0 <exp+0xd8>)
 80079b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b6:	4620      	mov	r0, r4
 80079b8:	4629      	mov	r1, r5
 80079ba:	f7f8 fff7 	bl	80009ac <__aeabi_dcmplt>
 80079be:	2800      	cmp	r0, #0
 80079c0:	d0e6      	beq.n	8007990 <exp+0x78>
 80079c2:	2304      	movs	r3, #4
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	4b0c      	ldr	r3, [pc, #48]	; (80079f8 <exp+0xe0>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	9301      	str	r3, [sp, #4]
 80079cc:	2300      	movs	r3, #0
 80079ce:	f8cd 9020 	str.w	r9, [sp, #32]
 80079d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80079d6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80079da:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80079de:	f998 3000 	ldrsb.w	r3, [r8]
 80079e2:	e7de      	b.n	80079a2 <exp+0x8a>
 80079e4:	f3af 8000 	nop.w
 80079e8:	fefa39ef 	.word	0xfefa39ef
 80079ec:	40862e42 	.word	0x40862e42
 80079f0:	d52d3051 	.word	0xd52d3051
 80079f4:	c0874910 	.word	0xc0874910
 80079f8:	08007d6c 	.word	0x08007d6c
 80079fc:	47efffff 	.word	0x47efffff
 8007a00:	7ff00000 	.word	0x7ff00000
 8007a04:	200001e4 	.word	0x200001e4

08007a08 <__ieee754_exp>:
 8007a08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a0c:	4aa8      	ldr	r2, [pc, #672]	; (8007cb0 <__ieee754_exp+0x2a8>)
 8007a0e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007a12:	4296      	cmp	r6, r2
 8007a14:	4605      	mov	r5, r0
 8007a16:	460c      	mov	r4, r1
 8007a18:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8007a1c:	d92c      	bls.n	8007a78 <__ieee754_exp+0x70>
 8007a1e:	4aa5      	ldr	r2, [pc, #660]	; (8007cb4 <__ieee754_exp+0x2ac>)
 8007a20:	4296      	cmp	r6, r2
 8007a22:	d910      	bls.n	8007a46 <__ieee754_exp+0x3e>
 8007a24:	f3c1 0313 	ubfx	r3, r1, #0, #20
 8007a28:	4303      	orrs	r3, r0
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	d005      	beq.n	8007a3a <__ieee754_exp+0x32>
 8007a2e:	460b      	mov	r3, r1
 8007a30:	f7f8 fb94 	bl	800015c <__adddf3>
 8007a34:	4605      	mov	r5, r0
 8007a36:	460c      	mov	r4, r1
 8007a38:	e000      	b.n	8007a3c <__ieee754_exp+0x34>
 8007a3a:	b9d7      	cbnz	r7, 8007a72 <__ieee754_exp+0x6a>
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	4621      	mov	r1, r4
 8007a40:	b004      	add	sp, #16
 8007a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a46:	a384      	add	r3, pc, #528	; (adr r3, 8007c58 <__ieee754_exp+0x250>)
 8007a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4c:	f7f8 ffcc 	bl	80009e8 <__aeabi_dcmpgt>
 8007a50:	b138      	cbz	r0, 8007a62 <__ieee754_exp+0x5a>
 8007a52:	a383      	add	r3, pc, #524	; (adr r3, 8007c60 <__ieee754_exp+0x258>)
 8007a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a58:	4610      	mov	r0, r2
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	f7f8 fd34 	bl	80004c8 <__aeabi_dmul>
 8007a60:	e7e8      	b.n	8007a34 <__ieee754_exp+0x2c>
 8007a62:	a381      	add	r3, pc, #516	; (adr r3, 8007c68 <__ieee754_exp+0x260>)
 8007a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a68:	4628      	mov	r0, r5
 8007a6a:	4621      	mov	r1, r4
 8007a6c:	f7f8 ff9e 	bl	80009ac <__aeabi_dcmplt>
 8007a70:	b130      	cbz	r0, 8007a80 <__ieee754_exp+0x78>
 8007a72:	2500      	movs	r5, #0
 8007a74:	462c      	mov	r4, r5
 8007a76:	e7e1      	b.n	8007a3c <__ieee754_exp+0x34>
 8007a78:	4b8f      	ldr	r3, [pc, #572]	; (8007cb8 <__ieee754_exp+0x2b0>)
 8007a7a:	429e      	cmp	r6, r3
 8007a7c:	f240 80a6 	bls.w	8007bcc <__ieee754_exp+0x1c4>
 8007a80:	4b8e      	ldr	r3, [pc, #568]	; (8007cbc <__ieee754_exp+0x2b4>)
 8007a82:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 8007a86:	429e      	cmp	r6, r3
 8007a88:	d875      	bhi.n	8007b76 <__ieee754_exp+0x16e>
 8007a8a:	4b8d      	ldr	r3, [pc, #564]	; (8007cc0 <__ieee754_exp+0x2b8>)
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	4443      	add	r3, r8
 8007a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a94:	4621      	mov	r1, r4
 8007a96:	f7f8 fb5f 	bl	8000158 <__aeabi_dsub>
 8007a9a:	4e8a      	ldr	r6, [pc, #552]	; (8007cc4 <__ieee754_exp+0x2bc>)
 8007a9c:	e9cd 0100 	strd	r0, r1, [sp]
 8007aa0:	f1c7 0a01 	rsb	sl, r7, #1
 8007aa4:	4446      	add	r6, r8
 8007aa6:	ebaa 0a07 	sub.w	sl, sl, r7
 8007aaa:	e9d6 8900 	ldrd	r8, r9, [r6]
 8007aae:	4642      	mov	r2, r8
 8007ab0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ab4:	464b      	mov	r3, r9
 8007ab6:	f7f8 fb4f 	bl	8000158 <__aeabi_dsub>
 8007aba:	4605      	mov	r5, r0
 8007abc:	460c      	mov	r4, r1
 8007abe:	462a      	mov	r2, r5
 8007ac0:	4623      	mov	r3, r4
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	4621      	mov	r1, r4
 8007ac6:	f7f8 fcff 	bl	80004c8 <__aeabi_dmul>
 8007aca:	a369      	add	r3, pc, #420	; (adr r3, 8007c70 <__ieee754_exp+0x268>)
 8007acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad0:	4606      	mov	r6, r0
 8007ad2:	460f      	mov	r7, r1
 8007ad4:	f7f8 fcf8 	bl	80004c8 <__aeabi_dmul>
 8007ad8:	a367      	add	r3, pc, #412	; (adr r3, 8007c78 <__ieee754_exp+0x270>)
 8007ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ade:	f7f8 fb3b 	bl	8000158 <__aeabi_dsub>
 8007ae2:	4632      	mov	r2, r6
 8007ae4:	463b      	mov	r3, r7
 8007ae6:	f7f8 fcef 	bl	80004c8 <__aeabi_dmul>
 8007aea:	a365      	add	r3, pc, #404	; (adr r3, 8007c80 <__ieee754_exp+0x278>)
 8007aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af0:	f7f8 fb34 	bl	800015c <__adddf3>
 8007af4:	4632      	mov	r2, r6
 8007af6:	463b      	mov	r3, r7
 8007af8:	f7f8 fce6 	bl	80004c8 <__aeabi_dmul>
 8007afc:	a362      	add	r3, pc, #392	; (adr r3, 8007c88 <__ieee754_exp+0x280>)
 8007afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b02:	f7f8 fb29 	bl	8000158 <__aeabi_dsub>
 8007b06:	4632      	mov	r2, r6
 8007b08:	463b      	mov	r3, r7
 8007b0a:	f7f8 fcdd 	bl	80004c8 <__aeabi_dmul>
 8007b0e:	a360      	add	r3, pc, #384	; (adr r3, 8007c90 <__ieee754_exp+0x288>)
 8007b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b14:	f7f8 fb22 	bl	800015c <__adddf3>
 8007b18:	4632      	mov	r2, r6
 8007b1a:	463b      	mov	r3, r7
 8007b1c:	f7f8 fcd4 	bl	80004c8 <__aeabi_dmul>
 8007b20:	4602      	mov	r2, r0
 8007b22:	460b      	mov	r3, r1
 8007b24:	4628      	mov	r0, r5
 8007b26:	4621      	mov	r1, r4
 8007b28:	f7f8 fb16 	bl	8000158 <__aeabi_dsub>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	460b      	mov	r3, r1
 8007b30:	4606      	mov	r6, r0
 8007b32:	460f      	mov	r7, r1
 8007b34:	4628      	mov	r0, r5
 8007b36:	4621      	mov	r1, r4
 8007b38:	f7f8 fcc6 	bl	80004c8 <__aeabi_dmul>
 8007b3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b40:	f1ba 0f00 	cmp.w	sl, #0
 8007b44:	d159      	bne.n	8007bfa <__ieee754_exp+0x1f2>
 8007b46:	2200      	movs	r2, #0
 8007b48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b4c:	4630      	mov	r0, r6
 8007b4e:	4639      	mov	r1, r7
 8007b50:	f7f8 fb02 	bl	8000158 <__aeabi_dsub>
 8007b54:	4602      	mov	r2, r0
 8007b56:	460b      	mov	r3, r1
 8007b58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b5c:	f7f8 fdde 	bl	800071c <__aeabi_ddiv>
 8007b60:	462a      	mov	r2, r5
 8007b62:	4623      	mov	r3, r4
 8007b64:	f7f8 faf8 	bl	8000158 <__aeabi_dsub>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	2000      	movs	r0, #0
 8007b6e:	4956      	ldr	r1, [pc, #344]	; (8007cc8 <__ieee754_exp+0x2c0>)
 8007b70:	f7f8 faf2 	bl	8000158 <__aeabi_dsub>
 8007b74:	e75e      	b.n	8007a34 <__ieee754_exp+0x2c>
 8007b76:	4e55      	ldr	r6, [pc, #340]	; (8007ccc <__ieee754_exp+0x2c4>)
 8007b78:	a347      	add	r3, pc, #284	; (adr r3, 8007c98 <__ieee754_exp+0x290>)
 8007b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7e:	4446      	add	r6, r8
 8007b80:	4628      	mov	r0, r5
 8007b82:	4621      	mov	r1, r4
 8007b84:	f7f8 fca0 	bl	80004c8 <__aeabi_dmul>
 8007b88:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b8c:	f7f8 fae6 	bl	800015c <__adddf3>
 8007b90:	f7f8 ff34 	bl	80009fc <__aeabi_d2iz>
 8007b94:	4682      	mov	sl, r0
 8007b96:	f7f8 fc2d 	bl	80003f4 <__aeabi_i2d>
 8007b9a:	a341      	add	r3, pc, #260	; (adr r3, 8007ca0 <__ieee754_exp+0x298>)
 8007b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba0:	4606      	mov	r6, r0
 8007ba2:	460f      	mov	r7, r1
 8007ba4:	f7f8 fc90 	bl	80004c8 <__aeabi_dmul>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	460b      	mov	r3, r1
 8007bac:	4628      	mov	r0, r5
 8007bae:	4621      	mov	r1, r4
 8007bb0:	f7f8 fad2 	bl	8000158 <__aeabi_dsub>
 8007bb4:	a33c      	add	r3, pc, #240	; (adr r3, 8007ca8 <__ieee754_exp+0x2a0>)
 8007bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bba:	e9cd 0100 	strd	r0, r1, [sp]
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	4639      	mov	r1, r7
 8007bc2:	f7f8 fc81 	bl	80004c8 <__aeabi_dmul>
 8007bc6:	4680      	mov	r8, r0
 8007bc8:	4689      	mov	r9, r1
 8007bca:	e770      	b.n	8007aae <__ieee754_exp+0xa6>
 8007bcc:	4b40      	ldr	r3, [pc, #256]	; (8007cd0 <__ieee754_exp+0x2c8>)
 8007bce:	429e      	cmp	r6, r3
 8007bd0:	d80e      	bhi.n	8007bf0 <__ieee754_exp+0x1e8>
 8007bd2:	a323      	add	r3, pc, #140	; (adr r3, 8007c60 <__ieee754_exp+0x258>)
 8007bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd8:	f7f8 fac0 	bl	800015c <__adddf3>
 8007bdc:	2200      	movs	r2, #0
 8007bde:	4b3a      	ldr	r3, [pc, #232]	; (8007cc8 <__ieee754_exp+0x2c0>)
 8007be0:	f7f8 ff02 	bl	80009e8 <__aeabi_dcmpgt>
 8007be4:	b138      	cbz	r0, 8007bf6 <__ieee754_exp+0x1ee>
 8007be6:	2200      	movs	r2, #0
 8007be8:	4b37      	ldr	r3, [pc, #220]	; (8007cc8 <__ieee754_exp+0x2c0>)
 8007bea:	4628      	mov	r0, r5
 8007bec:	4621      	mov	r1, r4
 8007bee:	e71f      	b.n	8007a30 <__ieee754_exp+0x28>
 8007bf0:	f04f 0a00 	mov.w	sl, #0
 8007bf4:	e763      	b.n	8007abe <__ieee754_exp+0xb6>
 8007bf6:	4682      	mov	sl, r0
 8007bf8:	e761      	b.n	8007abe <__ieee754_exp+0xb6>
 8007bfa:	4632      	mov	r2, r6
 8007bfc:	463b      	mov	r3, r7
 8007bfe:	2000      	movs	r0, #0
 8007c00:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007c04:	f7f8 faa8 	bl	8000158 <__aeabi_dsub>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c10:	f7f8 fd84 	bl	800071c <__aeabi_ddiv>
 8007c14:	4602      	mov	r2, r0
 8007c16:	460b      	mov	r3, r1
 8007c18:	4640      	mov	r0, r8
 8007c1a:	4649      	mov	r1, r9
 8007c1c:	f7f8 fa9c 	bl	8000158 <__aeabi_dsub>
 8007c20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c24:	f7f8 fa98 	bl	8000158 <__aeabi_dsub>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	2000      	movs	r0, #0
 8007c2e:	4926      	ldr	r1, [pc, #152]	; (8007cc8 <__ieee754_exp+0x2c0>)
 8007c30:	f7f8 fa92 	bl	8000158 <__aeabi_dsub>
 8007c34:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8007c38:	4592      	cmp	sl, r2
 8007c3a:	db02      	blt.n	8007c42 <__ieee754_exp+0x23a>
 8007c3c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8007c40:	e6f8      	b.n	8007a34 <__ieee754_exp+0x2c>
 8007c42:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8007c46:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8007c50:	e704      	b.n	8007a5c <__ieee754_exp+0x54>
 8007c52:	bf00      	nop
 8007c54:	f3af 8000 	nop.w
 8007c58:	fefa39ef 	.word	0xfefa39ef
 8007c5c:	40862e42 	.word	0x40862e42
 8007c60:	8800759c 	.word	0x8800759c
 8007c64:	7e37e43c 	.word	0x7e37e43c
 8007c68:	d52d3051 	.word	0xd52d3051
 8007c6c:	c0874910 	.word	0xc0874910
 8007c70:	72bea4d0 	.word	0x72bea4d0
 8007c74:	3e663769 	.word	0x3e663769
 8007c78:	c5d26bf1 	.word	0xc5d26bf1
 8007c7c:	3ebbbd41 	.word	0x3ebbbd41
 8007c80:	af25de2c 	.word	0xaf25de2c
 8007c84:	3f11566a 	.word	0x3f11566a
 8007c88:	16bebd93 	.word	0x16bebd93
 8007c8c:	3f66c16c 	.word	0x3f66c16c
 8007c90:	5555553e 	.word	0x5555553e
 8007c94:	3fc55555 	.word	0x3fc55555
 8007c98:	652b82fe 	.word	0x652b82fe
 8007c9c:	3ff71547 	.word	0x3ff71547
 8007ca0:	fee00000 	.word	0xfee00000
 8007ca4:	3fe62e42 	.word	0x3fe62e42
 8007ca8:	35793c76 	.word	0x35793c76
 8007cac:	3dea39ef 	.word	0x3dea39ef
 8007cb0:	40862e41 	.word	0x40862e41
 8007cb4:	7fefffff 	.word	0x7fefffff
 8007cb8:	3fd62e42 	.word	0x3fd62e42
 8007cbc:	3ff0a2b1 	.word	0x3ff0a2b1
 8007cc0:	08007d80 	.word	0x08007d80
 8007cc4:	08007d90 	.word	0x08007d90
 8007cc8:	3ff00000 	.word	0x3ff00000
 8007ccc:	08007d70 	.word	0x08007d70
 8007cd0:	3e2fffff 	.word	0x3e2fffff

08007cd4 <finite>:
 8007cd4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8007cd8:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8007cdc:	0fc0      	lsrs	r0, r0, #31
 8007cde:	4770      	bx	lr

08007ce0 <matherr>:
 8007ce0:	2000      	movs	r0, #0
 8007ce2:	4770      	bx	lr

08007ce4 <_init>:
 8007ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce6:	bf00      	nop
 8007ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cea:	bc08      	pop	{r3}
 8007cec:	469e      	mov	lr, r3
 8007cee:	4770      	bx	lr

08007cf0 <_fini>:
 8007cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf2:	bf00      	nop
 8007cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cf6:	bc08      	pop	{r3}
 8007cf8:	469e      	mov	lr, r3
 8007cfa:	4770      	bx	lr
